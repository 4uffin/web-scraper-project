Expressions and operators - JavaScript | MDN
Skip to main content
Skip to search
MDN
HTML
HTML: Markup language
HTML reference
Elements
Global attributes
Attributes
See allâ¦
HTML guides
Responsive images
HTML cheatsheet
Date & time formats
See allâ¦
Markup languages
SVG
MathML
XML
CSS
CSS: Styling language
CSS reference
Properties
Selectors
At-rules
Values & units
See allâ¦
CSS guides
Box model
Animations
Flexbox
Colors
See allâ¦
Layout cookbook
Column layouts
Centering an element
Card component
See allâ¦
JavaScript
JS
JavaScript: Scripting language
JS reference
Standard built-in objects
Expressions & operators
Statements & declarations
Functions
See allâ¦
JS guides
Control flow & error handing
Loops and iteration
Working with objects
Using classes
See allâ¦
Web APIs
Web APIs: Programming interfaces
Web API reference
File system API
Fetch API
Geolocation API
HTML DOM API
Push API
Service worker API
See allâ¦
Web API guides
Using the Web animation API
Using the Fetch API
Working with the History API
Using the Web speech API
Using web workers
All
All web technology
Technologies
Accessibility
HTTP
URI
Web extensions
WebAssembly
WebDriver
See allâ¦
Topics
Media
Performance
Privacy
Security
Progressive web apps
Learn
Learn web development
Frontend developer course
Getting started
Common questions
Curriculum
Learn HTML
Introduction to HTML
Getting started with HTML
Learn CSS
What is CSS
Getting started with CSS
Learn JavaScript
How to use data attributes
Add JavaScript to your web page
Tools
Discover our tools
Playground
HTTP Observatory
Border-image generator
Border-radius generator
Box-shadow generator
Color mixer
Color picker
Shape generator
About
Get to know MDN better
About MDN
Advertise with us
Community
MDN on GitHub
Blog
Web
JavaScript
Reference
Expressions and operators
Expressions and operators
This chapter documents all the JavaScript language operators, expressions and keywords.
In this article
Expressions and operators by categorySpecificationsBrowser compatibilitySee also
Expressions and operators by category
For an alphabetical listing see the sidebar on the left.
Primary expressions
Basic keywords and general expressions in JavaScript. These expressions have the highest precedence (higher than operators).
this
The this keyword refers to a special property of an execution context.
Literals
Basic null, boolean, number, and string literals.
[]
Array initializer/literal syntax.
{}
Object initializer/literal syntax.
function
The function keyword defines a function expression.
class
The class keyword defines a class expression.
function*
The function* keyword defines a generator function expression.
async function
The async function defines an async function expression.
async function*
The async function* keywords define an async generator function expression.
/ab+c/i
Regular expression literal syntax.
`string`
Template literal syntax.
( )
Grouping operator.
Left-hand-side expressions
Left values are the destination of an assignment.
Property accessors
Member operators provide access to a property or method of an object (object.property and object["property"]).
?.
The optional chaining operator returns undefined instead of causing an error if a reference is nullish (null or undefined).
new
The new operator creates an instance of a constructor.
new.target
In constructors, new.target refers to the constructor that was invoked by new.
import.meta
An object exposing context-specific metadata to a JavaScript module.
super
The super keyword calls the parent constructor or allows accessing properties of the parent object.
import()
The import() syntax allows loading a module asynchronously and dynamically into a potentially non-module environment.
Increment and decrement
Postfix/prefix increment and postfix/prefix decrement operators.
A++
Postfix increment operator.
A--
Postfix decrement operator.
++A
Prefix increment operator.
--A
Prefix decrement operator.
Unary operators
A unary operation is an operation with only one operand.
delete
The delete operator deletes a property from an object.
void
The void operator evaluates an expression and discards its return value.
typeof
The typeof operator determines the type of a given object.
+
The unary plus operator converts its operand to Number type.
-
The unary negation operator converts its operand to Number type and then negates it.
~
Bitwise NOT operator.
!
Logical NOT operator.
await
Pause and resume an async function and wait for the promise's fulfillment/rejection.
Arithmetic operators
Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value.
**
Exponentiation operator.
*
Multiplication operator.
/
Division operator.
%
Remainder operator.
+ (Plus)
Addition operator.
-
Subtraction operator.
Relational operators
A comparison operator compares its operands and returns a boolean value based on whether the comparison is true.
< (Less than)
Less than operator.
> (Greater than)
Greater than operator.
<=
Less than or equal operator.
>=
Greater than or equal operator.
instanceof
The instanceof operator determines whether an object is an instance of another object.
in
The in operator determines whether an object has a given property.
Note:
=> is not an operator, but the notation for Arrow functions.
Equality operators
The result of evaluating an equality operator is always of type boolean based on whether the comparison is true.
==
Equality operator.
!=
Inequality operator.
===
Strict equality operator.
!==
Strict inequality operator.
Bitwise shift operators
Operations to shift all bits of the operand.
<<
Bitwise left shift operator.
>>
Bitwise right shift operator.
>>>
Bitwise unsigned right shift operator.
Binary bitwise operators
Bitwise operators treat their operands as a set of 32 bits (zeros and ones) and return standard JavaScript numerical values.
&
Bitwise AND.
|
Bitwise OR.
^
Bitwise XOR.
Binary logical operators
Logical operators implement boolean (logical) values and have short-circuiting behavior.
&&
Logical AND.
||
Logical OR.
??
Nullish Coalescing Operator.
Conditional (ternary) operator
(condition ? ifTrue : ifFalse)
The conditional operator returns one of two values based on the logical value of the condition.
Assignment operators
An assignment operator assigns a value to its left operand based on the value of its right operand.
=
Assignment operator.
*=
Multiplication assignment.
/=
Division assignment.
%=
Remainder assignment.
+=
Addition assignment.
-=
Subtraction assignment
<<=
Left shift assignment.
>>=
Right shift assignment.
>>>=
Unsigned right shift assignment.
&=
Bitwise AND assignment.
^=
Bitwise XOR assignment.
|=
Bitwise OR assignment.
**=
Exponentiation assignment.
&&=
Logical AND assignment.
||=
Logical OR assignment.
??=
Nullish coalescing assignment.
[a, b] = arr, { a, b } = obj
Destructuring allows you to assign the properties of an array or object to variables using syntax that looks similar to array or object literals.
Yield operators
yield
Pause and resume a generator function.
yield*
Delegate to another generator function or iterable object.
Spread syntax
...obj
Spread syntax allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected. In an object literal, the spread syntax enumerates the properties of an object and adds the key-value pairs to the object being created.
Comma operator
,
The comma operator allows multiple expressions to be evaluated in a single statement and returns the result of the last expression.
Specifications
Specification
ECMAScriptÂ® 2026 LanguageÂ Specification# prod-LogicalANDExpression
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-subtraction-operator-minus
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-comma-operator
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-grouping-operator
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-unsigned-right-shift-operator
ECMAScriptÂ® 2026 LanguageÂ Specification# prod-OptionalExpression
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-this-keyword
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-assignment-operators
ECMAScriptÂ® 2026 LanguageÂ Specification# prod-PropertyDefinition
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-object-initializer
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-equality-operators
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-function-definitions
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-async-generator-function-definitions
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-async-function-definitions
ECMAScriptÂ® 2026 LanguageÂ Specification# prod-BitwiseANDExpression
ECMAScriptÂ® 2026 LanguageÂ Specification# prod-BitwiseXORExpression
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-postfix-decrement-operator
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-postfix-increment-operator
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-multiplicative-operators
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-class-definitions
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-super-keyword
ECMAScriptÂ® 2026 LanguageÂ Specification# prod-ImportMeta
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-generator-function-definitions
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-import-calls
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-relational-operators
ECMAScriptÂ® 2026 LanguageÂ Specification# prod-BitwiseORExpression
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-destructuring-assignment
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-destructuring-binding-patterns
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-logical-not-operator
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-void-operator
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-built-in-function-objects
ECMAScriptÂ® 2026 LanguageÂ Specification# prod-ArgumentList
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-null-value
ECMAScriptÂ® 2026 LanguageÂ Specification# prod-CoalesceExpression
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-new-operator
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-conditional-operator
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-bitwise-not-operator
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-unary-minus-operator
ECMAScriptÂ® 2026 LanguageÂ Specification# prod-SpreadElement
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-typeof-operator
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-unary-plus-operator
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-addition-operator-plus
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-generator-function-definitions-runtime-semantics-evaluation
ECMAScriptÂ® 2026 LanguageÂ Specification# prod-YieldExpression
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-left-shift-operator
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-exp-operator
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-delete-operator
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-property-accessors
ECMAScriptÂ® 2026 LanguageÂ Specification# prod-LogicalORExpression
ECMAScriptÂ® 2026 LanguageÂ Specification# sec-signed-right-shift-operator
HTML# import-meta-resolve
Browser compatibility
See also
Operator precedence
Help improve MDN
Learn how to contribute
This page was last modified on â¨Jul 8, 2025â© by MDN contributors.
View this page on GitHub â¢ Report a problem with this content
JavaScriptTutorials and guidesBeginner's tutorialsYour first website: Adding interactivityDynamic scripting with JavaScriptJavaScript frameworks and librariesJavaScript GuideIntroductionGrammar and typesControl flow and error handlingLoops and iterationFunctionsExpressions and operatorsNumbers and stringsRepresenting dates & timesRegular expressionsIndexed collectionsKeyed collectionsWorking with objectsUsing classesUsing promisesJavaScript typed arraysIterators and generatorsResource managementInternationalizationJavaScript modulesIntermediateAdvanced JavaScript objectsAsynchronous JavaScriptClient-side web APIsLanguage overviewJavaScript data structuresEquality comparisons and samenessEnumerability and ownership of propertiesClosuresAdvancedInheritance and the prototype chainMeta programmingMemory ManagementReferencesBuilt-in objectsAggregateErrorArrayArrayBufferAsyncDisposableStackAsyncFunctionAsyncGeneratorAsyncGeneratorFunctionAsyncIteratorAtomicsBigIntBigInt64ArrayBigUint64ArrayBooleanDataViewDatedecodeURI()decodeURIComponent()DisposableStackencodeURI()encodeURIComponent()Errorescape()
Deprecated
eval()EvalErrorFinalizationRegistryFloat16ArrayFloat32ArrayFloat64ArrayFunctionGeneratorGeneratorFunctionglobalThisInfinityInt8ArrayInt16ArrayInt32ArrayInternalError
Non-standard
IntlisFinite()isNaN()IteratorJSONMapMathNaNNumberObjectparseFloat()parseInt()PromiseProxyRangeErrorReferenceErrorReflectRegExpSetSharedArrayBufferStringSuppressedErrorSymbolSyntaxErrorTemporal
Experimental
TypedArrayTypeErrorUint8ArrayUint8ClampedArrayUint16ArrayUint32Arrayundefinedunescape()
Deprecated
URIErrorWeakMapWeakRefWeakSetExpressions & operatorsAddition (+)Addition assignment (+=)Assignment (=)async function expressionasync function* expressionawaitBitwise AND (&)Bitwise AND assignment (&=)Bitwise NOT (~)Bitwise OR (|)Bitwise OR assignment (|=)Bitwise XOR (^)Bitwise XOR assignment (^=)class expressionComma operator (,)Conditional (ternary) operatorDecrement (--)deleteDestructuringDivision (/)Division assignment (/=)Equality (==)Exponentiation (**)Exponentiation assignment (**=)function expressionfunction* expressionGreater than (>)Greater than or equal (>=)Grouping operator ( )import.metaimport.meta.resolve()import()inIncrement (++)Inequality (!=)instanceofLeft shift (<<)Left shift assignment (<<=)Less than (<)Less than or equal (<=)Logical AND (&&)Logical AND assignment (&&=)Logical NOT (!)Logical OR (||)Logical OR assignment (||=)Multiplication (*)Multiplication assignment (*=)newnew.targetnullNullish coalescing assignment (??=)Nullish coalescing operator (??)Object initializerOperator precedenceOptional chaining (?.)Property accessorsRemainder (%)Remainder assignment (%=)Right shift (>>)Right shift assignment (>>=)Spread syntax (...)Strict equality (===)Strict inequality (!==)Subtraction (-)Subtraction assignment (-=)superthistypeofUnary negation (-)Unary plus (+)Unsigned right shift (>>>)Unsigned right shift assignment (>>>=)void operatoryieldyield*Statements & declarationsasync functionasync function*await usingBlock statementbreakclassconstcontinuedebuggerdo...whileEmpty statementexportExpression statementforfor await...offor...infor...offunctionfunction*if...elseimportImport attributesLabeled statementletreturnswitchthrowtry...catchusingvarwhilewith
Deprecated
FunctionsArrow function expressionsDefault parametersgetMethod definitionsRest parameterssetThe arguments object[Symbol.iterator]()callee
Deprecated
lengthClassesconstructorextendsPrivate elementsPublic class fieldsstaticStatic initialization blocksRegular expressionsBackreference: \1, \2Capturing group: (...)Character class escape: \d, \D, \w, \W, \s, \SCharacter class: [...], [^...]Character escape: \n, \u{...}Disjunction: |Input boundary assertion: ^, $Literal character: a, bLookahead assertion: (?=...), (?!...)Lookbehind assertion: (?<=...), (?<!...)Modifier: (?ims-ims:...)Named backreference: \k<name>Named capturing group: (?<name>...)Non-capturing group: (?:...)Quantifier: *, +, ?, {n}, {n,}, {n,m}Unicode character class escape: \p{...}, \P{...}Wildcard: .Word boundary assertion: \b, \BErrorsAggregateError: No Promise in Promise.any was resolvedError: Permission denied to access property "x"InternalError: too much recursionRangeError: argument is not a valid code pointRangeError: BigInt division by zeroRangeError: BigInt negative exponentRangeError: form must be one of 'NFC', 'NFD', 'NFKC', or 'NFKD'RangeError: invalid array lengthRangeError: invalid dateRangeError: precision is out of rangeRangeError: radix must be an integerRangeError: repeat count must be less than infinityRangeError: repeat count must be non-negativeRangeError: x can't be converted to BigInt because it isn't an integerReferenceError: "x" is not definedReferenceError: assignment to undeclared variable "x"ReferenceError: can't access lexical declaration 'X' before initializationReferenceError: must call super constructor before using 'this' in derived class constructorReferenceError: super() called twice in derived class constructorSyntaxError: 'arguments'/'eval' can't be defined or assigned to in strict mode codeSyntaxError: "0"-prefixed octal literals are deprecatedSyntaxError: "use strict" not allowed in function with non-simple parametersSyntaxError: "x" is a reserved identifierSyntaxError: \ at end of patternSyntaxError: a declaration in the head of a for-of loop can't have an initializerSyntaxError: applying the 'delete' operator to an unqualified name is deprecatedSyntaxError: arguments is not valid in fieldsSyntaxError: await is only valid in async functions, async generators and modulesSyntaxError: await/yield expression can't be used in parameterSyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressionsSyntaxError: character class escape cannot be used in class range in regular expressionSyntaxError: continue must be inside loopSyntaxError: duplicate capture group name in regular expressionSyntaxError: duplicate formal argument xSyntaxError: for-in loop head declarations may not have initializersSyntaxError: function statement requires a nameSyntaxError: functions cannot be labelledSyntaxError: getter and setter for private name #x should either be both static or non-staticSyntaxError: getter functions must have no argumentsSyntaxError: identifier starts immediately after numeric literalSyntaxError: illegal characterSyntaxError: import declarations may only appear at top level of a moduleSyntaxError: incomplete quantifier in regular expressionSyntaxError: invalid assignment left-hand sideSyntaxError: invalid BigInt syntaxSyntaxError: invalid capture group name in regular expressionSyntaxError: invalid character in class in regular expressionSyntaxError: invalid class set operation in regular expressionSyntaxError: invalid decimal escape in regular expressionSyntaxError: invalid identity escape in regular expressionSyntaxError: invalid named capture reference in regular expressionSyntaxError: invalid property name in regular expressionSyntaxError: invalid range in character classSyntaxError: invalid regexp groupSyntaxError: invalid regular expression flag "x"SyntaxError: invalid unicode escape in regular expressionSyntaxError: JSON.parse: bad parsingSyntaxError: label not foundSyntaxError: missing : after property idSyntaxError: missing ) after argument listSyntaxError: missing ) after conditionSyntaxError: missing ] after element listSyntaxError: missing } after function bodySyntaxError: missing } after property listSyntaxError: missing = in const declarationSyntaxError: missing formal parameterSyntaxError: missing name after . operatorSyntaxError: missing variable nameSyntaxError: negated character class with strings in regular expressionSyntaxError: new keyword cannot be used with an optional chainSyntaxError: nothing to repeatSyntaxError: numbers out of order in {} quantifier.SyntaxError: octal escape sequences can't be used in untagged template literals or in strict mode codeSyntaxError: parameter after rest parameterSyntaxError: private fields can't be deletedSyntaxError: property name __proto__ appears more than once in object literalSyntaxError: raw bracket is not allowed in regular expression with unicode flagSyntaxError: redeclaration of formal parameter "x"SyntaxError: reference to undeclared private field or method #xSyntaxError: rest parameter may not have a defaultSyntaxError: return not in functionSyntaxError: setter functions must have one argumentSyntaxError: string literal contains an unescaped line breakSyntaxError: super() is only valid in derived class constructorsSyntaxError: tagged template cannot be used with optional chainSyntaxError: Unexpected '#' used outside of class bodySyntaxError: Unexpected tokenSyntaxError: unlabeled break must be inside loop or switchSyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'SyntaxError: use of super property/member accesses only valid within methods or eval code within methodsSyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# insteadTypeError: 'caller', 'callee', and 'arguments' properties may not be accessedTypeError: 'x' is not iterableTypeError: "x" is (not) "y"TypeError: "x" is not a constructorTypeError: "x" is not a functionTypeError: "x" is not a non-null objectTypeError: "x" is read-onlyTypeError: already executing generatorTypeError: BigInt value can't be serialized in JSONTypeError: calling a builtin X constructor without new is forbiddenTypeError: can't access/set private field or method: object is not the right classTypeError: can't assign to property "x" on "y": not an objectTypeError: can't convert BigInt to numberTypeError: can't convert x to BigIntTypeError: can't define property "x": "obj" is not extensibleTypeError: can't delete non-configurable array elementTypeError: can't redefine non-configurable property "x"TypeError: can't set prototype of this objectTypeError: can't set prototype: it would cause a prototype chain cycleTypeError: cannot use 'in' operator to search for 'x' in 'y'TypeError: class constructors must be invoked with 'new'TypeError: cyclic object valueTypeError: derived class constructor returned invalid value xTypeError: getting private setter-only propertyTypeError: Initializing an object twice is an error with private fields/methodsTypeError: invalid 'instanceof' operand 'x'TypeError: invalid Array.prototype.sort argumentTypeError: invalid assignment to const "x"TypeError: Iterator/AsyncIterator constructor can't be used directlyTypeError: matchAll/replaceAll must be called with a global RegExpTypeError: More arguments neededTypeError: null/undefined has no propertiesTypeError: property "x" is non-configurable and can't be deletedTypeError: Reduce of empty array with no initial valueTypeError: setting getter-only property "x"TypeError: WeakSet key/WeakMap value 'x' must be an object or an unregistered symbolTypeError: X.prototype.y called on incompatible typeURIError: malformed URI sequenceWarning: -file- is being assigned a //# sourceMappingURL, but already has oneWarning: unreachable code after return statementMiscJavaScript technologies overviewExecution modelLexical grammarIteration protocolsStrict modeTemplate literalsTrailing commasDeprecated features
Your blueprint for a better internet.
MDN
About
Blog
Mozilla careers
Advertise with us
MDN Plus
Product help
Contribute
MDN Community
Community resources
Writing guidelines
MDN Discord
MDN on GitHub
Developers
Web technologies
Learn web development
Guides
Tutorials
Glossary
Hacks blog
Website Privacy Notice
Cookies
Legal
Community Participation Guidelines
Visit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.
Portions of this content are Â©1998ââ¨2025â© by individual mozilla.org contributors. Content available under a Creative Commons license.