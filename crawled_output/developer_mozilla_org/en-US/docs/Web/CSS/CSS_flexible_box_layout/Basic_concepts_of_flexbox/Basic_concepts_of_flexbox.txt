Basic concepts of flexbox - CSS | MDN
Skip to main content
Skip to search
MDN
HTML
HTML: Markup language
HTML reference
Elements
Global attributes
Attributes
See allâ¦
HTML guides
Responsive images
HTML cheatsheet
Date & time formats
See allâ¦
Markup languages
SVG
MathML
XML
CSS
CSS: Styling language
CSS reference
Properties
Selectors
At-rules
Values & units
See allâ¦
CSS guides
Box model
Animations
Flexbox
Colors
See allâ¦
Layout cookbook
Column layouts
Centering an element
Card component
See allâ¦
JavaScript
JS
JavaScript: Scripting language
JS reference
Standard built-in objects
Expressions & operators
Statements & declarations
Functions
See allâ¦
JS guides
Control flow & error handing
Loops and iteration
Working with objects
Using classes
See allâ¦
Web APIs
Web APIs: Programming interfaces
Web API reference
File system API
Fetch API
Geolocation API
HTML DOM API
Push API
Service worker API
See allâ¦
Web API guides
Using the Web animation API
Using the Fetch API
Working with the History API
Using the Web speech API
Using web workers
All
All web technology
Technologies
Accessibility
HTTP
URI
Web extensions
WebAssembly
WebDriver
See allâ¦
Topics
Media
Performance
Privacy
Security
Progressive web apps
Learn
Learn web development
Frontend developer course
Getting started
Common questions
Curriculum
Learn HTML
Introduction to HTML
Getting started with HTML
Learn CSS
What is CSS
Getting started with CSS
Learn JavaScript
How to use data attributes
Add JavaScript to your web page
Tools
Discover our tools
Playground
HTTP Observatory
Border-image generator
Border-radius generator
Box-shadow generator
Color mixer
Color picker
Shape generator
About
Get to know MDN better
About MDN
Advertise with us
Community
MDN on GitHub
Blog
Web
CSS
CSS flexible box layout
Basic concepts
Basic concepts of flexbox
The flexible box layout module (usually referred to as flexbox) is a one-dimensional layout model for distributing space between items and includes numerous alignment capabilities. This article gives an outline of the main features of flexbox, which we will explore in more detail in the rest of these guides.
When we describe flexbox as being one-dimensional we are describing the fact that flexbox deals with layout in one dimension at a time â either as a row or as a column. This can be contrasted with the two-dimensional model of CSS Grid Layout, which controls columns and rows together.
In this article
The two axes of flexboxStart and end linesThe flex containerMulti-line flex containers with flex-wrapThe flex-flow shorthandProperties applied to flex itemsAlignment, justification and distribution of free space between itemsNext steps
The two axes of flexbox
When working with flexbox you need to think in terms of two axes â the main axis and the cross axis. The main axis is defined by the flex-direction property, and the cross axis runs perpendicular to it. Everything we do with flexbox refers back to these axes, so it is worth understanding how they work from the outset.
The main axis
The main axis is defined by flex-direction, which has four possible values:
row
row-reverse
column
column-reverse
Should you choose row or row-reverse, your main axis will run along the row in the inline direction.
Choose column or column-reverse and your main axis will run in the block direction, from the top of the page to the bottom.
The cross axis
The cross axis runs perpendicular to the main axis. Therefore, if your flex-direction (main axis) is set to row or row-reverse the cross axis runs down the columns.
If your main axis is column or column-reverse then the cross axis runs along the rows.
Start and end lines
Another vital area of understanding is how flexbox makes no assumption about the writing mode of the document. Flexbox doesn't just assume that all lines of text start at the top left of a document and run towards the right-hand side, with new lines appearing one under the other. Rather, it supports all writing modes, like other logical properties and values.
You can read more about the relationship between flexbox and writing modes in a later article; however, the following description should help explain why we do not talk about left and right and top and bottom when we describe the direction that our flex items flow in.
If the flex-direction is row and I am working in English, then the start edge of the main axis will be on the left, the end edge on the right.
If I were to work in Arabic, then the start edge of my main axis would be on the right and the end edge on the left.
In both cases the start edge of the cross-axis is at the top of the flex container and the end edge at the bottom, as both languages have a horizontal writing mode.
After a while, thinking about start and end rather than left and right becomes natural, and will be useful to you when dealing with other layout methods such as CSS Grid Layout which follow the same patterns.
The flex container
An area of a document that is laid out using flexbox is called a flex container. To create a flex container, set the area's display property to flex. When we do this, the direct children of that container become flex items. You can explicitly control whether the container itself is displayed inline or in block formatting context using inline flex or inline-flex for inline flex containers or block flex or flex for block level flex containers.
Initial values
As with all properties in CSS, some initial values are defined, so the contents of a new flex container will behave in the following way:
Items display in a row (the flex-direction property's default value is row).
The items start from the start edge of the main axis.
The items do not stretch on the main dimension but can shrink (a flex-item's flex-grow property's default value is 0 and its flex-shrink property's default value is 1).
The items will stretch to fill the size of the cross-axis (the align-items property's default value is stretch).
The flex-item's flex-basis property's default value is auto. This means that, in each case, it will be equal to the flex item width in horizontal writing mode, and the flex item height in vertical writing mode. If the corresponding width/height is also set to auto, the flex-basis content value is used instead.
All the items will be in a single row (the flex-wrap property's default value is nowrap), overflowing their container if their combined width/height exceeds the containing element width/height.
The result of this is that your items will all line up in a row, using the size of the content as their size in the main axis. If there are more items than can fit in the container, they will not wrap but will instead overflow. If some items are taller than others, all items will stretch along the full length of the cross-axis.
You can see in the live sample below how this looks. Click "Play" to open the example in the MDN Playground and edit the items or add new items to try out the initial behavior of flexbox:
html<div class="box">
<div>One</div>
<div>Two</div>
<div>Three <br />has <br />extra <br />text</div>
</div>
css.box > * {
border: 2px solid rgb(96 139 168);
border-radius: 5px;
background-color: rgb(96 139 168 / 0.2);
}
.box {
border: 2px dotted rgb(96 139 168);
display: flex;
}
Changing flex-direction
Adding the flex-direction property to the flex container allows us to change the direction in which our flex items display. Setting flex-direction: row-reverse will keep the items displaying along the row, however the start and end lines are switched.
If we change flex-direction to column the main axis switches and our items now display in a column. Set column-reverse and the start and end lines are again switched.
The live sample below has flex-direction set to row-reverse. Try the other values â row, column and column-reverse â to see what happens to the content.
html<div class="box">
<div>One</div>
<div>Two</div>
<div>Three</div>
</div>
css.box > * {
border: 2px solid rgb(96 139 168);
border-radius: 5px;
background-color: rgb(96 139 168 / 0.2);
}
.box {
border: 2px dotted rgb(96 139 168);
display: flex;
flex-direction: row-reverse;
}
Multi-line flex containers with flex-wrap
While flexbox is a one dimensional model, it is possible to make flex items wrap across multiple lines. If you do this, you should consider each line as a new flex container. Any space distribution will happen across each line, without reference to the previous or subsequent lines.
To cause wrapping behavior add the property flex-wrap with a value of wrap. Now, if your items are too large to all display in one line, they will wrap onto another line. The live sample below contains items that have been given a width. The total width of the items is too wide for the flex container. As flex-wrap is set to wrap, the items wrap across multiple lines. If you set it to nowrap, which is the initial value, they will shrink to fit the container. They shrink because they are using initial flexbox values, including flex-shrink: 1, that allows items to shrink. Using nowrap would cause an overflow if the items were not able to shrink, or could not shrink small enough to fit.
html<div class="box">
<div>One</div>
<div>Two</div>
<div>Three</div>
</div>
css.box > * {
border: 2px solid rgb(96 139 168);
border-radius: 5px;
background-color: rgb(96 139 168 / 0.2);
width: 200px;
}
.box {
width: 500px;
border: 2px dotted rgb(96 139 168);
display: flex;
flex-wrap: wrap;
}
Find out more about wrapping flex items in the guide Mastering wrapping of flex items.
The flex-flow shorthand
You can combine the two properties flex-direction and flex-wrap into the flex-flow shorthand.
In the live sample below, try changing the first value to one of the allowable values for flex-direction - row, row-reverse, column or column-reverse, and also change the second to wrap and nowrap.
html<div class="box">
<div>One</div>
<div>Two</div>
<div>Three</div>
</div>
css.box > * {
border: 2px solid rgb(96 139 168);
border-radius: 5px;
background-color: rgb(96 139 168 / 0.2);
width: 200px;
}
.box {
width: 500px;
border: 2px dotted rgb(96 139 168);
display: flex;
flex-flow: row wrap;
}
Properties applied to flex items
To control the inline-size of each flex item, we target them directly via three properties:
flex-grow
flex-shrink
flex-basis
We will take a brief look at these properties below, but if you want more comprehensive information, take a look at the Controlling ratios of flex items on the main axis guide.
Before we can make sense of these properties we need to consider the concept of available space. What we are doing when we change the value of these flex properties is to change the way that available space is distributed amongst our items. This concept of available space is also important when we come to look at aligning items.
If we have three 100 pixel-wide items in a container which is 500 pixels wide, then the space we need to lay out our items is 300 pixels. This leaves 200 pixels of available space. If we don't change the initial values then flexbox will put that space after the last item.
If we instead would like the items to grow and fill the space, then we need to have a method of distributing the leftover space between the items. The flex properties that we apply to the items themselves, enable dictating how that available space should be distributed among the sibling flex items.
The flex-basis property
The flex-basis is what defines the size of that item in terms of the space it leaves as available space. The initial value of this property is auto â in this case the browser looks to see if the item has a size. In the example above, all of the items have a width of 100 pixels. This is used as the flex-basis.
If the items don't have a size then the content's size is used as the flex-basis. This is why when we just declare display: flex on the parent to create flex items, the items all move into a row and take only as much space as they need to display their contents.
The flex-grow property
With the flex-grow property set to a positive integer, if there is available space, the flex item can grow along the main axis from its flex-basis. Whether the item stretches to take up all the available space on that axis, or just a portion of the available space depends on if the other items are allowed to grow too and the value of their flex-grow properties.
Each item with a positive value consumes a portion of any available space based on their flex-grow value. If we gave all of our items in the example above a flex-grow value of 1 then the available space in the flex container would be equally shared between our items and they would stretch to fill the container on the main axis. If we give our first item a flex-grow value of 2, and the other items a value of 1 each, there are a total of 4 parts; 2 parts of the available space will be given to the first item (100px out of 200px in the case of the example above) and 1 part each the other two (50px each out of the 200px total).
The flex-shrink property
Where the flex-grow property deals with adding space in the main axis, the flex-shrink property controls how it is taken away. If we do not have enough space in the container to lay out our items, and flex-shrink is set to a positive integer, then the item can become smaller than the flex-basis. As with flex-grow, different values can be assigned in order to cause one item to shrink faster than others â an item with a higher value set for flex-shrink will shrink faster than its siblings that have lower values.
An item can shrink down to its min-content size. This minimum size is taken into account while working out the actual amount of shrinkage that will happen, which means that flex-shrink has the potential to appear less consistent than flex-grow in behavior. We'll therefore take a more detailed look at how this algorithm works in the article Controlling ratios of items along the main axis.
Note:
These values for flex-grow and flex-shrink are proportions. Typically if we had all of our items set to flex: 1 1 200px and then wanted one item to grow at twice the rate, we would set that item to flex: 2 1 200px. However you could also use flex: 10 1 200px and flex: 20 1 200px if you wanted.
Shorthand values for the flex properties
You will very rarely see the flex-grow, flex-shrink, and flex-basis properties used individually; instead they are combined into the flex shorthand. The flex shorthand allows you to set the three values in this order â flex-grow, flex-shrink, flex-basis.
The live sample below allows you to test out the different values of the flex shorthand; remember that the first value is flex-grow. Giving this a positive value means the item can grow. The second is flex-shrink â with a positive value the items can shrink, but only if their total values overflow the main axis. The final value is flex-basis; this is the value the items are using as their base value to grow and shrink from.
html<div class="box">
<div class="one">One</div>
<div class="two">Two</div>
<div class="three">Three</div>
</div>
css.box > * {
border: 2px solid rgb(96 139 168);
border-radius: 5px;
background-color: rgb(96 139 168 / 0.2);
}
.box {
border: 2px dotted rgb(96 139 168);
display: flex;
}
.one {
flex: 1 1 auto;
}
.two {
flex: 1 1 auto;
}
.three {
flex: 1 1 auto;
}
There are also some predefined shorthand values which cover most of the use cases. You will often see these used in tutorials, and in many cases these are all you will need to use. The predefined values are as follows:
flex: initial
flex: auto
flex: none
flex: <positive-number>
The initial value is a CSS-wide keyword that represents the initial value for a property. Setting flex: initial resets the item to the initial values of the three longhand properties, which is the same as flex: 0 1 auto. The initial value of flex-grow is 0, so items will not grow larger than their flex-basis size. The initial value of flex-shrink is 1, so items can shrink if they need to rather than overflowing. The initial value of flex-basis is auto. Items will either use any size set on the item in the main dimension, or they will get their size from the content size.
Using flex: auto is the same as using flex: 1 1 auto; this is similar to flex: initial, except that the items can grow and fill the container as well as shrink if needed.
Using flex: none will create fully inflexible flex items. It is as if you wrote flex: 0 0 auto. The items cannot grow or shrink and will be laid out using flexbox with a flex-basis of auto.
The shorthand you often see in tutorials is flex: 1 or flex: 2 and so on. This is the same as writing flex: 1 1 0 or flex: 2 1 0 and so on, respectively. The items get minimum size due to flex-basis: 0 and then proportionally grow to fill the available space. In this case, the flex-shrink value of 1 is redundant because the items start with minimum size â they're not given any size that could cause them to overflow the flex container.
Try these shorthand values in the live sample below.
html<div class="box">
<div class="one">One</div>
<div class="two">Two</div>
<div class="three">Three</div>
</div>
css.box > * {
border: 2px solid rgb(96 139 168);
border-radius: 5px;
background-color: rgb(96 139 168 / 0.2);
}
.box {
border: 2px dotted rgb(96 139 168);
display: flex;
}
.one {
flex: 1;
}
.two {
flex: 1;
}
.three {
flex: 1;
}
Alignment, justification and distribution of free space between items
A key feature of flexbox is the ability to align and justify items on the main- and cross-axes, and to distribute space between flex items. Note that these properties are set on the flex container, not on the items themselves.
align-items
The align-items property aligns all the flex items on the cross axis.
The initial value for this property is stretch and is why flex items stretch to the height of the flex container by default (or the width if flex-direction is set to column or column-reverse). This height may come from the tallest item in the container or the size set on the flex container itself.
You could instead set align-items to flex-start, or simply start, in order to make the items line up at the start of the flex container, flex-end, or just end, to align them to the end, or center to align them in the center. Try this in the live sample â I have given the flex container a height in order that you can see how the items can be moved around inside the container. See what happens if you set the value of align-items to:
stretch
flex-start
flex-end
start
end
center
baseline
last baseline
html<div class="box">
<div>One</div>
<div>Two</div>
<div>Three <br />has <br />extra <br />text</div>
</div>
css.box > * {
border: 2px solid rgb(96 139 168);
border-radius: 5px;
background-color: rgb(96 139 168 / 0.2);
}
.box {
width: 500px;
height: 130px;
border: 2px dotted rgb(96 139 168);
display: flex;
align-items: flex-start;
}
The align-items is set on the flex container and impacts all the flex items. If you want to align a flex item differently from others, you can set the align-self on the flex item.
justify-content
The justify-content property is used to align the items on the main axis, the direction in which flex-direction has set the flow. The initial value is flex-start which will line the items up at the start edge of the container, but you could also set the value to flex-end to line them up at the end, or center to line them up in the center.
You can also use the value space-between to take all the spare space after the items have been laid out, and share it out evenly between the items so there will be an equal amount of space between each item. To cause an equal amount of space on the right and left (or top and bottom for columns) of each item use the value space-around. With space-around, items have a half-size space on either end. Or, to cause items to have equal space around them use the value space-evenly. With space-evenly, items have a full-size space on either end.
Try the following values of justify-content in the live sample:
start
end
left
right
normal
flex-start
flex-end
center
space-around
space-between
space-evenly
stretch
html<div class="box">
<div>One</div>
<div>Two</div>
<div>Three</div>
</div>
css.box > * {
border: 2px solid rgb(96 139 168);
border-radius: 5px;
background-color: rgb(96 139 168 / 0.2);
}
.box {
border: 2px dotted rgb(96 139 168);
display: flex;
justify-content: flex-start;
}
The article Aligning items in a flex container explores these properties in more depth, in order to have a better understanding of how they work. These basic examples, however, are useful in the majority of use cases.
justify-items
The justify-items property is ignored in flexbox layouts.
place-items and place-content
The place-items property is a shorthand property for align-items and justify-items. If set on a flex container, it will set the alignment but not the justification, as justify-items is ignored in flexbox.
There is another shorthand property, place-content, that defines the align-content and justify-content properties. The align-content property only effects flex containers that wrap, and is discussed in Aligning items in a flex container.
Next steps
After reading this article you should have an understanding of the basic features of flexbox. In the next article, we will look at how this specification relates to other parts of CSS.
Help improve MDN
Learn how to contribute
This page was last modified on â¨Jul 14, 2025â© by MDN contributors.
View this page on GitHub â¢ Report a problem with this content
CSSBeginner's tutorialsYour first website: Styling the contentCSS styling basicsWhat is CSS?CSS getting startedChallenge: Biography pageBasic selectorsAttribute selectorsPseudo-classes and elementsCombinatorsBox modelHandling conflictsValues and unitsSizingBackgrounds and bordersOverflowImages, media, formsStyling tablesDebugging CSSCSS text stylingText and font fundamentalsStyling listsStyling linksWeb fontsChallenge: Community school homepageCSS layoutIntroductionFloatsPositioningFlexboxCSS grid layoutResponsive web designMedia queriesChallenge: Fundamental layoutCSS referenceModulesCSS anchor positioningCSS animationsCSS backgrounds and bordersCSS basic user interfaceCSS borders and box decorationsCSS box alignmentCSS box modelCSS box sizingCSS cascading and inheritanceCSS color adjustmentCSS colorsCSS compositing and blendingCSS conditional rulesCSS containmentCSS counter stylesCSS custom highlight APICSS custom properties for cascading variablesCSS displayCSS easing functionsCSS environment variablesCSS filter effectsCSS flexible box layoutCSS font loadingCSS fontsCSS fragmentationCSS generated contentCSS grid layoutCSS imagesCSS inline layoutCSS lists and countersCSS logical properties and valuesCSS maskingCSS media queriesCSS motion pathCSS multi-column layoutCSS namespacesCSS nestingCSS overflowCSS overscroll behaviorCSS paged mediaCSS positioned layoutCSS properties and values APICSS pseudo-elementsCSS round displayCSS ruby layoutCSS scopingCSS scroll anchoringCSS scroll snapCSS scroll-driven animationsCSS scrollbars stylingCSS selectorsCSS shadow partsCSS shapesCSS syntaxCSS tableCSS textCSS text decorationCSS transformsCSS transitionsCSS values and unitsCSS view transitionsCSS viewportCSS writing modesCSSOM viewProperties-moz-*-moz-float-edge
Non-standard
Deprecated
-moz-force-broken-image-icon
Non-standard
Deprecated
-moz-orient
Non-standard
-moz-user-focus
Non-standard
Deprecated
-moz-user-input
Non-standard
Deprecated
-webkit-*-webkit-border-before
Non-standard
-webkit-box-reflect
Non-standard
-webkit-mask-box-image
Non-standard
-webkit-mask-composite
Non-standard
-webkit-mask-position-x
Non-standard
-webkit-mask-position-y
Non-standard
-webkit-mask-repeat-x
Non-standard
-webkit-mask-repeat-y
Non-standard
-webkit-tap-highlight-color
Non-standard
-webkit-text-fill-color-webkit-text-security
Non-standard
-webkit-text-stroke-webkit-text-stroke-color-webkit-text-stroke-width-webkit-touch-callout
Non-standard
Custom properties (--*): CSS variablesaccent-coloralign-*align-contentalign-itemsalign-selfalignment-baselineallanchor-nameanimation-*animationanimation-compositionanimation-delayanimation-directionanimation-durationanimation-fill-modeanimation-iteration-countanimation-nameanimation-play-stateanimation-rangeanimation-range-endanimation-range-startanimation-timelineanimation-timing-functionappearanceaspect-ratiobackdrop-filterbackface-visibilitybackground-*backgroundbackground-attachmentbackground-blend-modebackground-clipbackground-colorbackground-imagebackground-originbackground-positionbackground-position-xbackground-position-ybackground-repeatbackground-sizeblock-sizeborder-*borderborder-blockborder-block-colorborder-block-endborder-block-end-colorborder-block-end-styleborder-block-end-widthborder-block-startborder-block-start-colorborder-block-start-styleborder-block-start-widthborder-block-styleborder-block-widthborder-bottomborder-bottom-colorborder-bottom-left-radiusborder-bottom-right-radiusborder-bottom-styleborder-bottom-widthborder-collapseborder-colorborder-end-end-radiusborder-end-start-radiusborder-imageborder-image-outsetborder-image-repeatborder-image-sliceborder-image-sourceborder-image-widthborder-inlineborder-inline-colorborder-inline-endborder-inline-end-colorborder-inline-end-styleborder-inline-end-widthborder-inline-startborder-inline-start-colorborder-inline-start-styleborder-inline-start-widthborder-inline-styleborder-inline-widthborder-leftborder-left-colorborder-left-styleborder-left-widthborder-radiusborder-rightborder-right-colorborder-right-styleborder-right-widthborder-spacingborder-start-end-radiusborder-start-start-radiusborder-styleborder-topborder-top-colorborder-top-left-radiusborder-top-right-radiusborder-top-styleborder-top-widthborder-widthbottombox-*box-align
Non-standard
Deprecated
box-decoration-breakbox-direction
Non-standard
Deprecated
box-flex
Non-standard
Deprecated
box-flex-group
Non-standard
Deprecated
box-lines
Non-standard
Deprecated
box-ordinal-group
Non-standard
Deprecated
box-orient
Non-standard
Deprecated
box-pack
Non-standard
Deprecated
box-shadowbox-sizingbreak-*break-afterbreak-beforebreak-insidecaption-sidecaret-*caret
Experimental
caret-animation
Experimental
caret-colorcaret-shape
Experimental
clearclip-*clip
Deprecated
clip-pathclip-rulecolor-*colorcolor-interpolationcolor-interpolation-filterscolor-schemecolumn-*column-countcolumn-fillcolumn-gapcolumn-rulecolumn-rule-colorcolumn-rule-stylecolumn-rule-widthcolumn-spancolumn-widthcolumnscontain-*containcontain-intrinsic-block-sizecontain-intrinsic-heightcontain-intrinsic-inline-sizecontain-intrinsic-sizecontain-intrinsic-widthcontainer-*containercontainer-namecontainer-typecontentcontent-visibilitycorner-*corner-block-end-shape
Experimental
corner-block-start-shape
Experimental
corner-bottom-left-shape
Experimental
corner-bottom-right-shape
Experimental
corner-bottom-shape
Experimental
corner-end-end-shape
Experimental
corner-end-start-shape
Experimental
corner-inline-end-shape
Experimental
corner-inline-start-shape
Experimental
corner-left-shape
Experimental
corner-right-shape
Experimental
corner-shape
Experimental
corner-start-end-shape
Experimental
corner-start-start-shape
Experimental
corner-top-left-shape
Experimental
corner-top-right-shape
Experimental
corner-top-shape
Experimental
counter-*counter-incrementcounter-resetcounter-setcursorcxcyddirectiondisplaydominant-baselineempty-cellsfield-sizing
Experimental
fill-*fillfill-opacityfill-rulefilterflex-*flexflex-basisflex-directionflex-flowflex-growflex-shrinkflex-wrapfloatflood-colorflood-opacityfont-*fontfont-familyfont-feature-settingsfont-kerningfont-language-overridefont-optical-sizingfont-palettefont-sizefont-size-adjustfont-smooth
Non-standard
font-stretch
Deprecated
font-stylefont-synthesisfont-synthesis-position
Experimental
font-synthesis-small-capsfont-synthesis-stylefont-synthesis-weightfont-variantfont-variant-alternatesfont-variant-capsfont-variant-east-asianfont-variant-emojifont-variant-ligaturesfont-variant-numericfont-variant-positionfont-variation-settingsfont-weightforced-color-adjustgapgrid-*gridgrid-areagrid-auto-columnsgrid-auto-flowgrid-auto-rowsgrid-columngrid-column-endgrid-column-startgrid-rowgrid-row-endgrid-row-startgrid-templategrid-template-areasgrid-template-columnsgrid-template-rowshanging-punctuationheighthyphenate-characterhyphenate-limit-charshyphensimage-*image-orientationimage-renderingimage-resolution
Experimental
initial-letterinline-sizeinset-*insetinset-blockinset-block-endinset-block-startinset-inlineinset-inline-endinset-inline-startinterpolate-size
Experimental
isolationjustify-*justify-contentjustify-itemsjustify-selfleftletter-spacinglighting-colorline-*line-breakline-clampline-heightline-height-step
Experimental
list-*list-stylelist-style-imagelist-style-positionlist-style-typemargin-*marginmargin-blockmargin-block-endmargin-block-startmargin-bottommargin-inlinemargin-inline-endmargin-inline-startmargin-leftmargin-rightmargin-topmargin-trim
Experimental
marker-*markermarker-endmarker-midmarker-startmask-*maskmask-bordermask-border-modemask-border-outsetmask-border-repeatmask-border-slicemask-border-sourcemask-border-widthmask-clipmask-compositemask-imagemask-modemask-originmask-positionmask-repeatmask-sizemask-typemath-*math-depthmath-shift
Experimental
math-stylemax-*max-block-sizemax-heightmax-inline-sizemax-widthmin-*min-block-sizemin-heightmin-inline-sizemin-widthmix-blend-modeobject-fitobject-positionoffset-*offsetoffset-anchoroffset-distanceoffset-pathoffset-positionoffset-rotateopacityorderorphansoutline-*outlineoutline-coloroutline-offsetoutline-styleoutline-widthoverflow-*overflowoverflow-anchoroverflow-blockoverflow-clip-marginoverflow-inlineoverflow-wrapoverflow-xoverflow-yoverlay
Experimental
overscroll-*overscroll-behavioroverscroll-behavior-blockoverscroll-behavior-inlineoverscroll-behavior-xoverscroll-behavior-ypadding-*paddingpadding-blockpadding-block-endpadding-block-startpadding-bottompadding-inlinepadding-inline-endpadding-inline-startpadding-leftpadding-rightpadding-toppage-*pagepage-break-after
Deprecated
page-break-before
Deprecated
page-break-inside
Deprecated
paint-orderperspectiveperspective-originplace-*place-contentplace-itemsplace-selfpointer-eventsposition-*positionposition-anchorposition-areaposition-tryposition-try-fallbacksposition-try-orderposition-visibility
Experimental
print-color-adjustquotesrreading-flow
Experimental
reading-order
Experimental
resizerightrotaterow-gapruby-*ruby-alignruby-overhangruby-positionrxryscalescroll-*scroll-behaviorscroll-marginscroll-margin-blockscroll-margin-block-endscroll-margin-block-startscroll-margin-bottomscroll-margin-inlinescroll-margin-inline-endscroll-margin-inline-startscroll-margin-leftscroll-margin-rightscroll-margin-topscroll-marker-group
Experimental
scroll-paddingscroll-padding-blockscroll-padding-block-endscroll-padding-block-startscroll-padding-bottomscroll-padding-inlinescroll-padding-inline-endscroll-padding-inline-startscroll-padding-leftscroll-padding-rightscroll-padding-topscroll-snap-alignscroll-snap-stopscroll-snap-typescroll-target-groupscroll-timelinescroll-timeline-axisscroll-timeline-namescrollbar-*scrollbar-colorscrollbar-gutterscrollbar-widthshape-*shape-image-thresholdshape-marginshape-outsideshape-renderingspeak-as
Experimental
stop-colorstop-opacitystroke-*strokestroke-dasharraystroke-dashoffsetstroke-linecapstroke-linejoinstroke-miterlimitstroke-opacitystroke-widthtab-sizetable-layouttext-*text-aligntext-align-lasttext-anchortext-autospacetext-boxtext-box-edgetext-box-trimtext-combine-uprighttext-decorationtext-decoration-colortext-decoration-linetext-decoration-skip
Experimental
text-decoration-skip-inktext-decoration-styletext-decoration-thicknesstext-emphasistext-emphasis-colortext-emphasis-positiontext-emphasis-styletext-indenttext-justifytext-orientationtext-overflowtext-renderingtext-shadowtext-size-adjust
Experimental
text-spacing-trim
Experimental
text-transformtext-underline-offsettext-underline-positiontext-wraptext-wrap-modetext-wrap-styletimeline-scopetoptouch-actiontransform-*transformtransform-boxtransform-origintransform-styletransition-*transitiontransition-behaviortransition-delaytransition-durationtransition-propertytransition-timing-functiontranslateunicode-bidiuser-modify
Non-standard
Deprecated
user-selectvector-effectvertical-alignview-*view-timelineview-timeline-axisview-timeline-insetview-timeline-nameview-transition-classview-transition-namevisibilitywhite-spacewhite-space-collapsewidowswidthwill-changeword-breakword-spacingwriting-modexyz-indexzoomSelectors& nesting selectorAttribute selectorsClass selectorsID selectorsType selectorsUniversal selectorsCombinatorsChild combinatorColumn combinator
Experimental
Descendant combinatorNamespace separatorNext-sibling combinatorSelector listSubsequent-sibling combinatorPseudo-classes:-moz-*:-moz-broken
Non-standard
Deprecated
:-moz-drag-over
Non-standard
:-moz-first-node
Experimental
Non-standard
:-moz-handler-blocked
Non-standard
:-moz-handler-crashed
Non-standard
:-moz-handler-disabled
Non-standard
:-moz-last-node
Experimental
Non-standard
:-moz-loading
Non-standard
:-moz-locale-dir(ltr)
Non-standard
:-moz-locale-dir(rtl)
Non-standard
:-moz-only-whitespace
Non-standard
:-moz-submit-invalid
Non-standard
:-moz-suppressed
Non-standard
:-moz-user-disabled
Non-standard
:-moz-window-inactive
Non-standard
:active:active-view-transition:any-link:autofill:blank
Experimental
:buffering:checked:current
Experimental
:default:defined:dir():disabled:empty:enabled:first-*:first:first-child:first-of-type:focus-*:focus:focus-visible:focus-within:fullscreen:future:has-slotted:has():heading
Experimental
:heading()
Experimental
:host:host-context()
Deprecated
:host():hover:in-range:indeterminate:invalid:is():lang():last-child:last-of-type:left:link:local-link
Experimental
:modal:muted:not():nth-*:nth-child():nth-last-child():nth-last-of-type():nth-of-type():only-child:only-of-type:open:optional:out-of-range:past:paused:picture-in-picture:placeholder-shown:playing:popover-open:read-only:read-write:required:right:root:scope:seeking:stalled:state():target:target-current
Experimental
:user-invalid:user-valid:valid:visited:volume-locked:where()Pseudo-elements::-moz-*::-moz-color-swatch
Non-standard
::-moz-focus-inner
Non-standard
Deprecated
::-moz-list-bullet
Experimental
Non-standard
::-moz-list-number
Experimental
Non-standard
::-moz-meter-bar
Non-standard
::-moz-progress-bar
Experimental
Non-standard
::-moz-range-progress
Non-standard
::-moz-range-thumb
Non-standard
::-moz-range-track
Non-standard
::-webkit-*::-webkit-inner-spin-button
Non-standard
::-webkit-meter-bar
Non-standard
Deprecated
::-webkit-meter-even-less-good-value
Non-standard
::-webkit-meter-inner-element
Non-standard
::-webkit-meter-optimum-value
Non-standard
::-webkit-meter-suboptimum-value
Non-standard
::-webkit-progress-bar
Non-standard
::-webkit-progress-inner-element
Non-standard
::-webkit-progress-value
Non-standard
::-webkit-scrollbar
Non-standard
::-webkit-search-cancel-button
Non-standard
::-webkit-search-results-button
Non-standard
::-webkit-slider-runnable-track
Non-standard
::-webkit-slider-thumb
Non-standard
::after::backdrop::before::checkmark
Experimental
::column
Experimental
::cue::details-content::file-selector-button::first-letter::first-line::grammar-error::highlight()::marker::part()::picker-icon
Experimental
::picker()
Experimental
::placeholder::scroll-*::scroll-button()
Experimental
::scroll-marker
Experimental
::scroll-marker-group
Experimental
::selection::slotted()::spelling-error::target-text::view-*::view-transition::view-transition-group()::view-transition-image-pair()::view-transition-new()::view-transition-old()At-rules@charset@color-profile@container@counter-style@document
Non-standard
Deprecated
@font-face@font-feature-values@font-palette-values@import@keyframes@layer@media@namespace@page@position-try
Experimental
@property@scope@starting-style@supports@view-transitionFunctions-moz-image-rect
Non-standard
Deprecated
abs()acos()anchor-size()anchor()asin()atan()atan2()attr()blur()brightness()calc-size()
Experimental
calc()circle()clamp()color-mix()color()conic-gradient()contrast-color()
Experimental
contrast()cos()counter()counters()cross-fade()cubic-bezier()device-cmyk()drop-shadow()element()
Experimental
ellipse()env()exp()fit-content()grayscale()hsl()hue-rotate()hwb()hypot()if()
Experimental
image-set()image()inset()invert()lab()layer()lch()light-dark()linear-gradient()linear()log()matrix()matrix3d()max()min()minmax()mod()oklab()oklch()opacity()paint()palette-mix()
Experimental
path()perspective()polygon()pow()radial-gradient()ray()rect()rem()repeat()repeating-conic-gradient()repeating-linear-gradient()repeating-radial-gradient()rgb()rotate()rotate3d()rotateX()rotateY()rotateZ()round()saturate()scale()scale3d()scaleX()scaleY()scaleZ()scroll()sepia()shape()sibling-count()
Experimental
sibling-index()
Experimental
sign()sin()skew()skewX()skewY()sqrt()steps()superellipse()
Experimental
symbols()tan()translate()translate3d()translateX()translateY()translateZ()url()var()view()xywh()Types<absolute-size><alpha-value><angle-percentage><angle><baseline-position><basic-shape><blend-mode><box-edge><calc-keyword><calc-sum><color-interpolation-method><color><content-distribution><content-position><corner-shape-value>
Experimental
<custom-ident><dashed-ident><dimension><display-box><display-inside><display-internal><display-legacy><display-listitem><display-outside><easing-function><filter-function><flex><frequency-percentage><frequency><generic-family><gradient><hex-color><hue-interpolation-method><hue><ident><image><integer><length-percentage><length><line-style><named-color><number><overflow-position><overflow><percentage><position-area><position><ratio><relative-size><resolution><self-position><shape>
Deprecated
<string><system-color><text-edge><time-percentage><time><transform-function><url>GuidesAnchor positioningUsing anchor positioningHandling overflowAnimationsAnimatable propertiesUsing animationsBackgrounds and bordersUsing multiple backgroundsResizing background imagesScaling SVG backgroundsBox alignmentOverviewBox alignment in block layoutBox alignment in flexboxBox alignment in grid layoutBox alignment in multi-column layoutBox modelIntroductionMastering margin collapsingCascadeIntroductionInheritanceSpecificityProperty value processingShorthand propertiesCustom propertiesUsing custom propertiesColorsApplying color to HTMLColor valuesUsing relative colorsUsing color wiselyAccessibility: Colors and luminanceAccessibility: Color contrastColumnsBasic conceptsStyling columnsUsing multi-column layoutsSpanning and balancing columnsHandling overflowHandling content breaksConditional rulesUsing feature queriesUsing container scroll-state queriesContainmentContainer queriesUsing containmentUsing container size and style queriesCSSOM viewCoordinate systemsViewport conceptsDisplayBlock and inline layoutFlow layoutFlow layout and overflowFlow layout and writing modesIn flow and out of flowLayout and the containing blockFormatting contextsBlock formatting contextInline formatting contextUsing multi-keyword syntaxVisual formatting modelFilter effectsUsing filter effectsFlexboxBasic conceptsFlexbox and other layoutsAligning flex itemsOrdering flex itemsControlling flex item ratiosWrapping flex itemsTypical use casesFontsOpenType featuresVariable fontsWOFFGridBasic conceptsGrid and other layoutsGrid template areasUsing line-based placementUsing named grid linesAuto-placementAligning itemsLogical values and writing modesCommon grid layoutsSubgridGrid layout and accessibilityMasonry layout
Experimental
ImagesUsing gradientsStyling replaced elementsImplementing image spritesLists and countersUsing countersIndenting listsLogical propertiesBasic conceptsLogical properties for floating and positioningLogical properties for margins, borders, and paddingLogical properties for sizingMedia queriesUsing media queriesUsing media queries for accessibilityTesting media queries programmaticallyPrintingNesting style rulesNesting at-rulesNesting and specificityUsing nestingOverflowCreating carouselsPositioningStacking contextStacking floating elementsUnderstanding z-indexUsing z-indexStacking without z-indexScroll anchoringOverviewScroll snapBasic conceptsUsing scroll snap eventsSelectorsPrivacy and :visitedSelector structureSelectors and combinatorsUsing :targetShapesOverviewBox-value shapesImage-based shapesUsing shape-outsideSyntaxIntroductionCommentsAt-rule functionsError handlingTextWrapping and breaking textHandling whitespaceText decorationText shadowsTransformsUsing transformsTransitionsUsing transitionsValues and unitsValue definition syntaxNumeric data typesTextual data typesUsing math functionsLayout cookbookRecipe: Media objectsColumn layoutsCenter an elementSticky footersSplit navigationBreadcrumb navigationList group with badgesPaginationCardGrid wrapperToolsBorder-image generatorBorder-radius generatorBox-shadow generatorColor format converterColor mixerShape generator
Your blueprint for a better internet.
MDN
About
Blog
Mozilla careers
Advertise with us
MDN Plus
Product help
Contribute
MDN Community
Community resources
Writing guidelines
MDN Discord
MDN on GitHub
Developers
Web technologies
Learn web development
Guides
Tutorials
Glossary
Hacks blog
Website Privacy Notice
Cookies
Legal
Community Participation Guidelines
Visit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.
Portions of this content are Â©1998ââ¨2025â© by individual mozilla.org contributors. Content available under a Creative Commons license.