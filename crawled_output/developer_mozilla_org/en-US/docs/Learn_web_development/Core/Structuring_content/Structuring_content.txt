Structuring content with HTML - Learn web development | MDN
Skip to main content
Skip to search
MDN
HTML
HTML: Markup language
HTML reference
Elements
Global attributes
Attributes
See allâ¦
HTML guides
Responsive images
HTML cheatsheet
Date & time formats
See allâ¦
Markup languages
SVG
MathML
XML
CSS
CSS: Styling language
CSS reference
Properties
Selectors
At-rules
Values & units
See allâ¦
CSS guides
Box model
Animations
Flexbox
Colors
See allâ¦
Layout cookbook
Column layouts
Centering an element
Card component
See allâ¦
JavaScript
JS
JavaScript: Scripting language
JS reference
Standard built-in objects
Expressions & operators
Statements & declarations
Functions
See allâ¦
JS guides
Control flow & error handing
Loops and iteration
Working with objects
Using classes
See allâ¦
Web APIs
Web APIs: Programming interfaces
Web API reference
File system API
Fetch API
Geolocation API
HTML DOM API
Push API
Service worker API
See allâ¦
Web API guides
Using the Web animation API
Using the Fetch API
Working with the History API
Using the Web speech API
Using web workers
All
All web technology
Technologies
Accessibility
HTTP
URI
Web extensions
WebAssembly
WebDriver
See allâ¦
Topics
Media
Performance
Privacy
Security
Progressive web apps
Learn
Learn web development
Frontend developer course
Getting started
Common questions
Curriculum
Learn HTML
Introduction to HTML
Getting started with HTML
Learn CSS
What is CSS
Getting started with CSS
Learn JavaScript
How to use data attributes
Add JavaScript to your web page
Tools
Discover our tools
Playground
HTTP Observatory
Border-image generator
Border-radius generator
Box-shadow generator
Color mixer
Color picker
Shape generator
About
Get to know MDN better
About MDN
Advertise with us
Community
MDN on GitHub
Blog
Learn
Core learning modules
HTML
Structuring content with HTML
Overview: Core learning modules Next
HTML is the technology that defines the content and structure of any website. Written properly, it should also define the semantics (meaning) of the content in a machine-readable way, which is vital for accessibility, search engine optimization, and making use of the built-in features browsers provide for content to work optimally. This module covers the basics of the language, before looking at key areas such as document structure, links, lists, images, forms, and more.
In this article
PrerequisitesTutorials and challengesTest your skillsAdditional tutorialsSee also
Prerequisites
Before starting this module, you don't need any previous HTML knowledge, but you should have at least basic familiarity with using computers and using the web passively (i.e., just looking at it and consuming content). You should have a basic work environment set up (as detailed in Installing basic software), and understand how to create and manage files (as detailed in Dealing with files). Both are parts of our Getting started with the web complete beginner's module.
Note:
If you are working on a computer, tablet, or another device where you can't create files, you can try running the code in an online editor such as CodePen or JSFiddle.
Tutorials and challenges
Basic HTML syntax
Covers the absolute basics of HTML, to get you started â we define elements, attributes, and other important terms, and show where they fit in the language. We also show how a typical HTML page is structured and how an HTML element is structured, and explain other important basic language features. Along the way, we'll play with some HTML to get you interested!
What's in the head? Web page metadata
The head of an HTML document is the part that is not displayed in the web browser when the page is loaded. It contains metadata information such as the page <title>, links to CSS (if you want to style your HTML content with CSS), links to custom favicons, and metadata (data about the HTML, such as who wrote it, and important keywords that describe the document).
Headings and paragraphs
One of HTML's main jobs is to give text structure so that a browser can display an HTML document the way its developer intends. This article explains how HTML can be used to provide fundamental page structure by defining headings and paragraphs.
Emphasis and importance
The previous article looked at why semantics are important in HTML, and focused on headings and paragraphs. This article continues on the theme of semantics, looking at HTML elements that apply emphasis and importance to text (parallel to italics and bold text in print media).
Lists
Lists are everywhere in lifeâfrom your shopping list to the list of directions you subconsciously follow to get to your house every day, to the lists of instructions you are following in these tutorials! It may not surprise you that HTML has a convenient set of elements that allows us to define different types of list. On the web, we have three types of lists: unordered, ordered, and description lists. This lesson shows you how to use the different types.
Advanced text features
There are many other elements in HTML for defining text semantics, which we didn't get to in the Emphasis and importance article. The elements described in this article are less known, but still useful to know about (and this is still not a complete list by any means). Here you'll learn about marking up quotations, computer code and other related text, subscript and superscript, contact information, and more.
Marking up a letter Challenge
We all learn to write a letter sooner or later; it is also a useful example to test our text formatting skills. In this challenge, you'll have a letter to mark up as a test for your HTML text formatting skills, as well as hyperlinks and proper use of the HTML <head> element.
Structuring documents
In addition to defining individual parts of your page (such as "a paragraph" or "an image"), HTML also boasts a number of block level elements used to define areas of your website (such as "the header", "the navigation menu", "the main content column"). This article looks into how to plan a basic website structure, and write the HTML to represent this structure.
Creating links
Links (also known as hyperlinks) are really important â they are what makes the Web a web. This article shows the syntax required to make a link, and discusses link best practices.
Structuring a page of content Challenge
Structuring a page of content ready for laying it out using CSS is a very important skill to master, so in this challenge you'll be tested on your ability to think about how a page might end up looking, and choose appropriate structural semantics to build a layout on top of.
HTML images
In the beginning, the web was just text, and it was really quite boring. Fortunately, it wasn't too long before the ability to embed images (and other more interesting types of content) inside web pages was added. In this article we'll look at how to use the <img> element in depth, including the basics, annotating it with captions using <figure>, and detailing how it relates to CSS background images.
HTML video and audio
Now that we are comfortable with adding simple images to a webpage, the next step is to start adding video and audio players to your HTML documents! In this article we'll look at doing just that with the <video> and <audio> elements; we'll then finish off by looking at how to add captions/subtitles to your videos.
Creepy-crawly splash page Challenge
In this challenge, we'll test your knowledge of some of the techniques discussed in the last couple of lessons, getting you to add some images and video to a splash page all about bugs and other creepy crawlies.
HTML table basics
This article gets you started with HTML tables, covering the very basics such as rows, cells, headings, making cells span multiple columns and rows, and how to group together all the cells in a column for styling purposes.
HTML table accessibility
In this article we look at more HTML table accessibility features such as captions/summaries, grouping your rows into table head, body and footer sections, and scoping columns and rows.
Structuring a planet data table Challenge
In this challenge, we provide you with some data on the planets in our solar system. Your job is to structure it into an accessible HTML table.
Forms and buttons in HTML
HTML forms and buttons are powerful tools for interacting with users â most commonly they are used for collecting data from users or allowing them to control a user interface. In this article we provide an introduction to the basics of forms and buttons.
Debugging HTML
Writing HTML is fine, but what if something goes wrong, and you can't work out where the error in the code is? This article will introduce you to some tools that can help you find and fix errors in HTML.
Test your skills
You will find "Test your skills" articles placed between the tutorial articles to check whether you have retained the most important information before you move on. If you want to explore all of these together, you can find them listed at Test your skills: HTML.
Additional tutorials
These tutorials are not part of the learning pathway, but they are interesting nonetheless â you should consider these as stretch goals, to optionally study when you are done with the main Core articles.
Including vector graphics in HTML
Vector graphics are very useful in many circumstances â they have small file sizes and are highly scalable, so they don't pixelate when zoomed in or blown up to a large size. In this article we'll show you how to include one in your webpage.
From object to iframe â general embedding technologies
Developers commonly think of embedding media such as images, video and audio into web pages. In this article we take somewhat of a sideways step, looking at some elements that allow you to embed a wide variety of content types into your webpages: the <iframe>, <embed> and <object> elements. <iframe>s are for embedding other web pages, and the other two allow you to embed external resources such as PDF files.
See also
Learn HTML and CSS, Scrimba MDN learning partner
Scrimba's Learn HTML and CSS course teaches you HTML and CSS through building and deploying five awesome projects, with fun interactive lessons and challenges taught by knowledgeable teachers.
Learn HTML, Codecademy
Another useful resource for learning HTML basics.
The basics of semantic HTML, Scrimba MDN learning partner
This interactive lesson provides a useful description of HTML, with particular emphasis on why the semantic aspect of it is important.
Overview: Core learning modules Next
Help improve MDN
Learn how to contribute
This page was last modified on â¨Aug 28, 2025â© by MDN contributors.
View this page on GitHub â¢ Report a problem with this content
Getting started modulesEnvironment setupInstalling softwareBrowsing the webCode editorsDealing with filesCommand lineYour first websiteWhat will it look like?Creating the contentStyling the contentAdding interactivityPublishingWeb standardsHow the web worksThe web standards modelHow browsers load websitesSoft skillsResearch and learningCollaboration and teamworkWorkflows and processesFinding a jobCore modulesStructuring content with HTMLBasic HTML syntaxWeb page metadataHeadings and paragraphsEmphasis and importanceListsTest: HTML text basicsAdvanced text featuresTest: Advanced HTML textChallenge: Letter markupStructuring documentsCreating linksTest: LinksChallenge: Bird watching siteImagesTest: ImagesVideo and audioTest: Audio and videoChallenge: Splash pageTable basicsTable accessibilityChallenge: Planet data tableForms and buttonsTest: Forms and buttonsChallenge: Feedback formDebugging HTMLTest: HTML tests indexAdditional tutorialsVector graphicsEmbedding technologiesCSS styling basicsWhat is CSS?CSS getting startedChallenge: Biography pageBasic selectorsAttribute selectorsPseudo-classes and elementsCombinatorsTest: SelectorsBox modelTest: Box modelHandling conflictsTest: CascadeChallenge: Fixing blog stylesValues and unitsTest: Values and unitsSizingTest: SizingBackgrounds and bordersTest: Backgrounds and bordersChallenge: Sizing and decoratingOverflowTest: OverflowImages, media, formsTest: Images and formsStyling tablesDebugging CSSTest: Styling basics tests indexAdditional tutorialsAdvanced styling effectsCascade layersMultiple text directionsOrganizing your CSSCSS text stylingText and font fundamentalsStyling listsStyling linksWeb fontsChallenge: Community school homepageCSS layoutIntroductionFloatsTest: FloatsPositioningTest: PositioningFlexboxTest: FlexboxCSS grid layoutTest: CSS gridResponsive web designMedia queriesTest: RWD & media queriesChallenge: Fundamental layoutTest: Layout tests indexAdditional tutorialsMultiple-column layoutPractical positioning examplesLegacy layout methodsSupporting older browsersDynamic scripting with JavaScriptWhat is JavaScript?JavaScript walkthroughTroubleshootingVariablesTest: VariablesNumbers and operatorsTest: MathStringsString methodsTest: StringsArraysTest: ArraysChallenge: Story generatorConditionalsTest: ConditionalsLoopsTest: LoopsFunctionsBuild your own functionFunction return valuesTest: FunctionsEventsEvent bubblingTest: EventsChallenge: Image galleryObjectsTest: ObjectsDOM scriptingNetwork requestsJSONTest: JSONChallenge: House data UIDebugging and error handlingTest: JavaScript tests indexJavaScript frameworks and librariesIntroductionFramework featuresReact getting startedReact ToDo appReact componentsReact events and stateReact editing, filtering, conditional UIReact accessibilityReact resourcesAccessibilityWhat is accessibility?Accessibility toolsAccessible HTMLTest: HTML a11yAccessible CSS and JSTest: CSS/JS a11yWAI-ARIATest: WAI-ARIAAccessible multimediaMobile accessibilityChallenge: A11y debuggingTest: A11y tests indexDesign for developersVersion controlExtension modulesAdvanced JavaScript objectsObject prototypesObject-oriented programmingClasses in JavaScriptTest: Object-oriented JavaScriptObject building practiceChallenge: Bouncing balls featuresTest: OOJS tests indexClient-side web APIsIntroductionVideo and audioDrawing graphicsClient-side storageThird-party APIsAsynchronous JavaScriptIntroductionUsing promisesImplementing promise-based APIsIntroducing workersChallenge: Animation sequenceWeb formsYour first formHow to structure a web formBasic native form controlsThe HTML5 input typesOther form controlsStyling web formsAdvanced form stylingCustomizable selectsUI pseudo-classesClient-side form validationSending form dataUnderstanding client-side toolsOverviewPackage managementSample toolchainDeploying our appServer-side websitesFirst stepsIntroductionClient-server overviewServer-side frameworksWebsite securityDjango (Python)Django introductionDev environment setup1: Local library tutorial2: Skeleton website3: Models4: Django admin site5: Home page6: Generic list and detail views7: Sessions framework8: Authentication and permissions9: Forms10: Testing11: DeployingDjango securityChallenge: Django blogExpress (Node.js)Express/Node introductionDev environment setup1: Local library tutorial2: Skeleton website3: Using databases with Mongoose4: Routes and controllers5: Displaying data6: Working with forms7: DeployingWeb performanceThe "why" of web performanceWhat is web performance?Perceived performanceMeasuring performanceMultimedia: ImagesMultimedia: videoPerformant JavaScriptPerformant HTMLPerformant CSSPerformance business caseTestingIntroductionTesting strategiesCommon HTML and CSS problemsFeature detectionAutomated testingAutomation environment setupFurther resourcesHow to solve common problemsCommon CSS problemsCommon HTML problemsCommon JavaScript problemsDesign and accessibilityTools and setupWeb mechanicsAboutResources for educatorsChangelog
Your blueprint for a better internet.
MDN
About
Blog
Mozilla careers
Advertise with us
MDN Plus
Product help
Contribute
MDN Community
Community resources
Writing guidelines
MDN Discord
MDN on GitHub
Developers
Web technologies
Learn web development
Guides
Tutorials
Glossary
Hacks blog
Website Privacy Notice
Cookies
Legal
Community Participation Guidelines
Visit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.
Portions of this content are Â©1998ââ¨2025â© by individual mozilla.org contributors. Content available under a Creative Commons license.