What is CSS? - Learn web development | MDN
Skip to main content
Skip to search
MDN
HTML
HTML: Markup language
HTML reference
Elements
Global attributes
Attributes
See allâ¦
HTML guides
Responsive images
HTML cheatsheet
Date & time formats
See allâ¦
Markup languages
SVG
MathML
XML
CSS
CSS: Styling language
CSS reference
Properties
Selectors
At-rules
Values & units
See allâ¦
CSS guides
Box model
Animations
Flexbox
Colors
See allâ¦
Layout cookbook
Column layouts
Centering an element
Card component
See allâ¦
JavaScript
JS
JavaScript: Scripting language
JS reference
Standard built-in objects
Expressions & operators
Statements & declarations
Functions
See allâ¦
JS guides
Control flow & error handing
Loops and iteration
Working with objects
Using classes
See allâ¦
Web APIs
Web APIs: Programming interfaces
Web API reference
File system API
Fetch API
Geolocation API
HTML DOM API
Push API
Service worker API
See allâ¦
Web API guides
Using the Web animation API
Using the Fetch API
Working with the History API
Using the Web speech API
Using web workers
All
All web technology
Technologies
Accessibility
HTTP
URI
Web extensions
WebAssembly
WebDriver
See allâ¦
Topics
Media
Performance
Privacy
Security
Progressive web apps
Learn
Learn web development
Frontend developer course
Getting started
Common questions
Curriculum
Learn HTML
Introduction to HTML
Getting started with HTML
Learn CSS
What is CSS
Getting started with CSS
Learn JavaScript
How to use data attributes
Add JavaScript to your web page
Tools
Discover our tools
Playground
HTTP Observatory
Border-image generator
Border-radius generator
Box-shadow generator
Color mixer
Color picker
Shape generator
About
Get to know MDN better
About MDN
Advertise with us
Community
MDN on GitHub
Blog
Learn
Core learning modules
CSS styling basics
What is CSS?
What is CSS?
Overview: CSS styling basics Next
CSS (Cascading Style Sheets) allows you to create great-looking web pages, but how does it work under the hood? This article explains what CSS is, what the basic syntax looks like, and how your browser applies CSS to HTML to style it.
Prerequisites:
Basic software installed, basic knowledge of
working with files, and HTML familiarity (study the
Structuring content with HTML module.)
Learning outcomes:
The purpose of CSS.
That HTML has nothing to do with styling.
The concept of default browser styles.
What CSS code looks like.
How CSS is applied to HTML.
In this article
Browser default stylesWhat is CSS for?CSS syntax basicsHow is CSS applied to HTML?Play with some CSSSummary
Browser default styles
In the Structuring content with HTML module, we covered what HTML is and how it is used to mark up documents. These documents will be readable in a web browser. Headings will look larger than regular text, paragraphs break onto a new line and have space between them. Links are colored and underlined to distinguish them from the rest of the text.
What you are seeing are the browser's default styles â very basic styling that the browser applies to HTML to make sure that the page will be readable even if no explicit styling is specified by the author of the page. These styles are defined in default CSS stylesheets contained within the browser â they have nothing to do with HTML.
The web would be a boring place if all websites looked like that. This is why you need to learn about CSS.
What is CSS for?
Using CSS, you can control exactly how HTML elements look in the browser, presenting your documents to your users with whatever design and layout you like.
A document is usually a text file structured using a markup language, most commonly HTML (these are termed HTML documents). You may also come across documents written in other markup languages such as SVG or XML. An HTML document contains a web page's content and specifies its structure.
Presenting a document to a user means converting it into a form usable by your audience. Browsers like Firefox, Chrome, Safari, and Edge are designed to present documents visually, for example, on a computer screen, projector, mobile device, or printer. In a web context, this is generally referred to as rendering; we provided a simplified description of the process by which a web page is rendered in How browsers load websites.
Note:
A browser is sometimes called a user agent, which basically means a computer program that represents a person inside a computer system.
CSS can be used for many purposes related to the look and feel of your web page, for example:
Text styling, including changing the color and size of headings and links.
Creating layouts, such as grid layouts or multiple-column layouts.
Special effects such as animation.
The CSS language is organized into modules that contain related functionality. For example, take a look at the MDN reference pages for the Backgrounds and Borders module to find out what its purpose is and the properties and features it contains. In our module pages, you will also find links to Specifications that define the technologies.
CSS syntax basics
CSS is a rule-based language â you define rules by specifying groups of styles that should be applied to particular element or groups of elements on your web page.
For example, you might decide to style the main heading on your page as large red text. The following code shows a very simple CSS rule that would achieve this:
cssh1 {
color: red;
font-size: 2.5em;
}
In the above example, the CSS rule opens with a selector. This selects the HTML elements that we are going to style. In this case, we are styling level one headings (<h1>).
We then include a set of curly braces â { }.
The braces contain one or more declarations, which take the form of property and value pairs. We specify the property (for example, color in the above example) before the colon, and we specify the value of the property after the colon (red is the value being set for the color property).
This example contains two declarations, one for color and another for font-size.
Different CSS properties have different allowable values. In our example, we have the color property, which can take various color values. We also have the font-size property. This property can take various size units as a value.
A CSS stylesheet contains many such rules, written one after the other.
cssh1 {
color: red;
font-size: 2.5em;
}
p {
color: aqua;
padding: 5px;
background: midnightblue;
}
You will find that you quickly learn some values, whereas others you will need to look up. The individual property pages on MDN give you a quick way to look up properties and their values.
Note:
You can find links to all the CSS property pages (along with other CSS features) listed on the MDN CSS reference. Alternatively, you should get used to searching for "mdn css-feature-name" in your favorite search engine whenever you need to find out more information about a CSS feature. For example, try searching for "mdn color" or "mdn font-size"!
How is CSS applied to HTML?
As explained in How browsers load websites, when you navigate to a web page, the browser first receives the HTML document containing the web page content and converts it to a DOM tree.
After that, any CSS rules found in the web page (either inserted directly in the HTML, or in referenced external .css files) are sorted into different "buckets", based on the different elements they will be applied to (as specified by their selectors). The CSS rules are then applied to the DOM tree, resulting in a render tree, which is then painted to the browser window.
Let's look at an example. First of all, we'll define an HTML snippet that the CSS could be applied to:
html<h1>CSS is great</h1>
<p>You can style text.</p>
<p>And create layouts and special effects.</p>
Now, our CSS, repeated from the previous section:
cssh1 {
color: red;
font-size: 2.5em;
}
p {
color: aqua;
padding: 5px;
background: midnightblue;
}
This CSS:
Selects all <h1> elements on the page, coloring their text red and making them bigger than their default size. Since there is only one <h1> in our example HTML, only that element will get the styling.
Selects all <p> elements on the page, giving them a custom text and background color and some spacing around the text. There are two <p> elements in our example HTML, and they both get the styling.
When the CSS is applied to the HTML, the rendered output is as follows:
Play with some CSS
Try playing with the above example. To do so, press the "Play" button in the top-right corner to load it in our MDN Playground editor.
Do the following:
Add another paragraph of text below the two existing ones, and note how the second CSS rule is automatically applied to the new paragraph.
Add an <h2> subheading somewhere below the <h1>, maybe after one of the paragraphs.
Try giving the <h2> elements a different color by adding a new rule to the CSS. Make a copy of the h1 rule, change the selector to h2, and change the color value from red to purple, for example.
If you are feeling adventurous, try looking up some new CSS properties and values in the MDN CSS reference to add to your rules!
For some additional practice with CSS basics, see Write your first lines of CSS! from Scrimba MDN learning partner. This scrim gives a useful rundown of basic CSS syntax, and provides an interactive challenge where you can get some more practice with writing CSS declarations.
Summary
Now that you have some understanding of what CSS is and how it works, let's move on to giving you some practice with writing CSS yourself and explaining the syntax in more detail.
Overview: CSS styling basics Next
Help improve MDN
Learn how to contribute
This page was last modified on â¨Jul 7, 2025â© by MDN contributors.
View this page on GitHub â¢ Report a problem with this content
Getting started modulesEnvironment setupInstalling softwareBrowsing the webCode editorsDealing with filesCommand lineYour first websiteWhat will it look like?Creating the contentStyling the contentAdding interactivityPublishingWeb standardsHow the web worksThe web standards modelHow browsers load websitesSoft skillsResearch and learningCollaboration and teamworkWorkflows and processesFinding a jobCore modulesStructuring content with HTMLBasic HTML syntaxWeb page metadataHeadings and paragraphsEmphasis and importanceListsTest: HTML text basicsAdvanced text featuresTest: Advanced HTML textChallenge: Letter markupStructuring documentsCreating linksTest: LinksChallenge: Bird watching siteImagesTest: ImagesVideo and audioTest: Audio and videoChallenge: Splash pageTable basicsTable accessibilityChallenge: Planet data tableForms and buttonsTest: Forms and buttonsChallenge: Feedback formDebugging HTMLTest: HTML tests indexAdditional tutorialsVector graphicsEmbedding technologiesCSS styling basicsWhat is CSS?CSS getting startedChallenge: Biography pageBasic selectorsAttribute selectorsPseudo-classes and elementsCombinatorsTest: SelectorsBox modelTest: Box modelHandling conflictsTest: CascadeChallenge: Fixing blog stylesValues and unitsTest: Values and unitsSizingTest: SizingBackgrounds and bordersTest: Backgrounds and bordersChallenge: Sizing and decoratingOverflowTest: OverflowImages, media, formsTest: Images and formsStyling tablesDebugging CSSTest: Styling basics tests indexAdditional tutorialsAdvanced styling effectsCascade layersMultiple text directionsOrganizing your CSSCSS text stylingText and font fundamentalsStyling listsStyling linksWeb fontsChallenge: Community school homepageCSS layoutIntroductionFloatsTest: FloatsPositioningTest: PositioningFlexboxTest: FlexboxCSS grid layoutTest: CSS gridResponsive web designMedia queriesTest: RWD & media queriesChallenge: Fundamental layoutTest: Layout tests indexAdditional tutorialsMultiple-column layoutPractical positioning examplesLegacy layout methodsSupporting older browsersDynamic scripting with JavaScriptWhat is JavaScript?JavaScript walkthroughTroubleshootingVariablesTest: VariablesNumbers and operatorsTest: MathStringsString methodsTest: StringsArraysTest: ArraysChallenge: Story generatorConditionalsTest: ConditionalsLoopsTest: LoopsFunctionsBuild your own functionFunction return valuesTest: FunctionsEventsEvent bubblingTest: EventsChallenge: Image galleryObjectsTest: ObjectsDOM scriptingNetwork requestsJSONTest: JSONChallenge: House data UIDebugging and error handlingTest: JavaScript tests indexJavaScript frameworks and librariesIntroductionFramework featuresReact getting startedReact ToDo appReact componentsReact events and stateReact editing, filtering, conditional UIReact accessibilityReact resourcesAccessibilityWhat is accessibility?Accessibility toolsAccessible HTMLTest: HTML a11yAccessible CSS and JSTest: CSS/JS a11yWAI-ARIATest: WAI-ARIAAccessible multimediaMobile accessibilityChallenge: A11y debuggingTest: A11y tests indexDesign for developersVersion controlExtension modulesAdvanced JavaScript objectsObject prototypesObject-oriented programmingClasses in JavaScriptTest: Object-oriented JavaScriptObject building practiceChallenge: Bouncing balls featuresTest: OOJS tests indexClient-side web APIsIntroductionVideo and audioDrawing graphicsClient-side storageThird-party APIsAsynchronous JavaScriptIntroductionUsing promisesImplementing promise-based APIsIntroducing workersChallenge: Animation sequenceWeb formsYour first formHow to structure a web formBasic native form controlsThe HTML5 input typesOther form controlsStyling web formsAdvanced form stylingCustomizable selectsUI pseudo-classesClient-side form validationSending form dataUnderstanding client-side toolsOverviewPackage managementSample toolchainDeploying our appServer-side websitesFirst stepsIntroductionClient-server overviewServer-side frameworksWebsite securityDjango (Python)Django introductionDev environment setup1: Local library tutorial2: Skeleton website3: Models4: Django admin site5: Home page6: Generic list and detail views7: Sessions framework8: Authentication and permissions9: Forms10: Testing11: DeployingDjango securityChallenge: Django blogExpress (Node.js)Express/Node introductionDev environment setup1: Local library tutorial2: Skeleton website3: Using databases with Mongoose4: Routes and controllers5: Displaying data6: Working with forms7: DeployingWeb performanceThe "why" of web performanceWhat is web performance?Perceived performanceMeasuring performanceMultimedia: ImagesMultimedia: videoPerformant JavaScriptPerformant HTMLPerformant CSSPerformance business caseTestingIntroductionTesting strategiesCommon HTML and CSS problemsFeature detectionAutomated testingAutomation environment setupFurther resourcesHow to solve common problemsCommon CSS problemsCommon HTML problemsCommon JavaScript problemsDesign and accessibilityTools and setupWeb mechanicsAboutResources for educatorsChangelog
Your blueprint for a better internet.
MDN
About
Blog
Mozilla careers
Advertise with us
MDN Plus
Product help
Contribute
MDN Community
Community resources
Writing guidelines
MDN Discord
MDN on GitHub
Developers
Web technologies
Learn web development
Guides
Tutorials
Glossary
Hacks blog
Website Privacy Notice
Cookies
Legal
Community Participation Guidelines
Visit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.
Portions of this content are Â©1998ââ¨2025â© by individual mozilla.org contributors. Content available under a Creative Commons license.