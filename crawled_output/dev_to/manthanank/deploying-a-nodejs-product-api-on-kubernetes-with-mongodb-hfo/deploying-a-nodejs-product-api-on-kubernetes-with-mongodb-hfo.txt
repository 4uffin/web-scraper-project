🚀 Deploying a Node.js Product API on Kubernetes with MongoDB - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE—the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project — features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Crypto Forem
Follow
A collaborative community for all things Crypto—from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Manthan Ankolekar
Posted on Sep 18
🚀 Deploying a Node.js Product API on Kubernetes with MongoDB
#webdev
#node
#aws
#kubernetes
Modern apps need to scale effortlessly while staying resilient. Kubernetes (K8s) has become the go-to platform for orchestrating containerized apps, ensuring scalability, self-healing, and portability.
In this guide, we’ll build and deploy a Node.js Product API with MongoDB on Kubernetes. You’ll learn how to containerize the app, define Kubernetes manifests, and enable auto-scaling.
🧩 What We’re Building
A Node.js + Express REST API with CRUD for products
MongoDB database with Mongoose ODM
Dockerized application
Kubernetes resources: Deployment, Service, Ingress, Secrets
Horizontal Pod Autoscaler (HPA) for auto-scaling
Ingress Controller for external access
Here’s the flow:
Client → Ingress → Service → Pod(s) running Node.js API → MongoDB
↑
HPA scales pods dynamically
Enter fullscreen mode
Exit fullscreen mode
📁 Project Structure
nodejs-kubernates/
├── src/
│
├── config/db.js
# MongoDB connection
│
├── controllers/
# Business logic
│
├── models/product.model.js
│
├── routes/product.routes.js
│
├── middlewares/
# Error handling, validation
│
└── server.js
# Express entry point
├── k8s/
│
├── deployment.yaml
# App Deployment
│
├── service.yaml
# ClusterIP Service
│
├── ingress.yaml
# Ingress (exposes API)
│
├── secret.yaml
# MongoDB credentials
│
└── hpa.yaml
# Auto-scaling config
├── Dockerfile
├── docker-compose.yml
# Local dev
└── package.json
Enter fullscreen mode
Exit fullscreen mode
📝 Step 1 — Build the Node.js Product API
The Product schema:
const productSchema = new mongoose.Schema({
name: { type: String, required: true, trim: true },
description: { type: String, default: '' },
price: { type: Number, required: true, min: 0 },
inStock: { type: Boolean, default: true }
}, { timestamps: true });
Enter fullscreen mode
Exit fullscreen mode
CRUD endpoints are exposed at /api/products.
Example request:
curl -X POST http://localhost:5000/api/products \
-H "Content-Type: application/json" \
-d '{"name":"Laptop","price":999.99,"inStock":true}'
Enter fullscreen mode
Exit fullscreen mode
📦 Step 2 — Containerize with Docker
Dockerfile:
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
CMD ["node", "src/server.js"]
Enter fullscreen mode
Exit fullscreen mode
Build and run locally:
docker build -t nodejs-kubernates .
docker run -p 5000:5000 \
-e MONGO_URI=mongodb://host.docker.internal:27017/product-api \
nodejs-kubernates
Enter fullscreen mode
Exit fullscreen mode
☸️ Step 3 — Kubernetes Manifests
Deployment (deployment.yaml)
apiVersion: apps/v1
kind: Deployment
metadata:
name: product-api
spec:
replicas: 2
selector:
matchLabels:
app: product-api
template:
metadata:
labels:
app: product-api
spec:
containers:
- name: product-api
image: <REGISTRY>/nodejs-kubernates:latest
ports:
- containerPort: 5000
env:
- name: MONGO_URI
valueFrom:
secretKeyRef:
name: app-secrets
key: MONGO_URI
Enter fullscreen mode
Exit fullscreen mode
Service (service.yaml)
apiVersion: v1
kind: Service
metadata:
name: product-api-svc
spec:
selector:
app: product-api
ports:
- port: 80
targetPort: 5000
type: ClusterIP
Enter fullscreen mode
Exit fullscreen mode
Ingress (ingress.yaml)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
name: product-api-ingress
annotations:
kubernetes.io/ingress.class: alb
spec:
rules:
- http:
paths:
- path: /
pathType: Prefix
backend:
service:
name: product-api-svc
port:
number: 80
Enter fullscreen mode
Exit fullscreen mode
Secrets (secret.yaml)
apiVersion: v1
kind: Secret
metadata:
name: app-secrets
type: Opaque
data:
MONGO_URI: <base64-encoded-uri>
Enter fullscreen mode
Exit fullscreen mode
Encode your Mongo URI:
echo -n "mongodb://user:pass@host:27017/product-api" | base64
Enter fullscreen mode
Exit fullscreen mode
HPA (hpa.yaml)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
name: product-api-hpa
spec:
scaleTargetRef:
apiVersion: apps/v1
kind: Deployment
name: product-api
minReplicas: 2
maxReplicas: 10
metrics:
- type: Resource
resource:
name: cpu
target:
type: Utilization
averageUtilization: 70
Enter fullscreen mode
Exit fullscreen mode
🚀 Step 4 — Deploy to Kubernetes
Push your Docker image to a registry (DockerHub, AWS ECR, GCP Artifact Registry).
Apply manifests:
kubectl apply -f k8s/
Enter fullscreen mode
Exit fullscreen mode
Check status:
kubectl get pods
kubectl get svc
kubectl get ingress
Enter fullscreen mode
Exit fullscreen mode
Access the API:
curl http://<INGRESS-HOST>/api/products
Enter fullscreen mode
Exit fullscreen mode
📊 Step 5 — Scaling & Monitoring
HPA automatically scales pods between 2–10 based on CPU/memory usage.
Liveness & Readiness probes ensure only healthy pods receive traffic.
Logging & Monitoring: Add Prometheus + Grafana, or pipe logs to ELK/CloudWatch.
🔒 Production Considerations
Use managed MongoDB (Atlas, DocumentDB).
Enable TLS/HTTPS for ingress (cert-manager + Let’s Encrypt).
Store secrets in Kubernetes Secrets or external vaults.
Define resource requests & limits for predictable scaling.
Add a CI/CD pipeline to build, push, and deploy automatically.
🎯 Conclusion
You’ve just deployed a Node.js Product API on Kubernetes with:
✅ Dockerized app
✅ Kubernetes Deployment, Service & Ingress
✅ Secrets for sensitive data
✅ Auto-scaling with HPA
This setup provides a strong foundation for microservices in production.
🔗 GitHub Repository: manthanank/nodejs-kubernates
🧑‍💻 Author: Manthan Ankolekar
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
•
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Manthan Ankolekar
Follow
Software Developer | JavaScript | Angular | Nodejs | MongoDB | Express.js | Python | Firebase | MySQL | Postgresql |
Location
Karnataka, India
Education
Bachelor of Engineering in Computer Science
Work
Software Developer
Joined
Feb 21, 2021
More from Manthan Ankolekar
🚀 Deploying a Node.js CRUD App on AWS with Terraform
#node
#aws
#terraform
#webdev
Terraform Setup Guide: Getting Started with Infrastructure as Code
#terraform
#webdev
#beginners
#devops
Essential Terraform CLI Commands You Should Know
#terraform
#webdev
#programming
#beginners
💎 DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community — A space to discuss and keep up software development and manage your software career
Home
DEV++
Reading List
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Free Postgres Database
Software comparisons
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem — the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community © 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account