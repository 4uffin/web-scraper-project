Use SVG Sprites to Make Your React App Load Faster - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SREâ€”the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project â€” features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Cryptoâ€”from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Gouranga Das Samrat
Posted on Sep 14
Use SVG Sprites to Make Your React App Load Faster
#tutorial
#javascript
#performance
#react
Iâ€™ve stared at my React appâ€™s bundle size ballooning, cursing every SVG icon I lovingly crafted for that polished UI. Heavy icons frustrate users and tank performance. Slow page loads and bloated bundles are a developerâ€™s nightmare, nobody wants their app to feel like itâ€™s an amateurâ€™s work.
Thereâ€™s a better way to load SVG icons that keeps your app snappy and your users happy, without ditching those crisp visuals.
The Naive Approach
I used to inline every SVG directly in my components or import them as React components. Itâ€™s straightforward but bloats the bundle, each iconâ€™s XML adds kilobytes, and duplicated icons across views compound the pain. Network requests pile up, and users wait longer for the app to render.
The Smarter Approach
Enter the SVG tag, a lightweight way to reference icons from a single sprite. Itâ€™s like a Progressive JPEG for icons: load once, reuse everywhere. The catch? You need a sprite file, but itâ€™s a small price for slashing bundle size.
The first step is to create a single .svg file that will reference several icons:
<svg
xmlns="http://www.w3.org/2000/svg"
xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: none"
>
<symbol id="arrow-right" viewBox="0 0 24 24">
<path
d="m16.172 11-5.364-5.364 1.414-1.414L20 12l-7.778 7.778-1.414-1.414L16.172 13H4v-2h12.172Z"
/>
</symbol>
<symbol id="arrow-left" viewBox="0 0 24 24">
<path
d="M7.828 11H20v2H7.828l5.364 5.364-1.414 1.414L4 12l7.778-7.778 1.414 1.414L7.828 11Z"
/>
</symbol>
</svg>
Enter fullscreen mode
Exit fullscreen mode
Letâ€™s see how to use that sprite file to load icon:
<svg>
<use href="/images/icons/sprite.svg#arrow-right"></use>
</svg>
Enter fullscreen mode
Exit fullscreen mode
Host a sprite.svg file with all your icons as elements, then reference them by ID. Bundle size shrinks since youâ€™re not duplicating SVG code.
Reducing The Sprite Size
Sprites are great, but a fat sprite can still slow your initial load. To improve performance, split your sprite into individual files.
<!-- arrow-left.svg -->
<svg
xmlns="http://www.w3.org/2000/svg"
xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: none"
>
<symbol id="icon" viewBox="0 0 24 24">
<path
d="M7.828 11H20v2H7.828l5.364 5.364-1.414 1.414L4 12l7.778-7.778 1.414 1.414L7.828 11Z"
/>
</symbol>
</svg>
<!-- arrow-right.svg -->
<svg
xmlns="http://www.w3.org/2000/svg"
xmlns:xlink="http://www.w3.org/1999/xlink"
style="display: none"
>
<symbol id="icon" viewBox="0 0 24 24">
<path
d="m16.172 11-5.364-5.364 1.414-1.414L20 12l-7.778 7.778-1.414-1.414L16.172 13H4v-2h12.172Z"
/>
</symbol>
</svg>
Enter fullscreen mode
Exit fullscreen mode
This is how you can use it:
<svg>
<use href="/images/icons/arrow-right.svg#icon"></use>
</svg>
Enter fullscreen mode
Exit fullscreen mode
Bonus: Browser cache is doing its work. Icons will load instantly after first use.
The Lazy-Loading Refinement
The sprite approach is slick, but loading a massive sprite upfront can still choke initial render. Lazy-load the sprite only when icons are needed.
The Lazy-Loading Refinement
Use Intersection Observer to load icons only when theyâ€™re in the viewport. Itâ€™s like deferring dessert until youâ€™re ready to eat, why load what users canâ€™t see? This cuts unnecessary network requests on long pages.
// @/components/icon.tsx
// This code implements lazy loading for SVG icons using the Intersection Observer API.
type Props = React.SVGProps<SVGSVGElement> & {
code: string,
};
export default function Icon({ code, ...props }: Props) {
// Creates a ref to track the SVG element
const ref = React.useRef < SVGSVGElement > null;
// Uses useState to track if the icon is in viewport
const [inView, setInView] = React.useState(false);
React.useEffect(() => {
// Checks if IntersectionObserver is supported by the browser
const isCompatible = "IntersectionObserver" in window;
if (isCompatible) {
const svg = ref.current;
// Checks if not already inView before setting the observer
if (svg && !inView) {
// Creates an observer that triggers when icon enters viewport
const observer = new IntersectionObserver(
([entry]) => {
if (entry.isIntersecting) {
setInView(true);
}
},
// Adds a root margin to trigger the observer a bit earlier: 24px before svg enters the viewport
{ rootMargin: "24px" }
);
// Sets up observation of the SVG element on mount
observer.observe(svg);
return () => {
// Cleans up by unobserving when icon is inView or unmounted
observer.unobserve(svg);
};
}
} else {
// Falls back to always showing the icon
setInView(true);
}
}, [inView]);
// Only sets the SVG reference when icon is in view
// Prevents unnecessary loading of SVG icons outside viewport
const href = inView ? `/images/icons/${code}.svg#icon` : undefined;
return (
<svg ref={ref} width={24} height={24} {...props}>
{href && <use href={href} />}
</svg>
);
}
Enter fullscreen mode
Exit fullscreen mode
This only fetches the icon when itâ€™s visible. Itâ€™s overkill for small apps but shines on content-heavy pages.
Final Takeaway
This isnâ€™t the only way to optimize icons, experiment with code-splitting or CDN-hosted sprites. Tweak it, test it, share your hacks.
Follow for more React performance tips!
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
â€¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Gouranga Das Samrat
Follow
Front-end Web Developer | UI/UX Designer | JavaScript & React Expert | Open Source Enthusiast | Lifelong Learner
Location
Khulna, Bangaldldesh
Education
Khulna Government Model School & College
Joined
Oct 10, 2024
More from Gouranga Das Samrat
ECMAScript 2025: Breaking Down the Latest JavaScript Enhancements
#javascript
#news
#tutorial
Smarter Error Handling in JavaScript: Group, Donâ€™t Panic
#javascript
#programming
#webdev
ðŸ’Ž DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community â€” A space to discuss and keep up software development and manage your software career
Home
DEV++
Welcome Thread
Reading List
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Free Postgres Database
Software comparisons
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem â€” the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community Â© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account