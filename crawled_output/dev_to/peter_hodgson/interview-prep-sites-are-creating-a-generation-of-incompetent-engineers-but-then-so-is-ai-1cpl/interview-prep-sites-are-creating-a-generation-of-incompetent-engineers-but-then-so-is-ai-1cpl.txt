Interview Prep Sites Are Creating a Generation of Incompetent Engineers (but then so is AI) - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE‚Äîthe hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project ‚Äî features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto‚Äîfrom Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Peter Hodgson
Posted on Sep 13
Interview Prep Sites Are Creating a Generation of Incompetent Engineers (but then so is AI)
#career
#interview
#ai
#webdev
I've been a senior software engineer at three Fortune 500 companies over the past decade. I've interviewed hundreds of candidates, mentored dozens of junior developers, and watched the industry evolve in ways that annoy and frustrate me.
We have a problem. An stupid one.
Sites like HackerPrep.io, with their databases of "leaked" interview questions and promise of guaranteed job offers, aren't just changing how people prepare for interviews‚Äîthey're fundamentally breaking the software engineering profession. And now, with AI coding assistants becoming ubiquitous, we're facing a two-pronged assault on engineering competence that's creating a generation of developers who can't actually develop.
The Pattern Matching Epidemic
Last month, I interviewed a candidate who nailed our classic "design a URL shortener" question. Perfect system architecture, elegant database schema, even discussed edge cases around rate limiting. I was impressed.
Then I asked a simple follow-up - I can't remember exactly what it was.. something about debug high memory usage or something..
Anyway, point is - I was met with the classic Gen Z stare. Complete silence. This "senior" candidate, who had just designed a distributed system, couldn't explain basic memory profiling.
This is the Interview Prep generation.
They've memorized solutions to a handful of interview questions but can't think through a problem they haven't seen before. It almost feels like they've been spoon fed through vibe coding tools. Then when they're required to put in the hard miles they resort to sites like hackerprep. They know that "consistent hashing" is the answer to scalability questions but don't understand why. They can recite the time complexity of every sorting algorithm but when I actually showed a selection sort to a candidate they couldn't recognise it or its time complexity üßê Something was up...
The AI Amplification Problem
But here's where it gets worse: these same pattern-matching candidates are now entering the workforce armed with AI coding assistants. What should be powerful tools for experienced engineers have become crutches for those who never learned to walk.
I recently had a junior developer on my team spend three days trying to implement a basic authentication system. When I asked to see their approach, I discovered they had been copying and pasting AI-generated code without understanding any of it. When the generated code inevitably had bugs, they couldn't debug it because they didn't understand what it was supposed to do.
The AI wasn't the problem‚Äîthe lack of fundamental understanding was. A competent engineer would have used AI to accelerate their work, not replace their thinking. But when you combine HackerPrep's pattern-matching mentality with AI's ability to generate code, you get developers who can produce a lot of code very quickly without learning anything.
The False Confidence Crisis
Here's what's actually happening in our industry:
Before HackerPrep/AI Era (2015-2020):
Candidates were nervous but honest about knowledge gaps
Junior developers knew they were junior
Learning curves were expected and planned for
Real problem-solving skills developed organically
Code was written with intent and understanding
After HackerPrep/AI Era (2021-Present):
Candidates exhibit false confidence in areas they've "studied"
New hires expect senior-level responsibilities immediately
Managers waste months trying to "develop" engineers who can't learn
Production incidents increase as pattern-matchers meet real problems
Code is generated without comprehension, creating technical debt and security vulnerabilities
The Data Doesn't Lie
I surveyed 50+ engineering managers in my network. The results are damning:
78% report that new hires in the last 2 years struggle more with real work despite performing better in interviews
65% have had to fire someone within 6 months who "aced" the technical interviews
89% believe interview performance has become a poor predictor of job performance
72% have noticed new hires over-relying on AI tools for tasks they should understand fundamentally
One engineering director at a major fintech company told me: "We're seeing candidates who can solve LeetCode Hard problems but can't read a stack trace or understand a simple API response. And now they're using ChatGPT to write code they can't debug. It's like they've been trained for a completely different job."
The Assault on Engineering Discipline
What we're witnessing is nothing less than an assault on the engineering discipline itself. Software engineering has always been about understanding systems, reasoning through problems, and building solutions with intention and care. It requires patience, curiosity, and the willingness to struggle through difficult concepts until you truly understand them.
Interview prep sites attack this discipline by teaching shortcuts instead of understanding. They promise quick wins through memorization rather than the deep learning that comes from building real systems. They optimize for gaming interviews rather than developing competence.
AI tools, when misused, amplify this attack by removing the struggle that creates learning. When a junior developer can ask ChatGPT to "write a function that does X" and get working code instantly, they miss the crucial process of thinking through the problem, considering edge cases, and understanding the trade-offs in their implementation.
The result? A generation of developers who can produce code quickly but can't reason about it, debug it, or adapt it when requirements change.
A Message to New Engineers: Don't Cheat Yourself
If you're starting your engineering career, I have a message for you: Don't cheat yourself out of becoming a real engineer.
Yes, HackerPrep might help you pass interviews. Yes, AI can help you write code faster. But neither of these shortcuts will make you competent at the job you're trying to get.
Here's what real engineering competence looks like:
You can read an error message and understand what went wrong
You can look at a piece of code and predict how it will behave
You can debug issues by forming hypotheses and testing them systematically
You can make trade-offs between different technical approaches based on business requirements
You can learn new technologies by understanding how they relate to concepts you already know
This competence comes from doing the hard miles‚Äîthe hours spent debugging, the frustration of trying to understand why something doesn't work, the gradual building of mental models through experience and practice.
Use AI as a tool, not a replacement for thinking. When ChatGPT generates code for you, take the time to understand every line. When you use it to explain a concept, verify that explanation by implementing it yourself. When it helps you debug, make sure you understand why the solution works.
Skip the interview prep shortcuts. Instead of memorizing 500 algorithm problems, build real projects. Contribute to open source. Deploy something to production and deal with the inevitable issues that arise. These experiences will teach you more about software engineering than any amount of pattern memorization.
The Innovation Killer
Software engineering is fundamentally about solving problems that haven't been solved before. Yes, we build on existing patterns and practices, but the magic happens in the adaptation, the creative combination of ideas, the insight that comes from deep understanding.
Both HackerPrep and AI misuse optimize for the opposite of this.
HackerPrep trains people to recognize problems they've seen before and apply memorized solutions. AI misuse encourages developers to generate solutions without understanding them. Both reward pattern matching over creative thinking, speed of output over depth of understanding.
The result? A generation of developers who can implement existing solutions quickly but struggle to innovate, optimize, or adapt when requirements change.
What's the Alternative?
Some will argue: "If you don't like HackerPrep and AI assistance, what should candidates do instead?"
Here's a radical idea: Learn to actually engineer software.
Build real projects that solve real problems
Contribute to open source software
Learn by debugging issues in production systems
Understand the why behind architectural decisions, not just the what
Develop the ability to think through problems systematically
Use AI as a tool to amplify your understanding, not replace it
Practice explaining your code to others‚Äîif you can't explain it, you don't understand it
Yes, this takes longer than memorizing 500 interview questions or learning to prompt AI effectively. Yes, it's harder than buying access to a database of leaked questions or generating code you don't understand. But it creates engineers who can actually do the job they're being hired for.
Root Cause
Here's an uncomfortable truth that the industry needs to face: HackerPrep exists and thrives because we, as interviewers and companies, helped create the demand for it.
Every time we've subjected a candidate to a needlessly adversarial interview process, we've contributed to the problem. Every time we've asked someone to solve a puzzle on a whiteboard while three senior engineers watched judgmentally, we've planted the seeds of revenge. Every time we've rejected a competent engineer because they couldn't recall the optimal solution to a contrived algorithm problem under pressure, we've driven them toward memorization-based prep.
HackerPrep's growth isn't just about candidates wanting to game the system‚Äîit's about candidates feeling unfairly judged and wanting some measure of control in a process that often seems designed to humiliate them. When someone gets rejected after a grueling six-hour interview marathon because they couldn't implement a red-black tree on demand, their first instinct isn't "I should study data structures deeper." It's "I should find out what questions this company asks and memorize the answers."
And you know what? They're not entirely wrong to feel that way.
A Call to Action
If you're an interviewer: Treat candidates with empathy. Make interviews collaborative, not adversarial. Focus on thought process over memorized solutions. Every positive interview experience reduces demand for prep services like HackerPrep.
If you're a candidate: Build real projects. Learn fundamentals. Use AI as a tool, not a replacement for thinking. Don't let bad interview experiences drive you toward shortcuts‚Äîseek companies that conduct respectful interviews instead.
If you're a senior engineer: Speak up against both poor hiring decisions and unnecessarily hostile interview processes. Mentor juniors to use AI responsibly.
If you work for HackerPrep: Ask yourself‚Äîare you selling engineering competence or just exploiting a broken system?
To new engineers: Don't cheat yourself out of real competence. Do the hard miles. The industry needs engineers who can actually engineer, not just people who can game interviews.
The future of our profession depends on choosing substance over shortcuts.
Top comments (2)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Collapse
Expand
Dexter Nash
Dexter Nash
Dexter Nash
Follow
Joined
Sep 13, 2025
‚Ä¢
Sep 15
Dropdown menu
Copy link
Hide
You want to talk about "soft-brained" engineers? Let's talk about an industry that thinks inverting binary trees has anything to do with building software in 2025. Your "golden age" was never about finding the best engineers‚Äîit was about maintaining an exclusive club where success depended on CS degree pedigree rather than actual problem-solving ability. We didn't break your system; we just gave people the tools to succeed in it. Every time you subject a candidate to a hostile interview process, you create another person looking for community and support.
I'm the founder of HackerPrep.io and I actually think what we're trying to build is something really cool and authentic and beautiful - engineers are coming together to support one another through a challenging process (by challenging process ;). Our users aren't cheating‚Äîthey're smart enough to do their research and help each other succeed.
Like comment:
Like comment:
2¬†likes
Like
Comment button
Reply
Collapse
Expand
Peter Hodgson
Peter Hodgson
Peter Hodgson
Follow
Software Engineer @ Trading Company | 7 years building systems
Currently working on high-performance trading systems. Previously led engineering teams. Love solving complex problems with clean code.
Education
School of life / Self taught
Pronouns
He/Him
Work
Open to work
Joined
Sep 13, 2025
‚Ä¢
Sep 15
Dropdown menu
Copy link
Hide
I guess I should feel privileged for the founder HackerPrep to respond to my post... I don't.
Like comment:
Like comment:
1¬†like
Like
Comment button
Reply
Code of Conduct
‚Ä¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Peter Hodgson
Follow
Software Engineer @ Trading Company | 7 years building systems
Currently working on high-performance trading systems. Previously led engineering teams. Love solving complex problems with clean code.
Education
School of life / Self taught
Pronouns
He/Him
Work
Open to work
Joined
Sep 13, 2025
Trending on DEV Community
Hot
How to Set Up a CI/CD Pipeline on Azure Cloud
#webdev
#programming
#ai
#javascript
I created a small 2D game about an ant :)
#webdev
#javascript
#programming
#opensource
Perplexity Email Assistant: Smarter Inbox Automation That Works
#perplexity
#email
#automation
#ai
üíé DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community ‚Äî A space to discuss and keep up software development and manage your software career
Home
Welcome Thread
Reading List
Tags
About
Contact
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community ¬© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account