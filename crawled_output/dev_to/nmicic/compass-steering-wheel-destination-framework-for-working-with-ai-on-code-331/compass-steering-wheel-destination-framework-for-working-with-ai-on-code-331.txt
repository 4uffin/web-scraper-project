Compass, Steering Wheel, Destination ‚Äî Framework for Working with AI on Code - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE‚Äîthe hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project ‚Äî features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto‚Äîfrom Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Nenad Micic
Posted on Sep 15
Compass, Steering Wheel, Destination ‚Äî Framework for Working with AI on Code
#promptengineering
#softwareengineering
#ai
#productivity
I'm sharing this with the team as a summary of my personal workflow when working with AI on code. It's not an official framework, but rather a set of learnings from experience (polished with a little help from AI, of course). My main goal is to start a conversation. If you have a better or similar workflow, I'd genuinely love to hear about it.
Compass, Steering Wheel, Destination ‚Äî Framework for Working with AI on Code
AI can accelerate coding, but it can also drift, hallucinate requirements, or produce complex solutions without a clear rationale.
This framework provides the guardrails to keep AI-assisted development focused, deliberate, and well-documented.
Sailing Analogy (High-Level Intro)
Working with AI on code is like sailing:
Compass ‚Üí Keeps you oriented to true north (goals, requirements, assumptions).
Steering Wheel ‚Üí Lets you pivot, tack, or hold steady (decide continue vs. change).
Destination Map ‚Üí Ensures the journey is recorded (reusable, reproducible outcomes).
This framework grew out of real-world experience. It‚Äôs not brand new theory, but a way to formalize a shared language for teams working with AI.
Step 1: Compass (Revalidation)
Purpose: keep alignment with goals and assumptions.
Template (copy/paste):
What‚Äôs the primary goal?
What‚Äôs the secondary/nice-to-have goal?
Which requirements are mandatory vs optional?
What are the current assumptions? Which may be invalid?
Has anything in the context changed (constraints, environment, stakeholders)?
Are human and AI/system understanding still in sync?
Any signs of drift (scope creep, contradictions, wrong optimization target)?
Step 2: Steering Wheel (Course Correction)
Purpose: evaluate if we should continue, pivot, or stop.
Template (copy/paste):
For each assumption: what if it‚Äôs false?
Does an existing tool/library cover ‚â•80%?
Does this map to an existing framework/pattern (ADR, RFC, design template)?
Alternatives:
Different algorithm/data structure?
Different architecture (batch vs streaming, CPU vs GPU, local vs distributed)?
Different representation (sketches, ML, summaries)?
Different layer (infra vs app, control vs data plane)?
Trade-offs:
Fit with requirements.
Complexity (build & maintain).
Time-to-value.
Risks & failure modes.
Other checks:
Overhead vs value: is the process slowing iteration?
Niche & opportunity: is this idea niche or broadly useful? Where does it fit in the landscape?
Kill/Go criteria:
Kill if effort > value, assumptions broken.
Go if results justify effort or uniqueness adds value.
Next step options:
Continue current path.
Pivot to alternative.
Stop and adopt existing solution.
Run a 1-day spike to test a risky assumption.
Step 3: Destination (Reverse Prompt)
Purpose: capture the outcome in reusable, reproducible form.
Template (copy/paste):
Instructions
Restate my request so it can be reused to regenerate the exact same code and documentation.
Include a clear summary of the key idea(s), algorithm(s), and reasoning that shaped the solution.
Preserve wording, structure, and order exactly ‚Äî no ‚Äúhelpful rewrites‚Äù or ‚Äúimprovements.‚Äù
Reverse Prompt (regeneration anchor)
Problem restatement (1‚Äì2 sentences).
Key algorithm(s) in plain language.
Invariants & assumptions (what must always hold true).
Interfaces & I/O contract (inputs, outputs, error cases).
Config surface (flags, environment variables, options).
Acceptance tests / minimal examples (clear input ‚Üí output pairs).
High-Level Design (HLD)
Purpose: what the system solves and why.
Key algorithm(s): step-by-step flow, core logic, choice of data structures.
Trade-offs: why this approach was chosen, why others were rejected.
Evolution path: how the design changed from earlier attempts.
Complexity and bottlenecks: where it might fail or slow down.
Low-Level Design (LLD)
Structure: files, functions, modules, data layouts.
Control flow: inputs ‚Üí processing ‚Üí outputs.
Error handling and edge cases.
Configuration and options, with examples.
Security and reliability notes.
Performance considerations and optimizations.
Functional Spec / How-To
Practical usage with examples (input/output).
Config examples (simple and advanced).
Troubleshooting (common errors, fixes).
Benchmarks (baseline numbers, reproducible).
Limits and gotchas.
Roadmap / extensions.
Critical Requirements
Always present HLD first, then LLD.
Emphasize algorithms and reasoning over just the raw code.
Clearly mark discarded alternatives with reasons.
Keep the response self-contained ‚Äî it should stand alone as documentation even without the code.
Preserve the code exactly as it was produced originally. No silent changes, no creative rewrites.
When & Why to Use Each
Compass (Revalidation):
Use at the start or whenever misalignment is suspected (context drift, new requirements).
Steering Wheel (Course Correction):
Use at milestones or retrospectives to decide continue, pivot, or stop.
Destination (Reverse Prompt):
Use at the end of a cycle/project to capture reproducible documentation & handover artifacts.
References & Correlations
This framework is simple, but it builds on proven practices:
Systems Engineering: Verification & Validation (build the right thing).
Agile: Sprint reviews (revalidation), retrospectives (course correction).
Lean Startup: Pivot vs. persevere decisions.
Architecture Practices: ADRs (decision rationale, alternatives).
AI Prompt Engineering: Reusable prompt templates & libraries.
Human-in-the-Loop Design: Oversight to prevent drift in AI systems.
By combining them under a sailing metaphor, the framework becomes:
Easy to remember.
Easy to communicate inside teams.
Easy to apply in AI-assisted coding where drift, misalignment, and reusability are everyday challenges.
Closing Note
Think of this as a playbook, not theory. Next time in a session, just say:
‚ÄúCompass check‚Äù ‚Üí Revalidate assumptions/goals.
‚ÄúSteering wheel‚Äù ‚Üí Consider pivot/alternatives.
‚ÄúDestination‚Äù ‚Üí Capture reproducible docs.
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
‚Ä¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Nenad Micic
Follow
https://be.linkedin.com/in/nenadmicic
Location
Brussels
Work
PE @cisco
Joined
Sep 15, 2025
Trending on DEV Community
Hot
‚ö°9 AI Tools you cannot afford to miss in 2025! üöÄüî•
#productivity
#ai
#opensource
#discuss
Meme Monday
#discuss
#watercooler
#jokes
"Your Profile Doesn't Match the Role" and Other Interview Horror Stories
#watercooler
#career
#interview
#discuss
üíé DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community ‚Äî A space to discuss and keep up software development and manage your software career
Home
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community ¬© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account