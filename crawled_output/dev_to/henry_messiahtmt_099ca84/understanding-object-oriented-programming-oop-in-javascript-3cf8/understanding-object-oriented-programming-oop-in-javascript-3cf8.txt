Understanding Object-Oriented Programming (OOP) in JavaScript - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE—the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project — features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto—from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
henry messiah tmt
Posted on Sep 13
Understanding Object-Oriented Programming (OOP) in JavaScript
#programming
#tutorial
#beginners
#javascript
Introduction
Programming is much like building a city. You don’t throw bricks, cement, and metal randomly together, instead you carefully organize them into structures like houses, schools, and hospitals. In the same way, coding requires structure and organization to make programs easy to build, extend, and maintain.
This is where Object-Oriented Programming (OOP) comes in. OOP is a programming paradigm that allows developers to model real-world entities as objects with properties (data) and behaviors (functions). In JavaScript, OOP is extremely powerful because it makes your code reusable, scalable, and easier to understand.
Understanding OOP in JavaScript is important because it gives you the foundation to work on complex projects, collaborate with teams, and write clean, modular code that mirrors real-life situations.
In this tutorial, we aim to simplify the concept of Object-Oriented Programming (OOP) and make it easy to understand for learners at all levels. By the end of this guide, readers will not only grasp the fundamental principles of OOP but will also be able to confidently apply them in building both simple and complex projects.
What is Object-Oriented Programming (OOP)?
Object-Oriented Programming (OOP) is a way of writing code where you structure it around objects. An object is a collection of properties (attributes) and methods (functions) that describe and control a specific thing.
JavaScript, unlike some traditional OOP languages like Java or C++, is prototype-based, but with the introduction of ES6, we now have the class syntax that makes OOP in JavaScript more familiar and readable.
Core Principles of OOP in JavaScript
There are four main pillars of OOP. Let’s break them down:
Encapsulation: Bundling related data and methods together inside a single object while restricting direct access to certain parts.
Abstraction: Hiding complex details and exposing only the essentials.
Inheritance: Allowing one class (child) to acquire properties and methods of another (parent).
Polymorphism: The ability for the same method or function to behave differently depending on the context.
Real-World Analogy of OOP
Imagine you’re designing a Car System:
• Encapsulation: The car has properties like color, brand, and engineType, and methods like startEngine() or applyBrakes(). You don’t directly control how the engine works internally, you just start it.
• Abstraction: You turn the steering wheel to change direction but you don’t need to know the complex physics behind it.
• Inheritance: A SportsCar can inherit features of a general Car but have additional features like turboBoost().
• Polymorphism: The method drive() can mean different things depending on whether it’s a Car, a Bike, or a Truck.
This structure makes the car system easier to understand, expand, and maintain. The same applies to code.
OOP in JavaScript with Examples
Encapsulation (Creating a Class)
Encapsulation means bundling data (properties) and methods (functions) into one unit (class).
// Encapsulation example with a Car class
class Car {
// The constructor is used to initialize object properties
constructor(brand, color) {
this.brand = brand; // property to store the car brand
this.color = color; // property to store the car color
}
// Method to start the car engine
startEngine() {
// Access the car's brand property
console.log(`${this.brand} engine started!`);
}
}
// Create a new object (instance) of the Car class
const myCar = new Car("Toyota", "Red");
// Call the method to start the engine
myCar.startEngine(); // Output: Toyota engine started!
Enter fullscreen mode
Exit fullscreen mode
2. Abstraction
Abstraction hides unnecessary details and exposes only the essential methods.
// Abstraction example with a BankAccount class
class BankAccount {
constructor(owner, balance) {
this.owner = owner; // account owner's name
// Private variable to hold the balance
// It cannot be accessed directly outside the class
let _balance = balance;
// Method to check current balance (controlled access)
this.getBalance = function() {
return _balance;
};
// Method to deposit money (changes balance internally)
this.deposit = function(amount) {
_balance += amount;
console.log(`Deposited ${amount}. New balance: ${_balance}`);
};
}
}
// Create a new bank account with an initial balance of 1000
const account = new BankAccount("Peace", 1000);
// Deposit money using the provided method
account.deposit(500); // Output: Deposited 500. New balance: 1500
// Access the balance safely through the method
console.log(account.getBalance()); // Output: 1500
// Direct access like account._balance is not possible (hidden!)
Enter fullscreen mode
Exit fullscreen mode
3. Inheritance
Inheritance allows one class to acquire the properties and methods of another.
// Parent class Vehicle
class Vehicle {
constructor(type) {
this.type = type; // type of vehicle (e.g., Car, Bike, Truck)
}
// Method for movement
move() {
console.log(`${this.type} is moving...`);
}
}
// Child class Bike extends Vehicle
class Bike extends Vehicle {
constructor(type, brand) {
// super() calls the parent class constructor
super(type);
this.brand = brand; // brand of the bike
}
// Override the parent move() method with custom behavior
move() {
console.log(`${this.brand} ${this.type} is speeding away!`);
}
}
// Create an instance of Bike
const myBike = new Bike("Motorbike", "Yamaha");
// Call the overridden method
myBike.move(); // Output: Yamaha Motorbike is speeding away!
Enter fullscreen mode
Exit fullscreen mode
4. Polymorphism
Polymorphism allows the same method name to behave differently depending on the object.
// Parent class Animal
class Animal {
// Default method for speaking
speak() {
console.log("This animal makes a sound.");
}
}
// Child class Dog overrides speak()
class Dog extends Animal {
speak() {
console.log("Woof! Woof!");
}
}
// Child class Cat overrides speak()
class Cat extends Animal {
speak() {
console.log("Meow!");
}
}
// Create an array of different animals
const animals = [new Dog(), new Cat(), new Animal()];
// Each object responds differently to the same method call
animals.forEach(animal => animal.speak());
/* Output:
Woof! Woof!
Meow!
This animal makes a sound.
*/
Enter fullscreen mode
Exit fullscreen mode
Importance Of OOP Matters in JavaScript
1. Code Reusability
• With OOP, you can create reusable classes or objects that can be used across different parts of your application.
• Example: A User class with login/logout methods can be reused in multiple projects.
2. Modularity (Better Organization)
• OOP helps break down complex code into smaller, manageable pieces (classes/objects).
• Each object focuses on one specific task, making the codebase easier to navigate and maintain.
3. Encapsulation (Data Hiding & Security)
• OOP allows you to hide the internal implementation of an object and expose only what’s necessary.
• Example: Instead of directly changing a bank account’s balance, you might only allow deposits/withdrawals through specific methods.
4. Inheritance (Avoiding Duplication)
• You can create a parent class with common properties and methods, and let child classes inherit them.
• This reduces duplication of code and enforces consistency.
• Example: A Vehicle class → extended by Car, Bike, Bus.
5. Polymorphism (Flexibility & Extensibility)
• Objects can share the same interface but behave differently based on the context.
• Example: A draw() method might render a circle, square, or triangle differently depending on the object.
6. Improved Maintainability
• Since OOP structures your code in clear, self-contained objects, it becomes easier to fix bugs, add features, or make changes without breaking other parts.
7. Scalability (Good for Large Applications)
• Large projects (like web apps, games, and enterprise software) benefit from OOP because it makes it easier to manage growing codebases.
8. Real-World Modeling
• OOP mirrors real-world entities (users, products, orders, etc.), making the design more intuitive.
• Example: In an e-commerce app, you can have classes for Product, Cart, and Order that closely resemble real-world objects.
Conclusion
Object-Oriented Programming (OOP) in JavaScript is not just a concept — it’s a powerful way to think about code. By understanding encapsulation, abstraction, inheritance, and polymorphism, you can write cleaner, smarter, and more professional programs.
OOP is
like building blocks — once you master them, you can create applications as small as a calculator or as big as a social media platform.
Top comments (20)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Collapse
Expand
ADIKA DAVID
ADIKA DAVID
ADIKA DAVID
Follow
I'm a tech enthusiast
Joined
Aug 29, 2025
•
Sep 13
Dropdown menu
Copy link
Hide
Great write-up, Henry! The real-world analogies (especially the car system example) made the OOP concepts much clearer and relatable. I also like how you broke down encapsulation, abstraction, inheritance, and polymorphism in a beginner-friendly way. This will definitely help a lot of learners approach JavaScript OOP with more confidence. Looking forward to more tutorials from you. Cheers
Like comment:
Like comment:
3 likes
Like
Comment button
Reply
Collapse
Expand
henry messiah tmt
henry messiah tmt
henry messiah tmt
Follow
Pharmacist, software developer, Technical Writer.
Joined
Aug 28, 2025
•
Sep 13
Dropdown menu
Copy link
Hide
Thank you very much
Like comment:
Like comment:
1 like
Like
Comment button
Reply
Collapse
Expand
ADIKA DAVID
ADIKA DAVID
ADIKA DAVID
Follow
I'm a tech enthusiast
Joined
Aug 29, 2025
•
Sep 13
Dropdown menu
Copy link
Hide
Great write-up, Henry! 👏
The real-world analogies (especially the car system example) made the OOP concepts much clearer and relatable. I also like how you broke down encapsulation, abstraction, inheritance, and polymorphism in a beginner-friendly way. This will definitely help a lot of learners approach JavaScript OOP with more confidence. Looking forward to more tutorials from you. Cheers
Like comment:
Like comment:
2 likes
Like
Comment button
Reply
Collapse
Expand
henry messiah tmt
henry messiah tmt
henry messiah tmt
Follow
Pharmacist, software developer, Technical Writer.
Joined
Aug 28, 2025
•
Sep 13
• Edited on Sep 14
• Edited
Dropdown menu
Copy link
Hide
Thanks a lot
Like comment:
Like comment:
1 like
Like
Comment button
Reply
Collapse
Expand
Dr Mark
Dr Mark
Dr Mark
Follow
Great man , excellent Doctor
Joined
Sep 13, 2025
•
Sep 13
Dropdown menu
Copy link
Hide
This is the best OOP in JavaScript article I’ve ever seen. This article is both enthralling as well as educative with key concepts well explained in a simplified manner. Thanks for sharing this great piece
Like comment:
Like comment:
2 likes
Like
Comment button
Reply
Collapse
Expand
henry messiah tmt
henry messiah tmt
henry messiah tmt
Follow
Pharmacist, software developer, Technical Writer.
Joined
Aug 28, 2025
•
Sep 13
Dropdown menu
Copy link
Hide
Thank you very much
Like comment:
Like comment:
1 like
Like
Comment button
Reply
Collapse
Expand
EBIWENI LOKOJA
EBIWENI LOKOJA
EBIWENI LOKOJA
Follow
Joined
Aug 29, 2025
•
Sep 13
Dropdown menu
Copy link
Hide
When it comes to programming nobody does it better.
Thank you for the eye opener.
I'm learning every day
Like comment:
Like comment:
3 likes
Like
Comment button
Reply
Collapse
Expand
henry messiah tmt
henry messiah tmt
henry messiah tmt
Follow
Pharmacist, software developer, Technical Writer.
Joined
Aug 28, 2025
•
Sep 13
Dropdown menu
Copy link
Hide
Thanks for the nice comments
Like comment:
Like comment:
1 like
Like
Comment button
Reply
Collapse
Expand
Justin Ikakah
Justin Ikakah
Justin Ikakah
Follow
Joined
Aug 29, 2025
•
Sep 13
Dropdown menu
Copy link
Hide
Great piece of work
Like comment:
Like comment:
3 likes
Like
Comment button
Reply
Collapse
Expand
henry messiah tmt
henry messiah tmt
henry messiah tmt
Follow
Pharmacist, software developer, Technical Writer.
Joined
Aug 28, 2025
•
Sep 13
Dropdown menu
Copy link
Hide
Thanks
Like comment:
Like comment:
1 like
Like
Comment button
Reply
Collapse
Expand
Alexander Ogbu
Alexander Ogbu
Alexander Ogbu
Follow
An excellent clinical Pharmacist who is looking forward to becoming a developer.
Joined
Sep 4, 2025
•
Sep 13
Dropdown menu
Copy link
Hide
I always look forward to reading great write-up from this fellow. Keep up the good work. Cheers
Like comment:
Like comment:
2 likes
Like
Comment button
Reply
Collapse
Expand
henry messiah tmt
henry messiah tmt
henry messiah tmt
Follow
Pharmacist, software developer, Technical Writer.
Joined
Aug 28, 2025
•
Sep 14
Dropdown menu
Copy link
Hide
Thank you very much
Like comment:
Like comment:
1 like
Like
Comment button
Reply
Collapse
Expand
Ebiasuode felix konyefa
Ebiasuode felix konyefa
Ebiasuode felix konyefa
Follow
Joined
Sep 4, 2025
•
Sep 13
Dropdown menu
Copy link
Hide
Very impressive and carefully written…
👍👍
Like comment:
Like comment:
3 likes
Like
Comment button
Reply
Collapse
Expand
henry messiah tmt
henry messiah tmt
henry messiah tmt
Follow
Pharmacist, software developer, Technical Writer.
Joined
Aug 28, 2025
•
Sep 13
Dropdown menu
Copy link
Hide
Thanks
Like comment:
Like comment:
1 like
Like
Comment button
Reply
Collapse
Expand
Richard Ben
Richard Ben
Richard Ben
Follow
Joined
Sep 4, 2025
•
Sep 13
Dropdown menu
Copy link
Hide
Very interesting write up, thanks for sharing Henry.
Like comment:
Like comment:
3 likes
Like
Comment button
Reply
Collapse
Expand
henry messiah tmt
henry messiah tmt
henry messiah tmt
Follow
Pharmacist, software developer, Technical Writer.
Joined
Aug 28, 2025
•
Sep 13
Dropdown menu
Copy link
Hide
Thanks man
Like comment:
Like comment:
1 like
Like
Comment button
Reply
Collapse
Expand
Samuel Rouse
Samuel Rouse
Samuel Rouse
Follow
Tech generalist specializing in UI development. UI Architect by day. Playing with JavaScript for over 25 years.
Location
Maine
Pronouns
he/him
Work
UI Architect at Bottomline Technologies
Joined
May 10, 2022
•
Sep 15
Dropdown menu
Copy link
Hide
Thanks for posting this! While I mostly recommend against OOP in JavaScript, I think it's an important paradigm to understand.
I think your Abstraction section isn't ideal. The way you define _balance and the related methods inside the constructor mixes actual OOP with closures. The getBalance and deposit methods are not members of the class this way, they are redefined for each instance.
This was how we managed private values prior to ES2022 when Private elements were added to the spec.
Using the private elements simplifies the design makes use of class-level methods.
// Abstraction example with a BankAccount class
class BankAccount {
// Private variable to hold the balance
// It cannot be accessed directly outside the class
#balance
constructor(owner, balance) {
this.owner = owner; // account owner's name
this.#balance = balance;
}
// Method to check current balance (controlled access)
getBalance() {
return this.#balance;
}
// Method to deposit money (changes balance internally)
deposit(amount) {
this.#balance += amount;
console.log(`Deposited ${amount}. New balance: ${this.#balance}`);
}
}
// Create a new bank account with an initial balance of 1000
const account = new BankAccount("Peace", 1000);
// Deposit money using the provided method
account.deposit(500); // Output: Deposited 500. New balance: 1500
// Access the balance safely through the method
console.log(account.getBalance()); // Output: 1500
// Direct access like account.#balance is not possible (hidden!)
Enter fullscreen mode
Exit fullscreen mode
Like comment:
Like comment:
1 like
Like
Comment button
Reply
Collapse
Expand
sinni800
sinni800
sinni800
Follow
Joined
Jun 3, 2019
•
Sep 14
Dropdown menu
Copy link
Hide
Not the car analogy...
Also a lot of the "importances" are just really good weather sort of ideas. It does not guarantee reusability at all, for example, and with something like the "car analogy", it even guarantees that scalability will suffer. We should not model the code after the domain of the real world idea, but we should model it after the domain of concerns. Rather than making a car and "have the steering wheel take care of physics", make a physics class (or module). make subsystems that concern themselves with one technical concern, not with a domain concern.
Overall this article advertises the same tired way of doing things that has been making our applications slow and bad to maintain for a long time now. As a beginner of course someone would be impressed by it...
Uncle bob would be proud
what you should honestly do is watch this talk on the topic and maybe see what's going on youtu.be/wo84LFzx5nI
Like comment:
Like comment:
1 like
Like
Comment button
Reply
Collapse
Expand
henry messiah tmt
henry messiah tmt
henry messiah tmt
Follow
Pharmacist, software developer, Technical Writer.
Joined
Aug 28, 2025
•
Sep 14
Dropdown menu
Copy link
Hide
Thanks for your input.
Like comment:
Like comment:
1 like
Like
Comment button
Reply
View full discussion (20 comments)
Code of Conduct
•
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
henry messiah tmt
Follow
Pharmacist, software developer, Technical Writer.
Joined
Aug 28, 2025
More from henry messiah tmt
Understanding Encapsulation in JavaScript
#javascript
#programming
#tutorial
#learning
Understanding Polymorphism in JavaScript
#tutorial
#javascript
#programming
#learning
💎 DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community — A space to discuss and keep up software development and manage your software career
Home
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem — the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community © 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account