Learning Scala with chess #1 - Color and coordinates - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SREâ€”the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project â€” features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Cryptoâ€”from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
kaiba78987
Posted on Sep 14
Learning Scala with chess #1 - Color and coordinates
#scala
#chess
Hello! This is my first publication here. I appreciate any advice to improve my content. Thanks!
Overview
I first learned about Scala more than ten years ago in university. I couldnâ€™t understand how much powerful it is, but I kept a good feeling. This summer I decided to give it another chance. I got Programming in Scala, Fifth Edition. I really recommend this book if you are interested in learning Scala.
Once Iâ€™ve read this book, I wanted to consolidate my knowledge. One of my preferred hobbies is chess. I've been wanting to code something related to it for a while. So letâ€™s see how easy (or difficult) is implementing a chess domain with Scala!
I should clarify that it isn't a step-by-step tutorial. Itâ€™s more like a journal of my experience in which Iâ€™ll explain every concept I use. Iâ€™m going to prioritize my coding driven by the domain, not by the language. So maybe you can find this a bit chaotic. I promise to be as clear as possible.
Find the code
You will find all the code in my GitHub repository. It is licensed under GPL v3, so feel free!
Chess main concepts
Color or side
The first thing we think about chess is that one player moves the white pieces and the other one moves the black pieces. OK, this is a basic concept that we can model as an enumeration. Let's do it!
OK, so we have some common keywords such as package or enum. These are not new if you know Java or other languages. Attending to basic syntax, we notice that there arenâ€™t any curly brace () nor semicolon (;). These are not mandatory in Scala, because it is sensible to the indentation and the completion of the expressions.
Files and ranks
Another main concept of chess are the coordinates. These are used to refer to any of the squares in the board. Maybe youâ€™ve seen some numbers and letters around the board. These are the identifiers for files (letters) and ranks (numbers). A square is identified by the combination of both. There are many options to represent them, but Iâ€™m going to use enumerations too. This decision allows us to treat them as a complete algebraic type.
The enum Color was so easy. File and Rank are a bit more complex. They have a parameter. As you see, each value of the enumeration is an extension of the enumeration indeed, specifying the value of the parameter.
The enum types can also have methods. I defined next and previous to be able to navigate by the board. Scala doesnâ€™t have control of null values, but it uses Option instead. Option is a trait that has two different implementations: Some and None. In these methods, you can see how you can return them.
Talking about that, Scala doesnâ€™t need the return word! It simply returns the last expression in the code block. Moreover, control flow expressions such as if/else, also return values. This allow us to write the code like in these previous and next methods.
Coordinate
Finally, I combined files and ranks in the Coordinate case class. A case class in Scala is like records in Java. It defines a class with a default constructor that uses the parameters provided, equals and hashCode methodsâ€¦ In this case, I override the toString method to return the combination of file and rank. Note that Scala can use string interpolation. These allow us to use a reference to any variable in the scope with ${}, but we have to prefix the string with the character â€˜sâ€™.
I implemented methods to navigate around the board. They are based in the previous and next methods we implemented previously. Look how Scala provides a complete pattern matching feature so much more powerful than a simple switch structure. The north, south, east and west methods match the Option resulting of the application of next and previous methods on a file or a rank. It matches with Some(value) and we can use that value directly, or with None.
However, we can deal with more complex conditions. In the remaining methods, we match against a tuple of Option. Just imagine the kind of things we can easily do with this feature.
Conclusions
We saw some powerful features of Scala in this main concepts of chess. In the next chapter, I will present objects and traits to improve this design a bit more. See you!
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
â€¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
kaiba78987
Follow
Joined
Sep 9, 2025
Trending on DEV Community
Hot
What was your win this week?!
#weeklyretro
#discuss
The 90-Day Coding Routine That Made Me Think Like An Architect
#webdev
#programming
#ai
#discuss
Why Are You Not Reading My Post?
#tutorial
#discuss
#productivity
#career
ðŸ’Ž DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community â€” A space to discuss and keep up software development and manage your software career
PÃ¡gina Inicial
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
Sobre
Contato
Free Postgres Database
Software comparisons
Forem Shop
CÃ³digo de Conduta
PolÃ­tica de Privacidade
Termos de Uso
Built on Forem â€” the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community Â© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account