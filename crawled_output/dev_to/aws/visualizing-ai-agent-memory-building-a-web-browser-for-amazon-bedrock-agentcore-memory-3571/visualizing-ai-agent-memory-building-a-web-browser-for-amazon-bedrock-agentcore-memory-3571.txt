Visualizing AI Agent Memory: Building a Web Browser for Amazon Bedrock AgentCore Memory - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE—the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project — features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto—from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Danilo Poccia
for AWS
Posted on Sep 19
Visualizing AI Agent Memory: Building a Web Browser for Amazon Bedrock AgentCore Memory
#ai
#aws
#bedrock
#agentcore
When building and testing multiple AI agent frameworks with Amazon Bedrock AgentCore, I realized I needed a tool to visualize and explore what my agents were actually remembering. AgentCore Memory provides powerful capabilities for managing both short-term conversation context and long-term knowledge extraction, but debugging memory patterns meant diving into AWS CLI commands or writing custom scripts just to see what was stored. I needed a way to quickly browse, search, and understand the memory patterns my agents were creating.
That's why I built AgentCore Memory Browser: a web interface that makes it simple to explore and interact with Amazon Bedrock AgentCore Memory resources. Whether you're debugging an agent's memory extraction or simply curious about what your agents are learning over time, this tool provides the visibility you need.
In this post, I'll walk you through the AgentCore Memory Browser's capabilities, show you how to set it up in minutes, and demonstrate how it can accelerate your agent development workflow. This tool complements the multi-framework journey I've been documenting in my main AgentCore blog series, providing essential visibility for any agent implementation.
Why Build a Memory Browser?
Working with AI agents in production requires understanding not just what they say, but what they remember. Amazon Bedrock AgentCore Memory provides sophisticated memory management with multiple strategies for extracting and storing different types of information. AgentCore Memory can capture user preferences and settings, store factual information extracted from conversations, create condensed summaries of sessions, and maintain the raw conversation history for context.
When an agent isn't behaving as expected, or when you want to understand its memory patterns, you need visibility into these memory stores. The AWS CLI provides the raw capability, but switching between terminal commands while developing breaks your flow. I needed something more intuitive—a tool that could show me at a glance what each memory strategy was storing, let me search through records, and help me understand how my agents were using memory across different sessions and actors.
Key Features That Accelerate Development
The AgentCore Memory Browser provides real-time exploration of all your AgentCore Memory resources with live data pulled directly from both control plane and data plane APIs. You can see memory status, configurations, and strategies at a glance.
Each memory strategy gets its own dedicated interface with operations tailored to its purpose. Whether you're working with user preferences, semantic facts, or session summaries, the browser adapts to show relevant operations and namespace patterns. AgentCore Memory uses namespace templates with placeholders, and when a strategy defines a namespace that contains a {memoryStrategyId}, the browser automatically fills in the strategy ID portion while keeping the field editable so that you can substitute the actor and session values. This makes it easy to explore specific user or session data without having to type the full namespace path each time.
The browser provides three core operations for each strategy. You can list events to view the sequence of events for specific sessions and actors, helping you understand the temporal flow of your agent's interactions. You can browse all memory records in a namespace with pagination support for large datasets. And you can retrieve memory using natural language queries, taking advantage of AgentCore's semantic search capabilities.
The developer-friendly UI includes quick copy buttons for Memory IDs, ARNs, and namespace values, saving you from manual selection and copying. The auto-expanding JSON viewer with syntax highlighting makes it easy to inspect complex memory structures. The browser remembers your namespace edits during a session, so you don't have to re-enter actor and session IDs repeatedly. And all user content is HTML-escaped to prevent injection attacks, ensuring security even when browsing untrusted memory content.
Installation in Under a Minute
To get started quickly, I've packaged the AgentCore Memory Browser as a Python tool that can be installed globally using uv, the fast Python package manager.
Before installation, ensure you have Python 3.13 or higher and AWS CLI configured with appropriate credentials. You'll need AWS IAM permissions for bedrock-agentcore-control:ListMemories and GetMemory operations, as well as bedrock-agentcore:ListEvents, ListMemoryRecords, and RetrieveMemoryRecords.
You can install directly from GitHub with a single command:
uv tool install git+https://github.com/danilop/agentcore-memory-browser.git
Enter fullscreen mode
Exit fullscreen mode
Then run it from anywhere:
agentcore-memory-browser
Enter fullscreen mode
Exit fullscreen mode
The application automatically opens in your default browser at http://localhost:8000 (you can pass a different port on the command line).
If you want to modify the tool or contribute to development, you can clone the repository, install dependencies with uv sync, and run the application with uv run agentcore-memory-browser.
Architecture: Clean Separation of Concerns
The AgentCore Memory Browser follows a clean, modular architecture. The backend is built with FastAPI, providing a modern, async-capable web framework. It uses two AWS service clients: the AgentCore control plane to list and describe memory resources, and the data plane to perform operations like listing events, browsing records, and executing semantic searches.
The frontend uses Bootstrap for responsive design and vanilla JavaScript for interactivity—no complex build process required. The interface is organized with a sidebar for memory selection with metadata preview, main content with a tabbed interface for each memory strategy, operation panels with dedicated forms for each memory operation, and a results display with a JSON tree viewer with syntax highlighting.
Real-World Usage Patterns
After using the Memory Browser while developing agents, certain patterns have proven most valuable in my workflow to debug memory extraction as events are processed by strategies, understand how an agent's knowledge evolves over time, and optimizing semantic emory searches.
Best Practices
After extensive use, certain practices have emerged as particularly helpful. First, configure your AWS environment properly by setting your default AWS Region and verifying credentials with aws sts get-caller-identity. This ensures the browser can connect to your AgentCore Memory resources without issues.
Also, making good use of the copy buttons saves time when you need to reference memory IDs or ARNs in your code.
What makes AgentCore Memory particularly useful is how it simplifies handling both short-term and long-term memory for AI agents. Short-term memory captures the immediate context of conversations, while long-term memory extracts and preserves important facts, preferences, and patterns that persist across sessions. The Memory Browser gives you a window into both, helping you understand how your agents build knowledge over time and how they use that knowledge to provide more personalized and contextually aware responses. This visibility helps building agents that can maintain coherent and efficient results while learning and adapting from their interactions.
Top comments (4)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Collapse
Expand
Ali Farhat
Ali Farhat
Ali Farhat
Follow
Founder @ Scalevise | We build smart AI-powered automations & web apps | Laravel, React, Flutter, Make.com, n8n, Airtable
Location
Netherlands
Education
15+ years experience in enterprise software engineering, specializing in system architecture
Pronouns
He/Him
Work
Founder & Architect @ Scalevise Custom AI Agents, Web Development, and Workflow Automation for SMEs
Joined
Jun 30, 2021
•
Sep 20
Dropdown menu
Copy link
Hide
Sow interesting!
Like comment:
Like comment:
2 likes
Like
Comment button
Reply
Collapse
Expand
Ricardo Sueiras
AWS
Ricardo Sueiras
AWS
Ricardo Sueiras
Follow
Technologist/Maker/Builder. Developer Advocate at AWS, specialising in open source. Find me on Mastadon at https://hachyderm.io/@094459
Location
London
Work
Developer Advocate at Amazon Web Services
Joined
Sep 2, 2019
•
Sep 19
Dropdown menu
Copy link
Hide
Amazing!
Like comment:
Like comment:
2 likes
Like
Comment button
Reply
Collapse
Expand
Dennis Traub
AWS
Dennis Traub
AWS
Dennis Traub
Follow
AI Engineering Specialist at AWS | Exploring the impact of AI | Helping make sense of technology in our rapidly changing world
Location
Hamburg, Germany
Pronouns
he / him
Work
Amazon Web Services
Joined
Nov 14, 2021
•
Sep 19
• Edited on Sep 19
• Edited
Dropdown menu
Copy link
Hide
This is really useful. I had considered building something similar to get better insight into the actual back and forth between agents and their memories
Like comment:
Like comment:
2 likes
Like
Comment button
Reply
Collapse
Expand
Aaron Rose
Aaron Rose
Aaron Rose
Follow
Software engineer and technology writer at tech-reader.blog
Location
Dallas, TX
Joined
Aug 24, 2024
•
Sep 20
Dropdown menu
Copy link
Hide
thanks Danilo! 💯
Like comment:
Like comment:
2 likes
Like
Comment button
Reply
Some comments may only be visible to logged-in visitors. Sign in to view all comments.
Code of Conduct
•
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
AWS
Follow
Collection of articles by AWS Developer Advocates
More from AWS
4 Ways to Supercharge Your HLS Live Streaming App with AI-Powered Analysis
#aws
#amazonivs
#ai
#livestreaming
Token Counting Meets Amazon Bedrock
#ai
#aws
#bedrock
#programming
Building Production-Ready AI Agents with LangGraph and Amazon Bedrock AgentCore
#ai
#aws
#bedrock
#agentcore
💎 DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community — A space to discuss and keep up software development and manage your software career
Home
DEV++
Welcome Thread
Reading List
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Free Postgres Database
Software comparisons
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem — the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community © 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account