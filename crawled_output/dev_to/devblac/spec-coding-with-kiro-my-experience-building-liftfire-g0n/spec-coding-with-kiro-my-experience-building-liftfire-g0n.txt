Spec Coding with Kiro: My Experience Building LiftFire - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE—the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project — features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto—from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Julian
Posted on Sep 14
• Edited on Sep 15
Spec Coding with Kiro: My Experience Building LiftFire
#ai
#programming
#softwareengineering
#kirodotdev
TL;DR:
Vibe coding (“one-sentence apps”) is fun, but it doesn’t scale.
Spec coding is a workflow where .md files (product.md, tech.md, requirements.md, etc.) act as living specs that guide the build, supported by automated hooks.
I tested this by building LiftFire, a gym-tracking app. Here’s what I learned:
A small site can run on ~50 specs.
A real-world app may need 500+ specs and 700+ vibes.
Specs handle the big architecture; vibes nail the details.
Humans remain the difference-maker.
It convinced me spec coding is the path forward for AI-assisted development.
From vibe coding magic to spec coding reality
The first time I saw vibe coding, it felt like magic: “Build me a site” → boom, a site appears.
But that magic doesn’t last when you go beyond toy demos.
One-sentence apps are fun demos, but they’re a dead end for serious development.
Real apps need structure. They need more than vibes.
That’s where spec coding comes in. Tools like Kiro IDE are exploring this path, and here’s how it worked for me:
Steering files (product.md, tech.md, security.md, structure.md) act like living design docs.
Specs break down systems into smaller apps, features, or modules — each with its own requirements.md, design.md, and tasks.md.
Hooks (aka vibe requests) trigger things like tests, commits, or formatting — either manually or automatically when conditions are met.
This isn’t about replacing engineers. It’s about moving the conversation up from “lines of code” to “intent + architecture.”
My scaling law: 50 specs vs 500 specs
A small site = ~50 specs.
A real-world app with frontend, backend, DB, AWS, and social features = 500+ specs and 700+ vibes.
Specs move the big rocks.
Vibes hammer the details.
And the human supervising the process makes or breaks the outcome.
Automation is powerful, but it’s human judgment that gives the project meaning.
Specs vs Tickets
Specs in .md files beat tickets in Jira. Period.
Tickets scatter intent; specs centralize it.
Jira and Trello were built for human workflows, not AI-driven ones. Specs are closer to code, easier to maintain, and directly steer the build.
I’d even predict:
In 5 years, most startups won’t start with a codebase. They’ll start with a stack of .md specs.
What it felt like building LiftFire
To test this workflow, I built LiftFire, a gym-tracking app.
Yes, I dragged my nephew into the gym for testing — accountability is a feature.
The MVP is functional: track exercises, goals, milestones. It’ll soon be published as an APK on Google Play.
But the most important part wasn’t the app itself — it was the experience of coding differently:
Writing specs in .md files instead of losing intent in tickets.
Watching vibe hooks auto-generate tests when files changed.
Realizing commits, linting, and other chores could fire automatically while I stayed in “design mode.”
It felt less like coding alone, more like orchestrating with a super-fast junior developer who never sleeps — but still needs guidance.
Why this matters
Most dev tools focus on speeding up typing.
Spec coding focuses on raising the level of abstraction:
Engineers spend more time thinking about architecture and context.
AI handles repetitive mechanics.
Human supervision ties it all together.
What three devs + Jira do in six months, one dev with spec coding could do in two weeks.
It requires more effort up front, but it produces more robust software, faster, with fewer people stuck in glue work.
And still — people are the key. Without human vision, judgment, and long-term stewardship, there’s no lasting value.
Final thoughts
Vibe coding was the fun demo.
Spec coding is the step change toward real, large-scale AI-assisted software.
It doesn’t mean engineers go away — it means our role shifts: less boilerplate, more architecture, more decisions that matter.
And from what I’ve seen building LiftFire with Kiro, projects that embrace this model will ship faster, stronger, and leaner than those that don’t.
👉 What do you think: are specs the new tickets, or am I overselling the future? Would you trust 500 specs / 700 vibes to build your next app?
If you’re curious about the personal side of this story — why my nephew got dragged into the gym with me, and how that shaped the LiftFire app, I wrote about it on my personal blog
Top comments (6)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Collapse
Expand
Nadine
Nadine
Nadine
Follow
Education
BA, BSc, AWS Certified Cloud Practitioner
Work
Freelancer, Project-based
Joined
May 31, 2025
•
Sep 15
Dropdown menu
Copy link
Hide
I started building an application in Kiro. I found that I only used this feature in the initial building stages for task files. Maybe I don’t know how to properly leverage spec requests 🤷🏻‍♀️
Like comment:
Like comment:
2 likes
Like
Comment button
Reply
Collapse
Expand
Julian
Julian
Julian
Follow
Location
Buenos Aires, Argentina
Joined
Jun 12, 2025
•
Sep 15
• Edited on Sep 15
• Edited
Dropdown menu
Copy link
Hide
Totally get that, I was in the same spot: I started using Kiro mainly for task files until I let a spec own a tiny end-to-end slice (DB -> API -> UI -> tests).
What clicked for me was writing smaller specs, for example:
Spec: Exercise CRUD with Supabase RLS + optimistic UI.
Constraints: Vite/TS, offline-first, basic error states.
Done when: e2e passes for create/edit/delete and RLS rules are enforced.
FWIW you don't need to ask Kiro for the docs, it will guide you through requirements > design > tasks and then code. And the steering docs become the source of truth and keep specs standardized and consistent.
Like comment:
Like comment:
2 likes
Like
Comment button
Reply
Collapse
Expand
LuuHN
LuuHN
LuuHN
Follow
Joined
Sep 14, 2025
•
Sep 14
Dropdown menu
Copy link
Hide
This was so interesting to read, I didn’t know spec coding could be used this way to improve development. It seems like a smart way to take advantage of AI and keeping the human role in architecture and decision-making. I’ll definitely be keeping an eye out for new updates on spec coding and LiftFire app, sounds like a cool project!!
Like comment:
Like comment:
2 likes
Like
Comment button
Reply
Collapse
Expand
Julian
Julian
Julian
Follow
Location
Buenos Aires, Argentina
Joined
Jun 12, 2025
•
Sep 14
Dropdown menu
Copy link
Hide
Hey, thank you so much! I'll be pushing a landing page with a roadmap for more features over the LiftFire app. And all contributions are welcome!
In relation to spec coding, yeah I felt exactly like that: spent more time managing and creating functional documents than coding.
Like comment:
Like comment:
1 like
Like
Comment button
Reply
Collapse
Expand
Mariano
Mariano
Mariano
Follow
Joined
Sep 14, 2025
•
Sep 14
Dropdown menu
Copy link
Hide
Damn I gotta check this out! I've been saying for ages that we should have LLMs enforcing ADRs, READMEs, etc, so this is just an extension of that principle. Keen to collaborate on this app!
Like comment:
Like comment:
3 likes
Like
Comment button
Reply
Collapse
Expand
Julian
Julian
Julian
Follow
Location
Buenos Aires, Argentina
Joined
Jun 12, 2025
•
Sep 14
Dropdown menu
Copy link
Hide
Exactly! ADRs/READMEs are the gateway drug 😅—once you realize LLMs can enforce those, why stop there?
The tricky part is: should specs be just enforced, or also evolved automatically when code drifts?
If an AI can refactor code, why not refactor the spec too?
Like comment:
Like comment:
2 likes
Like
Comment button
Reply
Code of Conduct
•
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Julian
Follow
Location
Buenos Aires, Argentina
Joined
Jun 12, 2025
Trending on DEV Community
Hot
Orchestrating Real-World Agent Workflows with MCP
#ai
#beginners
#tutorial
#discuss
What was your win this week?!
#weeklyretro
#discuss
5 Mistakes Businesses Make When Adopting AI
#ai
#productivity
#discuss
#beginners
💎 DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community — A space to discuss and keep up software development and manage your software career
Página Inicial
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
Sobre
Contato
Free Postgres Database
Software comparisons
Forem Shop
Código de Conduta
Política de Privacidade
Termos de Uso
Built on Forem — the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community © 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account