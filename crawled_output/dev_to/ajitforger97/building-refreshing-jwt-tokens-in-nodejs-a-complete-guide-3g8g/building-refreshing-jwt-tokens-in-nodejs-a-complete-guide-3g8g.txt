Building Refreshing JWT Tokens in Node.js: A Complete Guide - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE‚Äîthe hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project ‚Äî features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Crypto Forem
Follow
A collaborative community for all things Crypto‚Äîfrom Bitcoin to protocol development and DeFi to NFTs and market analysis.
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Ajit Forger
Posted on Sep 12
Building Refreshing JWT Tokens in Node.js: A Complete Guide
#webdev
#node
#jwt
#backend
When you‚Äôre building authentication in a Node.js application, JSON Web Tokens (JWTs) are one of the most common approaches. They‚Äôre fast, stateless, and easy to work with. But they also come with a catch: expiration. If you issue a short-lived token (say, 15 minutes), users get logged out too often. If you issue a long-lived token (say, 7 days), it increases security risks if the token leaks.
That‚Äôs where refresh tokens come in.
We‚Äôll break down how JWT and refresh tokens work together, why you need them, and how to implement a secure refresh token strategy in Node.js.
üîë What Are Refresh Tokens?
A JWT access token is used to authenticate requests. It‚Äôs short-lived, usually 10‚Äì30 minutes, to minimize risk.
A refresh token is a long-lived credential (days or weeks) that lets the client request a new access token without logging in again.
Access Token ‚Üí Fast, stateless, expires quickly.
Refresh Token ‚Üí Long-lived, securely stored, used only to renew access tokens.
üõ†Ô∏è Project Setup
Let‚Äôs spin up a minimal Express.js app with JWT authentication and refresh tokens.
1. Install Dependencies
npm init -y
npm install express jsonwebtoken bcryptjs cookie-parser dotenv
Enter fullscreen mode
Exit fullscreen mode
express ‚Üí Web framework
jsonwebtoken ‚Üí For signing/verifying JWTs
bcryptjs ‚Üí For password hashing
cookie-parser ‚Üí To handle cookies (where refresh tokens can be stored)
dotenv ‚Üí Manage environment variables
‚öôÔ∏è Basic Server Setup
// server.js
const express = require("express");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const cookieParser = require("cookie-parser");
require("dotenv").config();
const app = express();
app.use(express.json());
app.use(cookieParser());
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on ${PORT}`));
Enter fullscreen mode
Exit fullscreen mode
üîê Generating Tokens
We‚Äôll need two token generators:
generateAccessToken(user) ‚Üí short-lived (e.g., 15m)
generateRefreshToken(user) ‚Üí long-lived (e.g., 7d)
function generateAccessToken(user) {
return jwt.sign({ id: user.id, email: user.email }, process.env.ACCESS_SECRET, {
expiresIn: "15m",
});
}
function generateRefreshToken(user) {
return jwt.sign({ id: user.id, email: user.email }, process.env.REFRESH_SECRET, {
expiresIn: "7d",
});
}
Enter fullscreen mode
Exit fullscreen mode
üë§ Login Route
When a user logs in, we issue both tokens:
const users = []; // mock DB
app.post("/register", async (req, res) => {
const { email, password } = req.body;
const hashed = await bcrypt.hash(password, 10);
users.push({ id: users.length + 1, email, password: hashed });
res.json({ message: "User registered" });
});
app.post("/login", async (req, res) => {
const { email, password } = req.body;
const user = users.find(u => u.email === email);
if (!user) return res.status(400).json({ error: "User not found" });
const valid = await bcrypt.compare(password, user.password);
if (!valid) return res.status(400).json({ error: "Invalid password" });
const accessToken = generateAccessToken(user);
const refreshToken = generateRefreshToken(user);
// Store refresh token in HttpOnly cookie
res.cookie("refreshToken", refreshToken, {
httpOnly: true,
secure: true, // enable in production (https)
sameSite: "strict",
});
res.json({ accessToken });
});
Enter fullscreen mode
Exit fullscreen mode
üîÑ Refreshing Tokens
Now, we add a /refresh endpoint to issue a new access token when the old one expires.
app.post("/refresh", (req, res) => {
const token = req.cookies.refreshToken;
if (!token) return res.status(401).json({ error: "No token provided" });
jwt.verify(token, process.env.REFRESH_SECRET, (err, user) => {
if (err) return res.status(403).json({ error: "Invalid token" });
const newAccessToken = generateAccessToken(user);
res.json({ accessToken: newAccessToken });
});
});
Enter fullscreen mode
Exit fullscreen mode
üîí Middleware to Protect Routes
function authMiddleware(req, res, next) {
const authHeader = req.headers["authorization"];
const token = authHeader && authHeader.split(" ")[1];
if (!token) return res.sendStatus(401);
jwt.verify(token, process.env.ACCESS_SECRET, (err, user) => {
if (err) return res.sendStatus(403);
req.user = user;
next();
});
}
app.get("/protected", authMiddleware, (req, res) => {
res.json({ message: "You are authorized!", user: req.user });
});
Enter fullscreen mode
Exit fullscreen mode
üö™ Logout
To log out, just clear the refresh token.
app.post("/logout", (req, res) => {
res.clearCookie("refreshToken");
res.json({ message: "Logged out" });
});
Enter fullscreen mode
Exit fullscreen mode
‚ö†Ô∏è Security Best Practices
Store access token in memory (not localStorage/sessionStorage).
Store refresh token in HttpOnly cookie ‚Üí protects against XSS.
Rotate refresh tokens ‚Üí issue a new refresh token each time it‚Äôs used.
Blacklist old refresh tokens if you want full control (store them in Redis or DB).
Use HTTPS in production to prevent token leaks.
üîÑ Refreshing Tokens - Analogy
Here‚Äôs how it maps to frontend-backend requests:
Login:
Frontend sends your username/password.
Backend checks credentials and gives you:
A short-lived access token (movie ticket)
A long-lived refresh token (season pass, stored in an HttpOnly cookie).
Accessing protected routes:
Frontend attaches the access token in the request headers.
Backend verifies it. If valid ‚Üí allows access.
Access token expires:
Frontend tries to make a request ‚Üí gets 401 Unauthorized.
Frontend then calls /refresh without sending username/password, only letting the browser send the refresh token cookie automatically.
Backend verifies refresh token:
If valid ‚Üí issues a new access token (new movie ticket).
If invalid/expired ‚Üí user must log in again (season pass expired).
Key point:
The frontend never has direct access to the refresh token if you store it in an HttpOnly cookie. It just ‚Äútrusts the browser‚Äù to send it along with /refresh requests. This keeps it safe from malicious scripts.
üéØ Conclusion
Using refresh tokens with JWTs balances security and usability. You get short-lived access tokens for protection and long-lived refresh tokens for convenience. In production, always handle refresh token storage carefully, implement rotation, and combine with HTTPS for a secure system.
This setup is scalable, works well with stateless services, and is widely used in modern authentication systems.
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Some comments may only be visible to logged-in visitors. Sign in to view all comments.
Code of Conduct
‚Ä¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Ajit Forger
Follow
NodeJS Developer by day, Code Whisperer by night! üåô
JS | AI | MEMES
Let's turn your "404 Not Found" into "200 OK" and make the web a happier place! üòÑ
Location
India
Work
junior web developer at india
Joined
Sep 23, 2019
More from Ajit Forger
Understanding of CommonJS(Basics Node.js Series)
#javascript
#node
#programming
#webdev
Node.js modules (Basics Node.js Series)
#webdev
#javascript
#programming
#beginners
Useful NPM scripts, Example usage(Basics Node.js Series)
#webdev
#javascript
#beginners
#node
üíé DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community ‚Äî A space to discuss and keep up software development and manage your software career
Home
DEV++
Reading List
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Free Postgres Database
Software comparisons
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community ¬© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account