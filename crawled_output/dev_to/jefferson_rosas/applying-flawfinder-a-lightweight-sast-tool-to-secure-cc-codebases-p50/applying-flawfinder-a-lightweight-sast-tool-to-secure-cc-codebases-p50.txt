üîç Applying Flawfinder: A Lightweight SAST Tool to Secure C/C++ Codebases - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE‚Äîthe hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project ‚Äî features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto‚Äîfrom Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
JEFFERSON ROSAS CHAMBILLA
Posted on Sep 23
üîç Applying Flawfinder: A Lightweight SAST Tool to Secure C/C++ Codebases
#flawfinder
#cybersecurity
#appsec
#devsecops
Introduction: Why SAST for C/C++?
Static Application Security Testing (SAST) is a foundational practice in modern secure software development. Unlike dynamic or runtime analysis, SAST examines source code without executing it, identifying vulnerabilities early in the development lifecycle when they are cheapest and easiest to fix.
While enterprise-grade tools often dominate the conversation, lightweight, open-source alternatives like Flawfinder offer tremendous value. This is especially true for teams working with C/C++, embedded systems, or legacy codebases where simplicity, speed, and zero cost are critical.
In this article, we'll apply Flawfinder to a sample C++ program, interpret its findings, and discuss how to integrate it into a development workflow.
Why Flawfinder?
Flawfinder is a command-line static analysis tool designed specifically for C and C++. Created by David A. Wheeler, it scans source code for calls to functions known to be risky (like strcpy, gets, sprintf) which commonly lead to:
Buffer overflows (CWE-120)
Format string vulnerabilities (CWE-134)
Command injection (CWE-78)
Instead of performing complex abstract syntax tree (AST) analysis, Flawfinder uses simple but effective pattern-matching against a curated database of dangerous function calls. This makes it:
‚úÖ Blazingly fast - Scans thousands of lines of code in seconds.
‚úÖ Lightweight - No compilation or complex setup required.
‚úÖ Free and Open-Source - No licensing fees.
‚úÖ Beginner-friendly - Easy to install and interpret results.
And as requested, it's not SonarQube, Snyk, Semgrep, or Veracode.
Hands-On: Scanning a C++ Project
Step 1: Installation
Installing Flawfinder is straightforward. It's available via package managers for most Linux distributions and macOS.
# On Ubuntu/Debian
sudo apt-get install flawfinder
# On macOS using Homebrew
brew install flawfinder
# Using pip (Python Package Manager)
pip install flawfinder
Enter fullscreen mode
Exit fullscreen mode
Verify the installation:
flawfinder --version
Enter fullscreen mode
Exit fullscreen mode
Step 2: Create a Sample C++ File to Scan
Let's create a simple C++ file (vulnerable_example.cpp) that contains some common security pitfalls. This will give Flawfinder something interesting to report.
// vulnerable_example.cpp
#include <iostream>
#include <cstring>
#include <cstdio>
int main() {
char src[10] = "Hello";
char dest[5]; // Oops! Too small.
// 1. Risky function: strcpy (potential buffer overflow)
strcpy(dest, src);
// 2. Risky function: sprintf (potential buffer overflow)
char buffer[10];
sprintf(buffer, "The number is %d", 42);
// 3. Risky function: gets (extremely dangerous)
// char input[50];
// gets(input); // Uncommenting this would be a major flaw!
std::cout << "Dest: " << dest << std::endl;
std::cout << "Buffer: " << buffer << std::endl;
return 0;
}
Enter fullscreen mode
Exit fullscreen mode
Step 3: Run the Scan
Navigate to the directory containing your source file and run Flawfinder. You can point it to a single file or an entire directory.
# Scan a single file
flawfinder vulnerable_example.cpp
# Scan the current directory and all subdirectories
flawfinder ./
Enter fullscreen mode
Exit fullscreen mode
Step 4: Interpreting the Results
Flawfinder's output is color-coded and ranked by risk level (0-5, where 5 is the most severe). Here's what you might see for our example:
Flawfinder version 2.0.19, (C) 2001-2019 David A. Wheeler.
Number of rules (primarily dangerous function names) in C/C++ ruleset: 220
Examining vulnerable_example.cpp
vulnerable_example.cpp:10: [4] (buffer) strcpy:
Does not check for buffer overflows when copying to destination (CWE-120).
Consider using strncpy or snprintf.
vulnerable_example.cpp:14: [4] (buffer) sprintf:
Does not check for buffer overflows when writing to destination (CWE-120).
Use snprintf or vsnprintf instead.
vulnerable_example.cpp:18: [5] (buffer) gets:
This function is extremely dangerous because it may overflow the
calling buffer. It is obsoleted by ISO/IEC 9899:1999 (C99) and
should never be used. Use fgets() instead.
FINAL RESULTS:
Hits = 3
Lines analyzed = 20 in 0.1 seconds (200 lines/second)
3 Physical Source Lines of Code (SLOC) = 20
Hits@level = [0]
0 [1]
0 [2]
0 [3]
0 [4]
2 [5]
1
Hits@level+ = [0+]
3 [1+]
3 [2+]
3 [3+]
3 [4+]
3 [5+]
1
Enter fullscreen mode
Exit fullscreen mode
Key takeaways from the report:
Location: Each finding shows the file and line number.
Risk Level: [4] and [5] indicate high-severity issues.
Description: A brief explanation of the risk and the associated CWE.
Recommendation: Suggests safer alternative functions.
Integrating Flawfinder into Your Workflow
To move beyond one-off scans, you can integrate Flawfinder directly into your development process.
1. Make it Part of Your CI/CD Pipeline (e.g., GitHub Actions)
You can create a simple GitHub Action to run Flawfinder on every push or pull request. Create a file in your repo at .github/workflows/flawfinder.yml:
name: SAST with Flawfinder
on: [push, pull_request]
jobs:
sast:
runs-on: ubuntu-latest
steps:
- name: Checkout code
uses: actions/checkout@v4
- name: Install Flawfinder
run: sudo apt-get install -y flawfinder
- name: Run Flawfinder
run: flawfinder --sarflib ./
Enter fullscreen mode
Exit fullscreen mode
This will output the results in SARIF format, which GitHub can natively display in the "Security" tab.
2. Customizing Scans with Command-Line Options
Flawfinder offers several options to tailor the output:
# Only show high-risk issues (level 4 and 5)
flawfinder --minlevel 4 ./
# Generate a HTML report
flawfinder --html --output results.html ./
# Suppress specific known issues (e.g., a false positive on line 10)
flawfinder --falsepositive vulnerable_example.cpp:10
Enter fullscreen mode
Exit fullscreen mode
Limitations and Considerations
While Flawfinder is excellent for catching known dangerous patterns, it's important to understand its limitations:
False Positives: Pattern-matching can flag safe usage of functions
Limited Scope: Only finds issues related to its built-in database
No Data Flow Analysis: Cannot track variables across complex function calls
For mission-critical projects, consider using Flawfinder alongside more advanced tools like Clang Static Analyzer or commercial solutions.
Conclusion: Flawfinder's Place in Your Toolbox
Flawfinder is not a silver bullet. Its pattern-matching approach can produce false positives and it won't catch complex logical flaws. However, as a fast, free, and focused tool, it is incredibly effective at what it does: catching obvious yet dangerous function calls in C/C++ code.
It serves as an excellent first line of defense, especially for developers new to secure coding practices. By integrating it early and often, you can prevent well-known vulnerability classes from ever reaching production.
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
‚Ä¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
JEFFERSON ROSAS CHAMBILLA
Follow
Joined
Sep 23, 2025
More from JEFFERSON ROSAS CHAMBILLA
Applying Bandit SAST Tool to Secure Python Applications
#appsec
#devsecops
#bandit
#cybersecurity
üíé DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community ‚Äî Your community HQ
Home
Welcome Thread
Tags
About
Contact
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community ¬© 2016 - 2025.
We're a blogging-forward open source social network where we learn from one another
Log in
Create account