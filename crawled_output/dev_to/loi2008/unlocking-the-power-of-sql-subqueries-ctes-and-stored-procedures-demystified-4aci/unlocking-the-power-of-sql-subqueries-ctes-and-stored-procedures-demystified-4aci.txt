üìäUnlocking the power of SQL: Subqueries, CTEs, and Stored Procedures Demystified - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE‚Äîthe hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project ‚Äî features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto‚Äîfrom Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Loi2008
Posted on Sep 12
üìäUnlocking the power of SQL: Subqueries, CTEs, and Stored Procedures Demystified
#subqueries
#commontableexpression
#storedprocedures
#python
üìùIntroduction
In SQL, developers are often faced with situations where they are required to break down complex queries, reuse logic, or encapsulate business rules for repeated use. There are three powerful features that help manage complexity and improve efficiency, and each serves a different purpose:
Subqueries - allow quick, inline calculations inside a query.
Common Table Expressions (CTEs) - improve readability and support recursion within queries.
Stored procedures - encapsulate reusable, parameterized business logic stored at the database level.
Understanding their similarities, differences, and best use cases is essential for writing efficient, maintainable SQL code.
1. Subquery
A subquery is a query nested inside another query. It can be used in the SELECT, FROM, or WHERE clause to provide intermediate results.
Example:
SELECT employee_name, salary
FROM employees
WHERE salary > (
SELECT AVG(salary)
FROM employees
);
Enter fullscreen mode
Exit fullscreen mode
üü¢Best for: Quick, one-off filtering or calculations.
üî¥Limitation: Cannot be reused across queries and may affect performance if overused.
2. Common Table Expression (CTE)
A CTE is a temporary named result set defined with the **WITH **keyword. It improves readability and supports recursion.
Example:
WITH AvgSalary AS (
SELECT AVG(salary) AS avg_sal
FROM employees
)
SELECT employee_name, salary
FROM employees, AvgSalary
WHERE salary > avg_sal;
Enter fullscreen mode
Exit fullscreen mode
üü¢Best for: Structuring complex queries, improving readability, and handling recursive scenarios like hierarchies.
üî¥Limitation: Exists only within the query scope and cannot be parameterized.
3. Stored Procedure
A stored procedure is a precompiled set of SQL statements stored in the database. It can accept parameters, perform multiple operations, and encapsulate business logic.
Example:
CREATE PROCEDURE GetHighEarners(IN minSalary DECIMAL(10,2))
BEGIN
SELECT employee_name, department, salary
FROM employees
WHERE salary > minSalary;
END;
CALL GetHighEarners(60000);
Enter fullscreen mode
Exit fullscreen mode
üü¢Best for: Reusable routines, parameterized operations, and business logic encapsulation.
üî¥ Limitation: Requires database-level creation and maintenance.
Features
Feature
Subquery
CTE
Stored Procedure
Scope
Within a query
Within a query
Stored in the database
Reusability
No
Only within same query
Yes (global)
Parameters
No
No
Yes
Supports Recursion
No
Yes
Yes
Can Modify Data
Rarely (SELECT only)
Rarely (SELECT only)
Yes (INSERT/UPDATE/DELETE)
Best Use
Simple inline logic
Complex query readability
Reusable business logic
Where to use each
Subquery
In a simple, one-off query.
when filtering or aggregating values inside a query.
‚ö†Ô∏è Use correlated subqueries sparingly for performance reasons.
CTE
When query logic is complex or needs recursion.
Makes queries readable and maintainable.
Ideal when the same subquery is referenced multiple times.
Stored Procedure
When logic needs reusability across multiple queries.
For data modification, business rules, or repetitive operations.
When performance benefits from precompiled execution.
When parameters or multiple operations are required in one call.
Conclusion
In SQL, stored procedures, CTEs, and subqueries are complementary tools.
Subqueries are ideal for inline, fast processes;
CTEs facilitate recursion and make difficult queries readable; and stored procedures contain reusable, parameterized business logic for routine tasks.
Additionally, stored procedures bridge the gap between database architecture and programming principles by embodying abstraction, reusability, and modularity, much like Python functions do.
By choosing the appropriate method for the appropriate situation, developers may create scalable, manageable, and effective SQL.
üìñ Further Reading & References
Gravell, M. Difference between CTE and subquery on Stack Overflow ‚Äì highlights recursive capabilities of CTEs. https://stackoverflow.com/questions/706972/difference-between-cte-and-subquery
LearnSQL.com ‚Äì comprehensive overview of subqueries and CTEs with examples. https://learnsql.com/blog/cte-vs-subquery
KDnuggets (April 2025): SQL CTE vs Subquery: This Debate Ain‚Äôt Over Yet ‚Äì detailed comparison.
https://www.kdnuggets.com/sql-cte-vs-subquery-this-debate-aint-over-yet
Wikipedia ‚Äì Stored Procedure ‚Äì in-depth explanation of stored procedures, use cases, and comparison with functions.
https://en.wikipedia.org/wiki/Stored_procedure
PostgreSQL stored procedures guide ‚Äì syntax and use for transaction-aware routines.https://pysql.tecladocode.com/section08/lectures/04_stored_procedures
Wikipedia ‚Äì Correlated Subquery ‚Äì explains execution patterns and performance considerations in correlated subqueries.
https://en.wikipedia.org/wiki/Correlated_subquery
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
‚Ä¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Loi2008
Follow
Joined
Aug 2, 2025
More from Loi2008
From SQL to Python: Uniting Stored Power with Functional Flexibility
#database
#backend
#sql
#python
üíé DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community ‚Äî A space to discuss and keep up software development and manage your software career
Home
Welcome Thread
Reading List
Tags
About
Contact
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community ¬© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account