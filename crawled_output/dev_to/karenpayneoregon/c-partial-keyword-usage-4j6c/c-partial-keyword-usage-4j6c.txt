C# partial keyword usage - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE—the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project — features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto—from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Karen Payne
Posted on Sep 12
C# partial keyword usage
#csharp
#dotnetcore
#devops
C# (58 Part Series)
1
SQL-Server: Exploration of datetime2(7) precision (C#)
2
Reveal Data provider parameter values at run time
...
54 more parts...
3
C# Generic Math
4
Working with .zip files in C#
5
Working with the using directive in C#
6
C# .NET Tools with System.CommandLine
7
C# Language extensions
8
Tips on interacting with a database with C#
9
Update Bootstrap in Visual Studio
10
C# Different way to join string array
11
ASP.NET Core/Razor Pages export to Excel
12
Using FluentScheduler with C#
13
Visual Studio debugging windows services
14
C# User-defined explicit and implicit conversion operators
15
Gentle introduction for generics (C#)
16
Bogus custom Dataset
17
Gentle introduction to Generic Repository Pattern with C#
18
C# System.Text.Json
19
Gentle introduction to IDataProtector (C#)
20
Multiple connections for appsettings.json (C#)
21
Get SQL-Server Stored Procedures with C#
22
C# PeriodicTimer
23
C# Excel read/write on the cheap
24
Push your skills Part 1
25
Developer's format helpers
26
C# Dealing with duplicates
27
Push your skills Part 2
28
ASP.NET Core DI constructor with parameters
29
Model Notification changed C#
30
NodaTime – time offsets C#
31
Source-generated RegEx (C#)
32
EF Core queries for unmapped types part 1
33
Learn FormattableString (C#)
34
Bogus DateOnly/TimeOnly
35
C# different way to do a proof of concept
36
Spectre.Console helpers
37
C# System.Text.Json JsonConverter masking
38
Regex timeout - C#
39
Storing passwords safely (C#)
40
NET6 - C# DistinctBy
41
Window Forms Dark mode
42
C# Search by multiple strings
43
Hidden NET 9 gems
44
NET 9 BinaryFormatter migration paths
45
Iterations
46
Working with interfaces
47
Extend ConfigurationBuilder
48
Using Key-per-file configuration provider
49
ChatGPT custom GPT and C#
50
Bootstrap 5 dialogs for ASP .NET Core/C# using ChatGPT
51
EF Core seeding data
52
Import specific properties from JSON
53
C# Override Records ToString
54
Get user secrets for projects
55
Visual Studio shared user secrets
56
C# Excel sortable headers
57
C# partial keyword usage
58
EF Core prototyping
Introduction
Learn about basic usage of partial classes, properties, and methods. By no means does a developer need to use partial classes, properties, and methods unless the usage of partial classes, properties, and methods is necessary, without causing maintenance issues or confusion.
Although partial interfaces are supported, they are not touched on here, while there is an example in the supplied source code.
Source code
Note the use of preview in the project file.
<LangVersion>preview</LangVersion>
Enter fullscreen mode
Exit fullscreen mode
Conventional classes
Consider a class which implements an interface for change notification as shown below.
public enum Gender
{
Male,
Female,
Other
}
public class Client : INotifyPropertyChanged
{
public int Id { get; set => SetField(ref field, value); }
public string FirstName
{
get;
set => SetField(ref field, value.CapitalizeFirstLetter());
}
public string LastName
{
get;
set => SetField(ref field, value.CapitalizeFirstLetter());
}
public
Gender? Gender { get; set => SetField(ref field, value); }
public override string ToString() => $"{Id,-4}{FirstName,-10} {LastName,-14} ({Gender})";
public event PropertyChangedEventHandler PropertyChanged;
protected void OnPropertyChanged(string propertyName)
=> PropertyChanged?.Invoke(this, new(propertyName));
protected bool SetField<T>(ref T field, T value, [CallerMemberName] string propertyName = "")
{
if (EqualityComparer<T>.Default.Equals(field, value)) return false;
field = value;
OnPropertyChanged(propertyName);
return true;
}
}
Enter fullscreen mode
Exit fullscreen mode
Let's refactor the Client class, which has the class defined as partial, and create a secondary file for the setters and getters by defining properties as partial. In the project provided, the Directory.Build.targets provide MS Build instructions to nest the class files.
Note
Interfaces are used in source code as several classes share the same properties and have nothing to do with partial classes and partial properties.
Client.cs
public partial class Client : INotifyPropertyChanged, IPerson
{
public partial int Id { get; set; }
public partial string FirstName { get; set; }
public partial string LastName { get; set; }
public partial Gender? Gender { get; set; }
}
Enter fullscreen mode
Exit fullscreen mode
Client.Sets.cs
public partial class Client
{
public partial int Id { get; set => SetField(ref field, value); }
public partial string FirstName
{
get;
set => SetField(ref field, value.CapitalizeFirstLetter());
}
public partial string LastName
{
get;
set => SetField(ref field, value.CapitalizeFirstLetter());
}
public partial Gender? Gender { get; set => SetField(ref field, value); }
public override string ToString() => $"{Id,-4}{FirstName, -10} {LastName, -14} ({Gender})";
public event PropertyChangedEventHandler PropertyChanged;
protected void OnPropertyChanged(string propertyName)
=> PropertyChanged?.Invoke(this, new(propertyName));
protected bool SetField<T>(ref T field, T value, [CallerMemberName] string propertyName = "")
{
if (EqualityComparer<T>.Default.Equals(field, value)) return false;
field = value;
OnPropertyChanged(propertyName);
return true;
}
}
Enter fullscreen mode
Exit fullscreen mode
Partial extensions
Like conventional classes and methods, extension methods can be implemented partial. One reason is to hide an extension body of code and when done this way use file nesting.
In the following example, the extension for masking an SSN has a decent amount of code that has been tested and only needs to be viewed for an inquiring developer. The other extensions are set as partial for consistency.
Extensions.cs (base file)
public static partial class Extensions
{
/// <summary>
/// Mask SSN
/// </summary>
/// <param name="ssn">Valid SSN</param>
/// <param name="digitsToShow">How many digits to show on right which defaults to 4</param>
/// <param name="maskCharacter">Character to mask with which defaults to X</param>
/// <returns></returns>
/// <exception cref="ArgumentException"></exception>
public static partial string MaskSsn(this string ssn, int digitsToShow = 4, char maskCharacter = 'X');
/// <summary>
/// Capitalizes the first letter of the given string.
/// </summary>
/// <param name="input">The string to capitalize.</param>
/// <returns>A new string with the first letter capitalized. If the input is null or empty, the original string is returned.</returns>
public static partial string CapitalizeFirstLetter(this string? input);
public static partial bool IsInteger(this string sender);
public static partial bool IsNotInteger(this string sender);
}
Enter fullscreen mode
Exit fullscreen mode
Extensions.Code.cs (sub class)
public partial class Extensions
{
public static partial string MaskSsn(this string ssn, int digitsToShow, char maskCharacter)
{
if (string.IsNullOrWhiteSpace(ssn)) return string.Empty;
if (ssn.Contains('-')) ssn = ssn.Replace("-", string.Empty);
if (ssn.Length != 9) throw new ArgumentException("SSN invalid length");
if (ssn.IsNotInteger()) throw new ArgumentException("SSN not valid");
const int ssnLength = 9;
const string separator = "-";
int maskLength = ssnLength - digitsToShow;
int output = int.Parse(ssn.Replace(separator, string.Empty).Substring(maskLength, digitsToShow));
string format = string.Empty;
for (int index = 0; index < maskLength; index++) format += maskCharacter;
for (int index = 0; index < digitsToShow; index++) format += "0";
format = format.Insert(3, separator).Insert(6, separator);
format = $"{{0:{format}}}";
return string.Format(format, output);
}
public static partial string? CapitalizeFirstLetter(this string? input)
=> string.IsNullOrWhiteSpace(input) ?
input : char.ToUpper(input[0]) + input.AsSpan(1).ToString();
public static partial bool IsInteger(this string sender)
{
foreach (var c in sender)
if (c is < '0' or > '9') return false;
return true;
}
public static partial bool IsNotInteger(this string sender)
=> sender.IsInteger() == false;
}
Enter fullscreen mode
Exit fullscreen mode
Asynchronous partial methods
At the current time, we can set the return type as a Task, but we can not return a Task with a type. This means the following can not be set as a partial method.
internal class FileHelpers
{
const int ErrorSharingViolation = 32;
const int ErrorLockViolation = 33;
public static async Task<bool> CanReadFile(string fileName)
{
static bool IsFileLocked(Exception exception)
{
var errorCode = Marshal.GetHRForException(exception) & (1 << 16) - 1;
return errorCode is ErrorSharingViolation or ErrorLockViolation;
}
try
{
await using var fileStream = File.Open(fileName, FileMode.Open, FileAccess.ReadWrite, FileShare.None);
fileStream?.Close();
}
catch (IOException ex)
{
if (IsFileLocked(ex))
{
return false;
}
}
await Task.Delay(50);
return true;
}
}
Enter fullscreen mode
Exit fullscreen mode
Summary
Basic and intermediate uses for partial classes and methods have been presented to clean up developer code. Make sure to check out the provided source code.
C# (58 Part Series)
1
SQL-Server: Exploration of datetime2(7) precision (C#)
2
Reveal Data provider parameter values at run time
...
54 more parts...
3
C# Generic Math
4
Working with .zip files in C#
5
Working with the using directive in C#
6
C# .NET Tools with System.CommandLine
7
C# Language extensions
8
Tips on interacting with a database with C#
9
Update Bootstrap in Visual Studio
10
C# Different way to join string array
11
ASP.NET Core/Razor Pages export to Excel
12
Using FluentScheduler with C#
13
Visual Studio debugging windows services
14
C# User-defined explicit and implicit conversion operators
15
Gentle introduction for generics (C#)
16
Bogus custom Dataset
17
Gentle introduction to Generic Repository Pattern with C#
18
C# System.Text.Json
19
Gentle introduction to IDataProtector (C#)
20
Multiple connections for appsettings.json (C#)
21
Get SQL-Server Stored Procedures with C#
22
C# PeriodicTimer
23
C# Excel read/write on the cheap
24
Push your skills Part 1
25
Developer's format helpers
26
C# Dealing with duplicates
27
Push your skills Part 2
28
ASP.NET Core DI constructor with parameters
29
Model Notification changed C#
30
NodaTime – time offsets C#
31
Source-generated RegEx (C#)
32
EF Core queries for unmapped types part 1
33
Learn FormattableString (C#)
34
Bogus DateOnly/TimeOnly
35
C# different way to do a proof of concept
36
Spectre.Console helpers
37
C# System.Text.Json JsonConverter masking
38
Regex timeout - C#
39
Storing passwords safely (C#)
40
NET6 - C# DistinctBy
41
Window Forms Dark mode
42
C# Search by multiple strings
43
Hidden NET 9 gems
44
NET 9 BinaryFormatter migration paths
45
Iterations
46
Working with interfaces
47
Extend ConfigurationBuilder
48
Using Key-per-file configuration provider
49
ChatGPT custom GPT and C#
50
Bootstrap 5 dialogs for ASP .NET Core/C# using ChatGPT
51
EF Core seeding data
52
Import specific properties from JSON
53
C# Override Records ToString
54
Get user secrets for projects
55
Visual Studio shared user secrets
56
C# Excel sortable headers
57
C# partial keyword usage
58
EF Core prototyping
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
•
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Karen Payne
Follow
Microsoft MVP x 12, Microsoft TechNet author, Code magazine author, developer advocate.
Have a passion for driving race cars.
Location
Oregon, USA
Education
Montgomery Community College
Pronouns
She, her
Work
Contractor
Joined
Jan 1, 2023
More from Karen Payne
EF Core prototyping
#csharp
#dotnetcore
#database
ASP.NET Core show/hide password
#webdev
#frontend
#dotnetcore
Create C# nested files in Visual Studio
#csharp
#ai
#tutorial
💎 DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community — A space to discuss and keep up software development and manage your software career
Página Inicial
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
Sobre
Contato
Free Postgres Database
Software comparisons
Forem Shop
Código de Conduta
Política de Privacidade
Termos de Uso
Built on Forem — the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community © 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account