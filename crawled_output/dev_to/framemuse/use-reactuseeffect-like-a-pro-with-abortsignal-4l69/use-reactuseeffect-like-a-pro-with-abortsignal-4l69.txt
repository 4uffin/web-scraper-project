useEffect With AbortSignal - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE‚Äîthe hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project ‚Äî features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Crypto Forem
Follow
A collaborative community for all things Crypto‚Äîfrom Bitcoin to protocol development and DeFi to NFTs and market analysis.
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Valery Zinchenko
Posted on Sep 15
useEffect With AbortSignal
#webdev
#tutorial
#react
#frontend
React Practices (3 Part Series)
1
Reduce your useEffect influence
2
Uncontrollable Modal in React
3
useEffect With AbortSignal
If this is the way you subscribe to events, then you must keep reading.
function Component() {
const ref = useRef()
useEffect(() => {
if (ref.current == null) return
function onDrag(event: DragEvent) { ... }
function onDrop(event: DragEvent) { ... }
ref.current.addEventListener("drag", onDrag)
ref.current.addEventListener("drop", onDrop)
return () => {
ref.current.removeEventListener("drag", onDrag)
ref.current.removeEventListener("drop", onDrop)
}
}, [])
return <div ref={ref} />
}
Enter fullscreen mode
Exit fullscreen mode
Of course, there are other ways to subscribe to these ones such as:
<div onDrag={onDrag} onDrop={onDrop} />
Using libraries with utility hooks like useEvent
However, the problem is that - it's not always accessible.
If you want to properly listen to resize updates, you should use ResizeObserver or to track viewport enter, the IntersectionObserver.
There are cases when you need to integrate third-party libraries that are not React into React üò±, and subscribe to the elements like shown in the example above.
The shows example is already ok, but we can raise the bar a little bit. And this is good to know several ways how to implement something rather than single one.
AbortSignal
AbortSignal is simply an object that can be passed when you subscribe to an event source, either addEventListener or when(...).subscribe.
So instead of calling a separate function to unsubscribe, you can just pass a signal and that's it. The subscription or subscriptions can terminated when signal.abort is called.
Improved useEffect
To make an improvement, we simply introduce a AbortController to have access to abort and the signal that we can pass around.
function Component() {
const ref = useRef()
useEffect(() => {
if (ref.current == null) return
const abortController = new AbortController
const signal = abortController.signal
ref.current.addEventListener("drag", event => { ... }, { signal })
ref.current.addEventListener("drop", event => { ... }, { signal })
return () => abortController.abort()
}, [])
return <div ref={ref} />
}
Enter fullscreen mode
Exit fullscreen mode
And you can go further and create a very simple custom hook
function useEffectScoped(callback: (signal: AbortSignal) => void) {
useEffect(() => {
const abortController = new AbortController
callback(abortController.signal)
return () => abortController.abort()
}, [])
}
Enter fullscreen mode
Exit fullscreen mode
To transform the final implementation into this
function Component() {
const ref = useRef()
useEffectScoped(signal => {
if (ref.current == null) return
ref.current.addEventListener("drag", event => { ... }, { signal })
ref.current.addEventListener("drop", event => { ... }, { signal })
})
return <div ref={ref} />
}
Enter fullscreen mode
Exit fullscreen mode
Which eliminates extra unsubscribe call (removeEventListener) for each subscription (addEventListener), shorts AbortController and return declaration.
In total we're abstracting away from almost half of the code!
New Framework Ripple? What about Others?
Support Proton with a ‚≠ê
React Practices (3 Part Series)
1
Reduce your useEffect influence
2
Uncontrollable Modal in React
3
useEffect With AbortSignal
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
‚Ä¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Valery Zinchenko
Follow
Self-taught developer. Contribute to open source. Question everything, why everything's so slow...
Location
Montenegro
Education
Czeck/English/Japanese language school, Musical College and YouTube
Pronouns
üå∏
Work
Web-engineer at Pinely International
Joined
Nov 27, 2023
More from Valery Zinchenko
New Framework Ripple? What about Others?
#webdev
#react
#opensource
#discuss
Embeddable Open Source Unity-like Editor for ThreeJS
#webdev
#discuss
#opensource
#showdev
Transparent NodeParent Without Wapprer: a new DOM Node
#opensource
#tooling
#frontend
#showdev
üíé DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community ‚Äî A space to discuss and keep up software development and manage your software career
Home
DEV++
Reading List
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Free Postgres Database
Software comparisons
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community ¬© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account