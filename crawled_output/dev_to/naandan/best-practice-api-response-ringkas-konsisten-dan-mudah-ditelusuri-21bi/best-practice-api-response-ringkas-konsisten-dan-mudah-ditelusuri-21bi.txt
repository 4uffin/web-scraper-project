Best Practice API Response JSON Ringkas, Konsisten, dan Mudah Ditelusuri - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE‚Äîthe hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project ‚Äî features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto‚Äîfrom Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Nandan Ramdani
Posted on Sep 13
Best Practice API Response JSON Ringkas, Konsisten, dan Mudah Ditelusuri
#webdev
#programming
#tutorial
#learning
Kalau kita ngomongin soal bikin API, biasanya fokusnya ada di endpoint dan fitur. Tapi sering banget bagian respons API disepelekan. Padahal, kalau format responsnya berantakan, ujung-ujungnya frontend jadi ribet, debugging jadi susah, dan bandwidth kepake lebih banyak dari seharusnya.
Di blog ini, kita bakal bahas gimana sih format API response yang ideal: ringkas, konsisten, gampang ditelusuri, dan ramah untuk frontend.
Kenapa Format Respons API Penting?
Konsistensi ‚Üí frontend nggak perlu bikin 1000 kondisi khusus buat parsing JSON.
Efisiensi ‚Üí nggak buang-buang bandwidth dengan field yang redundant.
Debugging gampang ‚Üí ada request_id biar tracing di log backend cepat.
Multibahasa oke ‚Üí error code standar bisa ditranslate frontend sesuai bahasa user.
Intinya: bikin hidup developer frontend lebih tenang, dan developer backend lebih gampang ngelacak error. Win-win!
Prinsip Dasar Format Respons
Ada beberapa prinsip yang bisa kita pegang:
HTTP status code dipakai buat status utama (200, 400, 401, 404, 500, dst).
Body respons fokus ke isi ‚Üí data kalau sukses, error kalau gagal.
Selalu ada request_id buat tracing.
Error pakai kode standar ‚Üí frontend yang nentuin pesan human-friendly.
Contoh Format Respons Konsisten
‚úÖ Respons Sukses ‚Äì Single Resource
{
"request_id": "uuid",
"data": {
"id": 123,
"name": "Nandan",
"email": "nandan@example.com"
}
}
Enter fullscreen mode
Exit fullscreen mode
‚úÖ Respons Sukses ‚Äì List + Pagination
{
"request_id": "uuid",
"items": [
{ "id": 1, "title": "First Item" },
{ "id": 2, "title": "Second Item" }
],
"meta": {
"page": 1,
"per_page": 10,
"total": 25
}
}
Enter fullscreen mode
Exit fullscreen mode
‚ùå Error Validasi (400/422)
{
"request_id": "uuid",
"error": {
"message": "Payload Validation Failed",
"code": "VALIDATION_ERROR",
"fields": {
"email": ["REQUIRED", "INVALID_FORMAT", "UNIQUE"],
"password": ["REQUIRED", "MIN_LENGTH"]
}
}
}
Enter fullscreen mode
Exit fullscreen mode
‚ùå Error Unauthorized (401)
{
"request_id": "uuid",
"error": {
"message": "Unauthorized",
"code": "UNAUTHORIZED"
}
}
Enter fullscreen mode
Exit fullscreen mode
‚ùå Error Not Found (404)
{
"request_id": "uuid",
"error": {
"message": "Resource Not Found",
"code": "NOT_FOUND"
}
}
Enter fullscreen mode
Exit fullscreen mode
‚ùå Error Internal Server (500)
{
"request_id": "uuid",
"error": {
"message": "Internal Server Error",
"code": "INTERNAL_ERROR"
}
}
Enter fullscreen mode
Exit fullscreen mode
Daftar Kode Error Standar
Supaya konsisten, backend harus pakai kode error yang jelas. Frontend cukup mapping kode ini ke pesan sesuai bahasa.
üîπ Validasi
REQUIRED ‚Üí field kosong padahal wajib
INVALID_TYPE ‚Üí tipe data salah
INVALID_FORMAT ‚Üí format salah (contoh: email nggak valid)
MIN_LENGTH / MAX_LENGTH ‚Üí panjang string nggak sesuai
MIN_VALUE / MAX_VALUE ‚Üí angka nggak sesuai batas
UNIQUE ‚Üí data sudah ada (contoh: email sudah terpakai)
ENUM_VALUE ‚Üí pilihan tidak valid
MISMATCH ‚Üí konfirmasi nggak cocok (contoh: password & confirm_password)
üîπ Auth & Security
UNAUTHORIZED ‚Üí belum login / token nggak ada
INVALID_TOKEN ‚Üí token expired atau salah
FORBIDDEN_ACTION ‚Üí user nggak punya izin
ACCOUNT_LOCKED ‚Üí akun terkunci
TOO_MANY_REQUESTS ‚Üí rate limit tercapai
üîπ Server
INTERNAL_ERROR ‚Üí error tak terduga
SERVICE_UNAVAILABLE ‚Üí dependency down
TIMEOUT ‚Üí request timeout
CONFLICT ‚Üí resource conflict
Kenapa Nggak Perlu Field Tambahan Kayak resource?
Sederhana aja: kalau kita request ke /users/123 dan responsnya 404 NOT_FOUND, udah jelas resource yang dimaksud adalah user.
Menambahkan "resource": "user" di body malah bikin inkonsistensi karena nggak semua error butuh field itu. Jadi mendingan minimalis dan konsisten.
Kesimpulan
Format respons API yang ideal itu:
Sukses ‚Üí data atau items + meta.
Error ‚Üí selalu error.message + error.code (dan fields kalau validasi).
Selalu ada request_id.
Frontend yang translate error code, bukan backend.
Dengan format ini:
Backend lebih ringan dan hemat bandwidth.
Frontend lebih fleksibel dan bisa multi-bahasa.
Debugging lebih gampang karena ada request_id.
üëâ Jadi, sebelum mikirin microservices atau scaling yang ribet, pastikan dulu API kamu punya respons yang konsisten, rapi, dan developer-friendly. Percaya deh, ini bakal menghemat banyak waktu dan tenaga tim di masa depan.
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
‚Ä¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Nandan Ramdani
Follow
Here
Location
Indonesia
Education
Software Engineering - High School
Pronouns
He
Joined
Oct 23, 2024
More from Nandan Ramdani
Mengelola User, Permission, dan Bucket di MinIO via CLI
#s3
#minio
#storage
#programming
Memilih Database SQL, NoSQL, In-Memory, dan Analitik Sesuai Use Case
#database
#programming
#learning
#infrastructure
Membangun Aplikasi yang Baik dan Aman
#database
#infratructure
#programming
#webapp
üíé DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community ‚Äî A space to discuss and keep up software development and manage your software career
Home
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community ¬© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account