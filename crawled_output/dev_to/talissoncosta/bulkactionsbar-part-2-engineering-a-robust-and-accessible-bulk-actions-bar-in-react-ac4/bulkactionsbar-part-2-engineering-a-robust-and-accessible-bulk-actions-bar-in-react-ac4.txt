BulkActionsBar - Part 2 - Engineering a Robust and Accessible Bulk Actions Bar in React - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE‚Äîthe hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project ‚Äî features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto‚Äîfrom Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Talisson
Posted on Sep 12
BulkActionsBar - Part 2 - Engineering a Robust and Accessible Bulk Actions Bar in React
#react
#a11y
#frontend
#designsystem
In Part 1, we explored how micro-interactions elevate the user experience of a Bulk Actions Bar. In this article, we‚Äôll dive into the technical engineering challenges that made those interactions possible while ensuring flexibility, performance, and accessibility.
Overflow Detection: Calculating Visible Items
One of the first hurdles was determining how many buttons could fit inline based on container width. CSS alone wasn‚Äôt sufficient.
I built a custom hook useVisibleChildrenCount using ResizeObserver to dynamically calculate the number of visible items:
export function useVisibleChildrenCount({ containerEl, isEnabled, gap = 0 }) {
const [visibleCount, setVisibleCount] = useState(0)
const measureVisibleItems = useCallback(() => {
if (!containerEl) return
const childrenEls = Array.from(containerEl.children).filter(
(el) => el instanceof HTMLDivElement
)
let totalWidth = 0
let fitCount = 0
for (let i = 0; i < childrenEls.length; i++) {
const childWidth = childrenEls[i].offsetWidth
const spaceRequired = totalWidth === 0 ? childWidth : childWidth + gap
if (totalWidth + spaceRequired <= containerEl.offsetWidth) {
totalWidth += spaceRequired
fitCount += 1
} else {
break
}
}
setVisibleCount(fitCount)
}, [containerEl, gap])
useEffect(() => {
if (!isEnabled || !containerEl) return
const observer = new ResizeObserver(() => {
window.requestAnimationFrame(measureVisibleItems)
})
observer.observe(containerEl)
measureVisibleItems()
return () => observer.disconnect()
}, [containerEl, isEnabled, measureVisibleItems])
return isEnabled ? visibleCount : containerEl?.children.length || 0
}
Enter fullscreen mode
Exit fullscreen mode
This hook allowed the component to adapt in real-time as container dimensions changed.
The Dropdown Menu: Desktop vs Mobile Submenus
Calendly uses react-aria-components for accessible menus. Handling nested submenus that behave differently on desktop and mobile introduced challenges:
MenuTrigger/MenuContent structure is rigid.
Mobile submenus needed to stack as overlays.
Submenu depth was dynamic and recursive.
Attempt #1: Portal in Dropdown Item
In our first approach, we tried rendering submenus into a portal placed inside the dropdown menu item itself. The idea was to leverage a portal to visually stack submenus while keeping the parent menu open. However, React Aria‚Äôs strict DOM structure and focus management expectations made this unfeasible, as it broke assumptions about where menu content should exist in the hierarchy.
Attempt #2: Root Content Replacement with Stack State
The final solution was to manage a submenu stack state within MenuContent, where the active submenu would replace the root content entirely. On mobile, when a submenu is triggered, we swapped the root content node with the submenu node, simulating a page stack experience. This allowed us to preserve React Aria‚Äôs accessibility features while giving us full control over the submenu transitions.
Center Alignment with Side Navigation Constraints
Calendly‚Äôs main product has a persistent left sidebar, which shifted the content area. My initial implementation of the BulkActionsBar was viewport-centered, which appeared misaligned.
To fix this, we adopted an ‚ÄúOutlet Pattern‚Äù:
Render a wrapper Outlet component aligned to the main content area.
Pass a ref to this Outlet.
Use a portal strategy to render the BulkActionsBar into this outlet.
This approach ensured visual alignment regardless of sidebar presence.
Recursive Submenus Handling
Managing recursive submenus required handling focus, depth stacking, and keyboard navigation without assumptions on submenu levels. I designed a recursive rendering strategy that adapted based on context:
On desktop: inline flyouts.
On mobile: stacked overlays.
Keyboard focus was managed dynamically, ensuring a seamless navigation experience across varying depths.
Lessons Learned
Small UI components can introduce significant architectural considerations.
Design system constraints demand flexible yet robust engineering solutions.
Accessibility cannot be an afterthought‚Äîit's foundational to component architecture.
Conclusion
Engineering a flexible BulkActionsBar required a blend of creative problem-solving and meticulous attention to UX and accessibility details. It exemplifies how thoughtful component design goes beyond visual styling, intersecting architecture, user flows, and real-world product constraints.
References:
React Aria Advanced Patterns - Slots & Stacking
Outlet Pattern (React Portals)
Special thanks to the Calendly Design Systems Team for the collaborative ideation and problem-solving sessions that made this component possible.
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
‚Ä¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Talisson
Follow
Joined
Mar 28, 2023
More from Talisson
BulkActionBar - Part 1 - The UX Micro-Interactions that Make Bulk Actions Feel Intuitive
#ux
#frontend
#designsystem
#react
Linked Lists: The Hidden Power Behind React Hooks
#react
#frontend
#computerscience
#reacthooks
Hooks Under the Hood: How React Hooks Actually Work
#react
#webdev
#javascript
#softwareengineering
üíé DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community ‚Äî A space to discuss and keep up software development and manage your software career
Home
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community ¬© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account