Links instead of repetition - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SREâ€”the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project â€” features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Cryptoâ€”from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Mircea Cadariu
Posted on Sep 11
Links instead of repetition
#programming
#database
#webdev
#backend
Today I'm sharing with you a principle that I keep encountering in several systems I'm researching, appearing in different forms but always serving the same underlying goal: removing redundancy through indirection.
I've structured this post into four separate patterns, let me walk you through them and you will see how all share the same substrate of favoring links instead of repetition.
Dictionary Encoding
Dictionary encoding is perhaps the clearest expression. Instead of storing repeated values directly, we create a dictionary (lookup table) and store only references to entries in that dictionary.
Let's consider this array:
Fruits: ["apple", "banana", "apple", "cherry", "banana", "apple"]
We can transform it to:
Dictionary: {0: "apple", 1: "banana", 2: "cherry"}
Fruits: [0, 1, 0, 2, 1, 0]
The same information is stored, however this approach has the benefit of immediate reduction of storage space, but we've also
managed to establish a single source of truth for each unique value. Hmm, where have you heard this before..
Database Normalization
Database normalization takes this same principle but applies it to relational data structures.
For example, instead of repeating customer information across every order record, we create separate tables and link them through foreign keys.
Denormalized:
Orders: [order_id, customer_name, customer_email, product_name, quantity]
Normalized:
Customers: [customer_id, name, email]
Products: [product_id, name, price]
Orders: [order_id, customer_id, product_id, quantity]
This isn't just about storage efficiency, but also about data integrity. When customer information changes, there's only one place to update it. We've eliminated the possibility of inconsistent data.
String Interning
String interning is more of a programming language runtime feature, and it ensures that identical string literals share the same memory location. Instead of creating multiple string objects with the same content, the runtime maintains a pool of unique strings and returns references to existing instances.
As a case study, see for example this entry from the Java Language Specification describing how it works in Java. We find this concept in python as well.
Outside of the programming languages domain, this is a post from Victoria Metrics on how they applied it in their solution.
German Strings
"German strings" is a clever string optimization technique to know about when you're building a database. The approach stores a 4-character prefix directly within the string header, avoiding pointer dereferences for common string operations. The key insight is that most string operations only need to examine the beginning of a string.
Let's consider this full string: "PostgreSQL is awesome".
This is the German string structure:
[length][prefix: "Post"][pointer] -> "greSQL is awesome"
This creates an indirection pattern where the prefix enables fast string comparisons and filtering operations without dereferencing pointers, since most mismatches can be detected by comparing just the first few characters.
However, German strings aren't always optimal. The overhead per string can be problematic for certain workloads. As the team at Polar Signals described, for low-cardinality string columns (like airport codes or status enums), simple dictionary encoding provides a 75% memory reduction compared to German strings.
Conclusion
The pattern of creating links to canonical sources is prevalent because it addresses fundamental challenges: storage efficiency, data consistency, and maintainability.
The next time you encounter repeated data in your systems, ask yourself: "Could I consider a link here instead?" The answer might lead you to refactor towards more elegant, efficient, and maintainable solutions.
Thanks for reading! Until next time!
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
â€¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Mircea Cadariu
Follow
Software engineer â€¢ Data systems builder â€¢ Code mender â€¢ FlÃ¢neur â€¢ Highlands explorer â€¢ Hello ðŸ‘‹
Location
Scotland
/ Romania
Education
MSc @ Delft University of Technology
Joined
Dec 2, 2023
More from Mircea Cadariu
Loading One-to-Many relationships efficiently using Spring Data JPA and Postgres
#database
#postgres
#spring
#java
How to add rate limiting to your API using TigerBeetle
#springboot
#database
#java
#grafana
High speed data loading into Postgres
#database
#postgres
#performance
#sql
ðŸ’Ž DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community â€” A space to discuss and keep up software development and manage your software career
Home
Welcome Thread
Reading List
Tags
About
Contact
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem â€” the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community Â© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account