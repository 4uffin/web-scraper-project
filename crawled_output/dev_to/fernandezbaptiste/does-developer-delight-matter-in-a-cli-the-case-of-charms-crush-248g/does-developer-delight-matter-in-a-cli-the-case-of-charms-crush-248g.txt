Does Developer Delight Matter in a CLI? The Case of Charm‚Äôs Crush - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE‚Äîthe hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project ‚Äî features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto‚Äîfrom Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Bap
Posted on Sep 12
‚Ä¢ Originally published at Medium on Sep 12
Does Developer Delight Matter in a CLI? The Case of Charm‚Äôs Crush
#aiagent
#aicoding
#devrel
#terminal
Released in July, and now amassing stars, Crush is a new open-source command-line AI coding assistant developed by CharmBracelet (the team behind tools like Glow).
It provides a terminal-based interface for devs to interact with a coding agent ( npm install -g @charmland/crush ). Crush works with a wide range of models (via OpenAI, Anthropic, and other APIs) and lets you switch models mid-session while preserving context.
You can maintain multiple sessions per project, meaning Crush remembers conversation history and file context across runs. This helps when working on larger tasks or hopping between different projects without losing context.
Crush ties into Language Server Protocol (LSP) servers to inject code-aware context into the AI‚Äôs prompts. If you‚Äôre unfamiliar with the term, LSP lets editors talk to language servers for code intelligence: a simple example is that when you type in Python, the LSP automatically suggests
This means Crush can understand type signatures, function dependencies, and project structure. It also supports MCPs for plugging in external tools and context sources.
True to Charm‚Äôs ethos of making the command line ‚Äúglamorous‚Äù, with successful OS projects like bubbletea, gum, and lipgloss, Crush has a modern and playful text-based UI. It features a split-pane view (with things like a dedicated diff view for code changes) and intuitive keyboard navigation, aiming to feel friendly and futuristic.
If you're enjoying this content, you might enjoy this 1-pager newsletter I share with over 7,000+ AI native devs. Stay ahead, and get weekly insights here.
Community: Crush sparks joy, comparisons, and cost questions
The consensus so far: Crush offers a refreshing UX and solid foundation, but it‚Äôs one player in a bigger trend. As one observer quipped, the ‚Äúterminal-based AI coding agents‚Äù trend is hot, and everyone is experimenting to see which tool will stick.
The word ‚Äúplayful‚Äù came up frequently in our research‚Ää‚Äî‚ÄäCharmBracelet‚Äôs TUI framework pedigree (Bubble Tea, etc.) is well respected, so seeing those slick visuals applied to an AI assistant delighted people.
Shifting gear, a Hacker News user requested a detailed ‚Äúcomparison between all these new tools‚Äù‚Ää‚Äî‚Äälisting Crush, Claude Code, OpenCode, Aider, and Cortex‚Ää‚Äî‚Ääbecause ‚ÄúI just can‚Äôt get an easy overview of how each tool works and is different‚Äù.
This captures a common reaction: excitement about the tool, paired with the question ‚ÄúHow does it stack up against X?‚Äù. This sentiment shows both the interest in these AI dev agents and the fragmentation of the ecosystem. It‚Äôs not often we see multiple similar tools gain popularity almost simultaneously, so community members are trying to map the space, often through first-hand trials and discussions.
Some devs also lamented that they feel ‚Äúin golden handcuffs‚Äù with proprietary tools like Claude‚Äôs official app, because those offer unlimited usage for a flat rate, whereas using something like Crush with pay-as-you-go APIs could rack up costs. We might see future updates focus on easier integration with subscription-based models or better support for local LLMs to alleviate cost issues.
Will AI dev tools win on delight? Thoughts on DevX vs Model Capability
OpenAI‚Äôs CFO recently described a vision of an ‚Äúagentic software engineer‚Äù‚Ää‚Äî‚Ääessentially an AI that could take a high-level project description and autonomously build and iteratively improve software.
AI is becoming a first-class citizen in dev workflows. Just as version control or stack overflow search became ingrained in a dev‚Äôs day-to-day, AI assistants (be it in the terminal, editor, or IDE) are heading in the same direction, helping with brainstorming, coding, debugging, and documentation. But, who will win devs‚Äô hearts?
Many of these AI coding assistants rely on the same or similar underlying models. If every tool can hook up to GPT-5, Claude Opus, or the next open-source model, then what sets them apart? I believe there is merit in thinking that it would be how effectively they let devs harness those models and how much delight they bring to the experience.
I‚Äôve come to a similar conclusion upon writing a comparison of Windsurf, Cursor, Copilot with GPT-5. Building with these tools brought me to the finish line in all cases. But how I got there, and the feelings I had as a dev varied. The real differences showed up in workflow ergonomics, UI polish, and how much hand-holding each agent needed.
History offers instructive analogies: Betamax vs. VHS is often cited‚Ää‚Äî‚ÄäBetamax was arguably the superior video tape technology, but it lost the format war due to practical UX factors (shorter recording time, higher costs, less industry support) . Similarly, HD DVD vs. Blu-ray ended with Blu-ray victorious not purely for technical reasons but due to strategic partnerships and consumer perception.
Conversely, a pleasant, well-integrated tool can win even if under the hood it‚Äôs not radically different. Crush‚Äôs playful interface and thoughtful touches (like preserving scrollback, offering diff views, etc.) might seem cosmetic, but they significantly impact adoption.
As one HN user pointed out, even something as simple as syntax highlighting or colorful text can change how we feel about a tool‚Ää‚Äî‚Äädecades ago, some old school devs scoffed at such features as unnecessary, yet today we take them for granted as usability must-haves.
Looking ahead, AI dev tools will increasingly compete on the design choices that shape how enjoyable and intuitive they feel to use. Delight matters. Still, real hurdles remain: accuracy, reliability, and trust in code generation. Developers will need guardrails‚Ää‚Äî‚Äätests, reviews, and structured practices- to confidently fold AI into their workflows.
At AI Native Dev, we believe one promising path is spec-driven development: anchoring AI contributions in clear, testable specifications that keep humans in the loop and guardrails agents. If you‚Äôre curious about how this concept, you can explore more about it here.
Originally published at https://ainativedev.io.
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
‚Ä¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Bap
Follow
Helping build the AI Native Development community
Location
London, United Kingdom
Education
Imperial College London
Work
DevRel @Tessl.io
Joined
May 3, 2023
More from Bap
13 tools for increased productivity as a DevRel
#productivity
#career
#discuss
#devrel
üíé DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community ‚Äî A space to discuss and keep up software development and manage your software career
Home
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community ¬© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account