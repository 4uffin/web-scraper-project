Code Review and Testing â€“ Lessons Learned (OSD600LAB_1) - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SREâ€”the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project â€” features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Cryptoâ€”from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Hitesh Sachdeva
Posted on Sep 13
Code Review and Testing â€“ Lessons Learned (OSD600LAB_1)
#testing
#identity
#challenge
How did you go about doing your code reviews? Do you prefer an async or sync approach? Why?
I approached code reviews by first reading through the repositoryâ€™s README to understand how the tool is supposed to work. Then I tested the tool locally with different inputs (files, directories, non-existent paths, large files, etc.) to see where it failed. After that, I read the source code (utils.js and index.js) to identify possible technical issues, like path handling, error handling, and file reading logic.
I prefer an async approach because it gives me more flexibility. I could test and review the code in my own time, document the issues, and then share them with the repo owner. Sync reviews are useful for quick feedback, but async gave me more time to dig deep into the project.
What was it like testing and reviewing someone else's code? Did you run into any problems? Did anything surprise you?
Testing and reviewing someone elseâ€™s code was both interesting and challenging. I had to spend time understanding how the code worked before I could test it properly. The biggest challenge was identifying the difference between intended behavior vs. actual bugs.
One surprise was that the tool silently skipped files larger than 16KB without any warning. I expected it to at least log a message, so this was something that could confuse end-users.
What was it like having someone test and review your code? Were you surprised by anything?
When others started reviewing my code, I was a little nervous because I knew there were still rough edges and unfinished parts. At first, it felt uncomfortable having someone else point out gaps that I had missed. But as I went through the process, I realized that reviews arenâ€™t about criticizing, theyâ€™re about making the project better. It actually felt encouraging once I saw how much valuable feedback came out of it. The surprising part was how even small issues, like unclear setup instructions, can make a big difference for someone else trying to use the tool.
What kind of issues came up in your testing and review? Discuss a few of them in detail.
During testing and review, I found a mix of functionality and usability issues. For example, passing a non-existent file caused unhandled exceptions because fs.statSync wasnâ€™t properly checked. I also noticed cross-platform problems, like path concatenation using /, which may fail on Windows. On the usability side, the README lacked key details and had unclear instructions, making setup confusing. Finally, the tool silently skipped files larger than 16KB without notifying the user, which could lead to incomplete results. These issues showed me the importance of error handling, cross-platform compatibility, and clear documentation.
Provide links to issues you filed, and summarize what you found
I filed several issues during my review of the project:
Tool crashes when given non-existent files Missing error handling for invalid paths caused the tool to throw exceptions instead of showing a clear error message.
Path concatenation in buildTree may break on Windows The function used / directly instead of path.join(), which can create invalid paths on Windows systems.
readFileContents silently skips files larger than 16KBFiles exceeding the size limit were ignored without any warning, leading to incomplete outputs and confusion.
README has missing info and unclear instructions Documentation lacked project requirements and had unclear usage notes (e.g., npm link), making it harder for new users to set up the tool.
Were you able to fix all your issues? What was that like?
I havenâ€™t fixed all the issues yet, Iâ€™m still working on them. Some are easier, like updating the README, while others take more time. Overall, itâ€™s a work in progress.
What did you learn through the process of doing the testing and reviewing?
I learned that code review is not just about finding bugs, itâ€™s also about improving usability, documentation, and maintainability. Testing another personâ€™s project gave me insights into how users might interact with my own projects. I also realized that clear error messages and documentation are just as important as working code.
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
â€¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Hitesh Sachdeva
Follow
Joined
Sep 5, 2025
More from Hitesh Sachdeva
Building share-my-repo: My Journey Contributing to Open Source
#opensource
#challenge
#python
#llm
ðŸ’Ž DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community â€” A space to discuss and keep up software development and manage your software career
PÃ¡gina Inicial
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
Sobre
Contato
Free Postgres Database
Software comparisons
Forem Shop
CÃ³digo de Conduta
PolÃ­tica de Privacidade
Termos de Uso
Built on Forem â€” the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community Â© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account