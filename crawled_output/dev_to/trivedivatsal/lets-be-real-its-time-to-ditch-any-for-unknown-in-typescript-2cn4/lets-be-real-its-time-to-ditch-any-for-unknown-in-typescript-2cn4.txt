Lets Be Real: Its Time to Ditch `any` for `unknown` in TypeScript - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE‚Äîthe hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project ‚Äî features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto‚Äîfrom Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Vatsal Trivedi
Posted on Sep 22
Lets Be Real: Its Time to Ditch `any` for `unknown` in TypeScript
#typescript
#javascript
#codereview
We‚Äôve all seen it in a pull request. A developer hits a snag with a tricky data type, and to get things working, they reach for the easiest tool available: any. It gets the job done and silences the compiler, but it comes at a hidden cost.
Our team has a Husky pre-commit hook set up to flag any, which is a great first step. But we all know that in a pinch, the --no-verify flag is an easy out. This makes the code review our most important line of defense. When you spot an any that has slipped through, it's the perfect opportunity to advocate for its safer, smarter alternative: unknown.
The Danger of any: A "Trust Me" Promise to the Compiler üôà
Let‚Äôs be blunt: using any is like telling the TypeScript compiler to just look the other way. When you type a variable as any, you're effectively saying, "Disable all type-checking for this. I know what I‚Äôm doing."
This means you can do literally anything with that variable, and TypeScript won't stop you until it explodes at runtime.
Here's a classic example:
let myData: any;
myData = "This is a string";
// TypeScript has no problem with this line...
// but it will crash your app!
console.log(myData.toFixed(2));
// üò± Uncaught TypeError: myData.toFixed is not a function
// The compiler is also perfectly happy with these obvious errors:
myData.someMethodThatDoesNotExist();
const result = myData * 10;
Enter fullscreen mode
Exit fullscreen mode
Every any you use punches a hole in the type safety we rely on TypeScript for. It turns potential compile-time catches into frustrating runtime bugs and makes refactoring a dangerous guessing game.
The Savior: unknown to the Rescue! ü¶∏
This is where unknown comes in and saves the day. Just like any, you can assign any value‚Äîa string, a number, an object‚Äîto a variable typed as unknown.
So what‚Äôs the big deal? The crucial difference is that unknown won't let you do anything with the value until you first prove what it is. You are forced to handle the uncertainty before you can use it.
Think of an unknown variable like a locked box. You know something‚Äôs inside, but you have to check what it is before you can safely use it.
Let's fix the previous example with unknown:
let myData: unknown;
myData = "This is a string";
// The compiler immediately stops you. This is a good thing!
// ‚ùå Error: Object is of type 'unknown'.
console.log(myData.toFixed(2));
// Here's how you work with it safely:
if (typeof myData === 'number') {
// OK, inside this block, TypeScript now knows myData is a number.
console.log(myData.toFixed(2));
} else if (typeof myData === 'string') {
// And in here, it knows it's a string.
console.log(myData.toUpperCase());
}
Enter fullscreen mode
Exit fullscreen mode
By switching to unknown, you‚Äôre prompted to write more defensive, robust code. It makes you handle different cases explicitly with type guards like typeof or instanceof, leading to a much more stable application.
The Code Reviewer's Playbook
Spotting an any during a code review is a great teaching moment. Here‚Äôs how to approach it constructively:
Understand the "Why": The developer was likely just trying to solve a typing problem quickly. No need to be critical.
Explain the Risk: Briefly mention that any bypasses type safety and can hide bugs that will only show up at runtime.
Offer the Solution: Suggest replacing any with unknown. Then, guide them to add the necessary type check (e.g., an if block) to safely access the variable. This not only resolves the immediate risk but also makes the code's intent clearer for everyone.
The Bottom Line
While any is a tempting shortcut, it undermines the very reason we use TypeScript. unknown gives you the same flexibility to accept any type of value but without sacrificing type safety.
By encouraging the use of unknown in our code reviews, we're fostering a habit of writing more deliberate, predictable, and robust code. It forces us to confront uncertainty head-on, resulting in fewer bugs and a healthier codebase. So next time you're tempted to use any, pause and reach for unknown instead. Your future self‚Äîand your teammates‚Äîwill be grateful.
Top comments (3)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Collapse
Expand
Jess Lee
Jess Lee
Jess Lee
Follow
Building DEV and Forem with everyone here. Interested in the future.
Email
jess@forem.com
Location
USA / TAIWAN
Pronouns
she/they
Work
Co-Founder & COO at Forem
Joined
Jul 29, 2016
‚Ä¢
Sep 22
Dropdown menu
Copy link
Hide
Great first post!
Like comment:
Like comment:
2¬†likes
Like
Comment button
Reply
Collapse
Expand
Vatsal Trivedi
Vatsal Trivedi
Vatsal Trivedi
Follow
Developer ‚Ä¢ Web ‚Ä¢ Frontend ‚Ä¢ UI ‚Ä¢ Graphics
Location
Bangalore
Joined
May 8, 2018
‚Ä¢
Sep 22
Dropdown menu
Copy link
Hide
Thank you
Like comment:
Like comment:
2¬†likes
Like
Comment button
Reply
Collapse
Expand
Kyle Logue
Kyle Logue
Kyle Logue
Follow
Frontend dev tired of waiting 4+ days for APIs. Researching why contract-first development fails in practice. Building CLI experiments to solve API coordination workflow problems.
Location
Willow Spring, NC
Work
Senior Frontend Developer
Joined
Sep 19, 2025
‚Ä¢
Sep 22
Dropdown menu
Copy link
Hide
This resonates with me so much! I've been burned by the any escape hatch more times than I care to admit, especially when dealing with API responses in contract-first development.
One pattern I've found particularly useful is combining unknown with type predicates for API data validation:
function isUserResponse(data: unknown): data is User {
return typeof data === 'object' &&
data !== null &&
'id' in data &&
'email' in data;
}
// Now you get full type safety
if (isUserResponse(apiResponse)) {
console.log(apiResponse.email); // TypeScript knows this is safe
}
Enter fullscreen mode
Exit fullscreen mode
The forcing function aspect you mentioned is spot-on - unknown makes you explicitly handle the uncertainty, which catches so many runtime issues during development rather than in production.
Have you found any particular patterns or libraries that make the type guard approach more ergonomic? Always curious how other devs structure their validation workflows.
Like comment:
Like comment:
1¬†like
Like
Comment button
Reply
Code of Conduct
‚Ä¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Vatsal Trivedi
Follow
Developer ‚Ä¢ Web ‚Ä¢ Frontend ‚Ä¢ UI ‚Ä¢ Graphics
Location
Bangalore
Joined
May 8, 2018
Trending on DEV Community
Hot
Skip JSON, Use Blade: A Simpler Way to Build Dynamic Laravel UIs Without JS Frameworks
#laravel
#javascript
#webdev
#php
Why Are You Not Reading My Post?
#tutorial
#discuss
#productivity
#career
3 Reasons You're in Tech Post-Layoff Shock (Based on personal experience)
#career
#beginners
#learning
üíé DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community ‚Äî A space to discuss and keep up software development and manage your software career
P√°gina Inicial
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
Sobre
Contato
Free Postgres Database
Software comparisons
Forem Shop
C√≥digo de Conduta
Pol√≠tica de Privacidade
Termos de Uso
Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community ¬© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account