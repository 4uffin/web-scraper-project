Building a Pluggable Cache: A Low-Level Design Walkthrough - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SREâ€”the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project â€” features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Cryptoâ€”from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
nk sk
Posted on Sep 23
Building a Pluggable Cache: A Low-Level Design Walkthrough
#systemdesign
#designpatterns
#algorithms
#java
Caching is an essential technique for building high-performance, scalable systems. But implementing a cache that supports different write strategies, eviction policies, and invalidation mechanisms isnâ€™t trivial. In this blog, weâ€™ll walk through a complete Low-Level Design (LLD) of a cache in Java, using proven design patterns to make it modular, extensible, and production-ready.
1. Design Goals
We want a cache system that supports:
Multiple write strategies: write-through, write-back, write-around
Multiple eviction policies: LRU, LFU, TTL
Invalidation mechanisms: listener-based notifications
Persistence abstraction: in-memory, database, or external store
Metrics: cache hits and misses
Extensibility via clean interfaces and design patterns
2. Design Patterns Used
Strategy Pattern â†’ for eviction and write strategies
Factory + Builder â†’ for cache creation with flexible configs
Observer Pattern â†’ for invalidation listeners
Singleton â†’ for metrics
Decorator â†’ for TTL-based eviction wrapping other policies
3. Core Interfaces
We define the key contracts:
Cache<K, V> â†’ main cache operations
EvictionPolicy<K> â†’ how entries are evicted
WriteStrategy<K, V> â†’ how writes propagate to persistence
Persistence<K, V> â†’ abstraction for underlying storage
InvalidationListener<K> â†’ observer for eviction/invalidations
4. Eviction Policies
LRU (Least Recently Used): Removes least accessed entries first.
LFU (Least Frequently Used): Removes least frequently used entries.
TTL Decorator: Wraps another policy and enforces time-to-live expiration.
This uses Strategy Pattern so you can swap policies without changing core logic.
5. Write Strategies
Write-Through: Write synchronously to cache and persistence.
Write-Back (Write-Behind): Write to cache first, persist asynchronously.
Write-Around: Write directly to persistence; cache updates only on reads.
This allows you to tune for consistency vs. performance.
6. Invalidation & Observers
We support listeners to notify when keys are invalidated (e.g., evicted). This is useful for keeping multiple caches in sync or for external logging.
7. Persistence Layer
We abstract persistence so you can plug in:
In-memory maps (for demo/testing)
Databases
Distributed caches like Redis
8. Implementation Highlights
Hereâ€™s the structured code (simplified overview):
interface Cache<K, V> { V get(K key); void put(K key, V value); void remove(K key); }
interface EvictionPolicy<K> { void recordAccess(K key); K evictKey(); }
interface WriteStrategy<K, V> { void write(K key, V value, Persistence<K, V> p); }
interface Persistence<K, V> { void write(K k, V v); Optional<V> read(K k); }
class SimpleCache<K, V> implements Cache<K, V> { /* wires strategies & policies */ }
class LruEvictionPolicy<K> implements EvictionPolicy<K> { /* linked hash set */ }
class TtlEvictionDecorator<K> implements EvictionPolicy<K> { /* adds expiry */ }
class WriteThroughStrategy<K, V> implements WriteStrategy<K, V> { /* sync */ }
class WriteBackStrategy<K, V> implements WriteStrategy<K, V> { /* async */ }
class InMemoryPersistence<K, V> implements Persistence<K, V> { /* map */ }
Enter fullscreen mode
Exit fullscreen mode
9. Factory & Config
We add a CacheFactory with a CacheConfig builder to simplify creation:
CacheConfig cfg = new CacheConfig();
cfg.capacity = 1000;
cfg.policy = new LruEvictionPolicy<>(cfg.capacity);
cfg.writeStrategy = new WriteThroughStrategy<>();
cfg.persistence = new InMemoryPersistence<>();
Cache<String, String> cache = CacheFactory.create(cfg);
Enter fullscreen mode
Exit fullscreen mode
This ensures a clean API for clients.
10. Example Usage
cache.put("a", "1");
cache.put("b", "2");
System.out.println(cache.get("a")); // hit
System.out.println(cache.get("c")); // miss â†’ load from persistence
Enter fullscreen mode
Exit fullscreen mode
We can also attach listeners:
((SimpleCache<String, String>) cache).addInvalidationListener(key ->
System.out.println("Invalidated: " + key));
Enter fullscreen mode
Exit fullscreen mode
11. Metrics
We track hits and misses with a Singleton CacheMetrics class:
System.out.println("Hits=" + CacheMetrics.get().hits());
System.out.println("Misses=" + CacheMetrics.get().misses());
Enter fullscreen mode
Exit fullscreen mode
12. Putting It All Together
Use LRU + Write-Through for strong consistency.
Use LFU + Write-Back for performance under read-heavy workloads.
Use TTL + Write-Around for freshness-sensitive data.
13. Conclusion
By applying design patterns and modular abstractions, we built a pluggable, extensible cache system. The system allows you to:
Swap eviction policies
Choose write strategies based on consistency vs. performance
Add listeners for invalidation
Extend persistence layers
This design can scale from a simple in-memory cache to a distributed system with persistence in databases or Redis.
ðŸ‘‰ Next steps: we could extend this with distributed cache support, real LFU implementation, and Spring Boot integration with Redis.
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
â€¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
nk sk
Follow
Joined
Sep 22, 2025
More from nk sk
ðŸš€ Understanding the Spring Application Lifecycle
#architecture
#java
#springboot
ðŸŒ± Understanding the Spring Bean Lifecycle
#springboot
#architecture
#beginners
#java
ðŸš€ Top Tech Resources to Stay Updated with Java, Spring Boot, Microservices, and System Design
#systemdesign
#resources
#microservices
#java
ðŸ’Ž DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community â€” A space to discuss and keep up software development and manage your software career
Home
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem â€” the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community Â© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account