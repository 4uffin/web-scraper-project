Python Basics: Mutable vs Immutable Explained (with Local Analogies) - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SREâ€”the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project â€” features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Cryptoâ€”from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Pp
Posted on Sep 12
Python Basics: Mutable vs Immutable Explained (with Local Analogies)
#python
#programming
#beginners
#productivity
When learning Python, I find some difficulty in understanding about mutable and immutable objects.
Letâ€™s me break it down in ELI5 style.
Mutable Objects
What is mutable objects: Can be changed after creation. Updates happen in place, same memory reference.
Examples: list, dict, set
Analogy 1 â€“ Blackboard
Like a blackboard in a our classroom: you can erase, rewrite, and modify the content. The board itself doesnâ€™t change, only whatâ€™s written on it.
Board == List
Content in board == List items
Analogy 2 â€“ Chicken gravy in a pot
In the pot, you can add water, salt, or more chicken (if you're hungry). Itâ€™s still more or less the same gravy, just modified.
Pot == Set
Chicken gravy == Set items
Immutable Objects
What is immutable objects: Cannot be changed once created. Any modification creates a new object in memory.
Examples: int, float, str, tuple, frozenset
Analogy 1 â€“ Exam Question Paper
Once the exam question paper is printed, you canâ€™t change it. If thereâ€™s a mistake, you need to print a new one (or provide grace marks).
Analogy 2 â€“ Idli
Once steamed, an idli canâ€™t be reshaped or unsalted. If you want a idli with less salt, you must make a new batch.
only immutable objects are hashable
Final takeaways
Understanding this helps you avoid bugs (like using mutable default arguments in functions).
Analogies are for fun. Peace.
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
â€¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Pp
Follow
Learning Python for backend
Joined
Jan 22, 2021
More from Pp
Ordered vs Unordered Types in Python
#programming
#beginners
#python
#productivity
python: printing, variables and data types
#python
#programming
#beginners
ðŸ’Ž DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community â€” A space to discuss and keep up software development and manage your software career
PÃ¡gina Inicial
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
Sobre
Contato
Free Postgres Database
Software comparisons
Forem Shop
CÃ³digo de Conduta
PolÃ­tica de Privacidade
Termos de Uso
Built on Forem â€” the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community Â© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account