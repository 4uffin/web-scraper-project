MVC vs MVVM: Deep Dive into Real-World Flow Patterns - Part 5 - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE—the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project — features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto—from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Dimension AI Technologies
Posted on Sep 13
MVC vs MVVM: Deep Dive into Real-World Flow Patterns - Part 5
#architecture
#mvc
#mvvm
#ui
MVC vs MVVM: The Decision Framework - Choosing the Right Architecture
Introduction
In the first article in this series we examined understanding the fundamental differences between MVC and MVVM, in Part 1 of our deeper dive we explored MVC's sequential flows, in Part 2 we looked at MVVM's reactive mesh, in Part 3 we compared their performance characteristics, and
in Part 4 discovered how modern frameworks blend both patterns.
Now comes the critical question: How do you choose the right architecture for your specific project?
This final Part 5 article provides a comprehensive decision framework, migration strategies, anti-patterns to avoid and real-world case studies to guide your architectural decisions.
Part 5: Decision Framework
5.1 Requirements Analysis Framework
Before choosing an architecture, systematically evaluate your requirements across multiple dimensions:
Application Type Assessment
# Application Type Scorecard
Web Application:
Server-Side Rendering Required:
Yes: +3 MVC
No: 0
SEO Critical:
Yes: +3 MVC
No: 0
Progressive Enhancement Needed:
Yes: +2 MVC
No: 0
Desktop Application:
Rich UI Interactions:
Yes: +3 MVVM
No: 0
Offline Capability:
Yes: +3 MVVM
No: 0
Native Platform Integration:
Yes: +2 MVVM
No: 0
Mobile Application:
Cross-Platform:
Yes: +2 Hybrid
No: 0
Real-Time Updates:
Yes: +2 MVVM
No: 0
Offline-First:
Yes: +3 MVVM
No: 0
API/Microservice:
RESTful Design:
Yes: +3 MVC
No: 0
Stateless Operations:
Yes: +3 MVC
No: 0
GraphQL:
Yes: +1 Hybrid
No: 0
Enter fullscreen mode
Exit fullscreen mode
Technical Requirements Matrix
Requirement
MVC Suitability
MVVM Suitability
Hybrid Suitability
Performance
Sub-second initial load
⭐⭐⭐
⭐
⭐⭐
Real-time updates
⭐
⭐⭐⭐
⭐⭐⭐
Minimal memory footprint
⭐⭐⭐
⭐
⭐⭐
High concurrent users
⭐⭐⭐
⭐
⭐⭐
User Experience
Rich interactions
⭐
⭐⭐⭐
⭐⭐⭐
Instant feedback
⭐
⭐⭐⭐
⭐⭐⭐
Offline capability
⭐
⭐⭐⭐
⭐⭐
Multi-device sync
⭐
⭐⭐
⭐⭐⭐
Development
Rapid prototyping
⭐⭐
⭐⭐
⭐⭐⭐
Testing ease
⭐⭐⭐
⭐⭐
⭐
Debugging ease
⭐⭐⭐
⭐
⭐⭐
Data Flow Complexity Analyzer
public class ArchitectureDecisionHelper
{
public ArchitectureRecommendation AnalyzeDataFlow(ProjectRequirements requirements)
{
var score = new ArchitectureScore();
// Analyze data flow patterns
if (requirements.DataFlow.IsPrimarilyRequestResponse)
score.MVC += 3;
if (requirements.DataFlow.HasComplexStateManagement)
score.MVVM += 3;
if (requirements.DataFlow.RequiresBidirectionalSync)
score.MVVM += 2;
if (requirements.DataFlow.HasMultipleDataSources)
score.Hybrid += 2;
// Analyze update patterns
switch (requirements.UpdateFrequency)
{
case UpdateFrequency.Realtime:
score.MVVM += 3;
score.Hybrid += 2;
break;
case UpdateFrequency.Periodic:
score.MVC += 1;
score.Hybrid += 2;
break;
case UpdateFrequency.OnDemand:
score.MVC += 3;
break;
}
// Analyze state complexity
if (requirements.StateComplexity > StateComplexity.Medium)
{
score.MVVM += 2;
score.Hybrid += 3;
}
return GenerateRecommendation(score);
}
private ArchitectureRecommendation GenerateRecommendation(ArchitectureScore score)
{
var max = Math.Max(score.MVC, Math.Max(score.MVVM, score.Hybrid));
return new ArchitectureRecommendation
{
Primary = GetPrimaryRecommendation(score, max),
Confidence = CalculateConfidence(score, max),
Rationale = GenerateRationale(score),
Risks = IdentifyRisks(score),
AlternativeOptions = GetAlternatives(score)
};
}
}
Enter fullscreen mode
Exit fullscreen mode
5.2 Team Capability Assessment
Architecture choice must align with team capabilities:
// Team Assessment Questionnaire
const teamAssessment = {
// Technical Skills
expertise: {
mvc: {
level: 'expert|intermediate|beginner',
yearsExperience: 5,
projectsCompleted: 10
},
mvvm: {
level: 'intermediate',
yearsExperience: 2,
projectsCompleted: 3
},
reactive: {
rxjs: true,
reactiveExtensions: false,
signalR: true
},
testing: {
unitTesting: 'expert',
integrationTesting: 'intermediate',
e2eTesting: 'beginner'
}
},
// Team Preferences
preferences: {
debuggingStyle: 'sequential|reactive',
codeOrganization: 'layered|component-based',
stateManagement: 'explicit|implicit',
learningAppetite: 'high|medium|low'
},
// Constraints
constraints: {
teamSize: 5,
seniorDevelopers: 2,
timeToMarket: '3 months',
maintenanceTeam: 'same|different',
documentationNeeds: 'high|medium|low'
}
};
function recommendArchitecture(assessment) {
const scores = {
mvc: 0,
mvvm: 0,
hybrid: 0
};
// Weight expertise heavily
if (assessment.expertise.mvc.level === 'expert') {
scores.mvc += 5;
}
if (assessment.expertise.mvvm.level === 'expert') {
scores.mvvm += 5;
}
// Consider learning curve vs time to market
const timeConstraint = parseTimeConstraint(assessment.constraints.timeToMarket);
if (timeConstraint < 6) { // months
// Favor familiar architecture
const maxExperience = Math.max(
assessment.expertise.mvc.yearsExperience,
assessment.expertise.mvvm.yearsExperience
);
if (assessment.expertise.mvc.yearsExperience === maxExperience) {
scores.mvc += 3;
}
if (assessment.expertise.mvvm.yearsExperience === maxExperience) {
scores.mvvm += 3;
}
}
// Consider maintenance
if (assessment.constraints.maintenanceTeam === 'different') {
// Favor simpler, more standard patterns
scores.mvc += 2;
scores.hybrid -= 1;
}
return {
recommendation: getHighestScore(scores),
confidence: calculateConfidence(scores),
trainingNeeds: identifyTrainingGaps(assessment, getHighestScore(scores))
};
}
Enter fullscreen mode
Exit fullscreen mode
5.3 Migration Patterns
When transitioning between architectures or adopting new patterns:
MVC to MVVM Migration
// Phase 1: Identify bounded contexts for migration
public class MigrationAnalyzer
{
public MigrationPlan CreateMigrationPlan(MvcApplication app)
{
var plan = new MigrationPlan();
// Identify candidates for migration
var candidates = app.Controllers
.Where(c => c.HasCharacteristics(
highStateComplexity: true,
frequentUserInteraction: true,
realTimeUpdates: true
))
.OrderBy(c => c.Dependencies.Count)
.ToList();
// Create phased approach
foreach (var controller in candidates)
{
var phase = new MigrationPhase
{
Component: controller.Name,
Strategy: DetermineMigrationStrategy(controller),
EstimatedEffort: EstimateEffort(controller),
Dependencies: controller.Dependencies,
RollbackPlan: CreateRollbackPlan(controller)
};
plan.Phases.Add(phase);
}
return plan;
}
private MigrationStrategy DetermineMigrationStrategy(Controller controller)
{
if (controller.IsStateless)
return MigrationStrategy.Strangler;
if (controller.HasMinimalDependencies)
return MigrationStrategy.BigBang;
return MigrationStrategy.Parallel;
}
}
// Phase 2: Implement Strangler Pattern
public class StranglerMigration
{
// Old MVC Controller
public class OrderController : Controller
{
[HttpGet]
public async Task<IActionResult> Index()
{
// Check feature flag
if (FeatureFlags.UseNewOrderUI)
{
// Redirect to new MVVM-based SPA
return Redirect("/app/orders");
}
// Continue with old MVC view
var orders = await _orderService.GetOrdersAsync();
return View(orders);
}
}
// New MVVM ViewModel (in separate SPA)
public class OrderViewModel : ViewModelBase
{
// New implementation with reactive patterns
public ObservableCollection<Order> Orders { get; }
public ICommand RefreshCommand { get; }
// Gradual migration - still uses same backend service
public OrderViewModel(IOrderService orderService)
{
_orderService = orderService; // Same service, different presentation
}
}
}
// Phase 3: Parallel Run
public class ParallelMigration
{
public class DualModeOrderSystem
{
// Both systems run simultaneously
private readonly OrderController _mvcController;
private readonly OrderViewModel _mvvmViewModel;
private readonly IMetricsCollector _metrics;
public async Task ProcessOrder(Order order)
{
// Process in both systems
var mvcTask = ProcessWithMVC(order);
var mvvmTask = ProcessWithMVVM(order);
await Task.WhenAll(mvcTask, mvvmTask);
// Compare results
if (!ResultsMatch(mvcTask.Result, mvvmTask.Result))
{
_metrics.RecordDiscrepancy(order, mvcTask.Result, mvvmTask.Result);
// Use MVC result as source of truth during migration
return mvcTask.Result;
}
_metrics.RecordSuccess(order);
return mvvmTask.Result;
}
}
}
Enter fullscreen mode
Exit fullscreen mode
MVVM to MVC Migration
// Sometimes you need to migrate from MVVM to MVC (e.g., desktop to web)
public class MVVMToMVCMigration
{
// Step 1: Extract business logic from ViewModels
public class ViewModelRefactoring
{
// Before: Logic in ViewModel
public class CustomerViewModel : ViewModelBase
{
public async Task SaveCustomer()
{
// Validation logic
if (string.IsNullOrEmpty(Name))
{
Errors.Add("Name is required");
return;
}
// Business logic
if (CreditLimit > 10000 && !IsVerified)
{
RequireApproval = true;
}
// Persistence
await _repository.SaveAsync(this.ToModel());
}
}
// After: Logic extracted to service
public class CustomerService
{
public async Task<SaveResult> SaveCustomer(CustomerDto customer)
{
// Validation
var validation = _validator.Validate(customer);
if (!validation.IsValid)
return SaveResult.Invalid(validation.Errors);
// Business logic
var processed = ApplyBusinessRules(customer);
// Persistence
await _repository.SaveAsync(processed);
return SaveResult.Success(processed);
}
}
// New MVC Controller
public class CustomerController : Controller
{
[HttpPost]
public async Task<IActionResult> Save(CustomerDto customer)
{
var result = await _customerService.SaveCustomer(customer);
if (!result.Success)
return BadRequest(result.Errors);
return Ok(result.Data);
}
}
}
}
Enter fullscreen mode
Exit fullscreen mode
5.4 Anti-Patterns to Avoid
Understanding what NOT to do is as important as knowing best practices:
MVC Anti-Patterns
// ❌ Anti-Pattern: Fat Controller
public class BadOrderController : Controller
{
[HttpPost]
public async Task<IActionResult> CreateOrder(OrderDto order)
{
// ❌ Business logic in controller
if (order.Items.Sum(i => i.Price * i.Quantity) > 1000)
{
order.Discount = 0.1m;
}
// ❌ Direct database access
using var connection = new SqlConnection(_connectionString);
await connection.OpenAsync();
var orderId = await connection.QuerySingleAsync<int>(
"INSERT INTO Orders ...", order);
// ❌ Complex view logic
ViewBag.DisplayMessage = order.IsUrgent
? $"Urgent order {orderId} created"
: $"Order {orderId} created";
// ❌ External service calls without abstraction
var emailClient = new SmtpClient();
await emailClient.SendMailAsync(...);
return View(order);
}
}
// ✅ Correct Pattern: Thin Controller
public class GoodOrderController : Controller
{
private readonly IOrderService _orderService;
private readonly INotificationService _notificationService;
[HttpPost]
public async Task<IActionResult> CreateOrder(OrderDto order)
{
// ✅ Delegate to service layer
var result = await _orderService.CreateOrderAsync(order);
if (!result.Success)
return BadRequest(result.Errors);
// ✅ Use abstracted services
await _notificationService.NotifyOrderCreatedAsync(result.Order);
// ✅ Simple view model mapping
var viewModel = _mapper.Map<OrderViewModel>(result.Order);
return View(viewModel);
}
}
Enter fullscreen mode
Exit fullscreen mode
MVVM Anti-Patterns
// ❌ Anti-Pattern: View Logic in ViewModel
public class BadProductViewModel : ViewModelBase
{
// ❌ UI-specific logic in ViewModel
public string ButtonColor =>
Stock > 0 ? "#00FF00" : "#FF0000";
// ❌ Direct UI control references
public void ShowError(string message)
{
MessageBox.Show(message); // ❌ Tight coupling to UI framework
}
// ❌ Synchronous blocking operations
public void LoadProducts()
{
Products = _service.GetProducts().Result; // ❌ Blocks UI thread
}
// ❌ Memory leaks from strong event handlers
public BadProductViewModel(IProductService service)
{
service.ProductsChanged += OnProductsChanged; // ❌ Never unsubscribed
}
}
// ✅ Correct Pattern: Pure ViewModel
public class GoodProductViewModel : ViewModelBase, IDisposable
{
// ✅ Abstract UI concepts
public bool IsInStock => Stock > 0;
public ProductStatus Status { get; set; }
// ✅ Use messaging/events for UI interaction
public void ShowError(string message)
{
_messenger.Send(new ErrorMessage(message));
}
// ✅ Async all the way
public async Task LoadProductsAsync()
{
IsLoading = true;
try
{
Products = await _service.GetProductsAsync();
}
finally
{
IsLoading = false;
}
}
// ✅ Proper cleanup
private readonly IDisposable _subscription;
public GoodProductViewModel(IProductService service)
{
// ✅ Weak events or disposable subscriptions
_subscription = service.ProductsChanged
.Subscribe(OnProductsChanged);
}
public void Dispose()
{
_subscription?.Dispose();
}
}
Enter fullscreen mode
Exit fullscreen mode
Hybrid Anti-Patterns
// ❌ Anti-Pattern: Mixing concerns in hybrid applications
// ❌ Server and client logic mixed
class BadHybridComponent extends React.Component {
async componentDidMount() {
// ❌ Direct database access from client component
const sql = `SELECT * FROM users WHERE id = ${this.props.userId}`;
const user = await database.query(sql); // This won't work!
this.setState({ user });
}
render() {
// ❌ Server-side logic in render
const hasPermission = checkServerPermissions(this.state.user);
return hasPermission ? <AdminPanel /> : <AccessDenied />;
}
}
// ✅ Correct Pattern: Clear separation
class GoodHybridComponent extends React.Component {
async componentDidMount() {
// ✅ API call to server
const response = await fetch(`/api/users/${this.props.userId}`);
const user = await response.json();
this.setState({ user });
}
render() {
// ✅ Use data from server, don't recalculate permissions
return this.state.user?.hasPermission
? <AdminPanel />
: <AccessDenied />;
}
}
// Server-side handles data and permissions
app.get('/api/users/:id', async (req, res) => {
const user = await userService.getUser(req.params.id);
const hasPermission = await permissionService.check(user, 'admin');
res.json({
...user,
hasPermission // Calculated server-side
});
});
Enter fullscreen mode
Exit fullscreen mode
5.5 Real-World Case Studies
Case Study 1: E-Commerce Platform Evolution
Company: Large Retailer
Initial Architecture: Traditional MVC (ASP.NET MVC)
Challenge: Needed real-time inventory updates and rich filtering
Migration Journey:
Phase 1 (Month 1-3):
- Kept MVC for catalog browsing (SEO critical)
- Added SignalR for inventory updates
- Result: Reduced out-of-stock purchases by 40%
Phase 2 (Month 4-8):
- Built React components for product filtering
- Server-side rendering for initial page load
- Client-side takeover for interactions
- Result: 60% improvement in filter interaction speed
Phase 3 (Month 9-12):
- Migrated checkout to SPA with Redux
- Kept MVC for payment processing
- Added offline capability with service workers
- Result: 25% increase in conversion rate
Lessons Learned:
- Don't migrate everything at once
- Keep SEO-critical paths in MVC
- Use hybrid approach for best of both worlds
- Measure performance at each phase
Final Architecture:
- MVC: Product pages, SEO landing pages
- React + Redux: Checkout, user account
- SignalR: Real-time inventory
- Service Workers: Offline browsing
Enter fullscreen mode
Exit fullscreen mode
Case Study 2: Financial Dashboard Migration
Company: Investment Bank
Initial Architecture: WPF with MVVM
Challenge: Needed web access for remote traders
Migration Journey:
Phase 1: Analysis
- 300+ ViewModels with complex bindings
- Real-time data from 15 sources
- 50ms latency requirement
Phase 2: Hybrid Approach
- Built ASP.NET Core API layer
- Kept WPF for trading floor (performance critical)
- Built Blazor WebAssembly for remote access
- Shared ViewModels via .NET Standard library
Phase 3: Optimization
- Implemented WebSocket feeds
- Added Redis for caching
- Used gRPC for inter-service communication
Results:
- Desktop: 10ms latency (exceeded requirement)
- Web: 45ms latency (met requirement)
- Code reuse: 70% of business logic shared
- Maintenance: Single team maintains both
Architecture Decision:
- Kept MVVM for both platforms
- Blazor allowed ViewModel reuse
- SignalR provided real-time updates
- Hybrid approach met all requirements
Enter fullscreen mode
Exit fullscreen mode
Case Study 3: Startup Pivot
Company: SaaS Startup
Initial: React SPA with Redux
Problem: Poor SEO, slow initial load
Pivot Strategy:
Week 1-2: Analysis
- 80% of traffic from search
- 3.5 second initial load time
- 45% bounce rate
Week 3-4: Next.js Migration
- Server-side rendering for public pages
- Keep SPA for authenticated app
- Incremental static regeneration
Week 5-6: Optimization
- Code splitting
- Image optimization
- CDN deployment
Results:
- Initial load: 3.5s → 0.8s
- SEO: 300% increase in organic traffic
- Bounce rate: 45% → 22%
- Development velocity: Maintained
Learning:
- Framework choice matters less than right tool for job
- Hybrid SSR/SPA optimal for many scenarios
- Performance metrics should drive architecture
Enter fullscreen mode
Exit fullscreen mode
5.6 Decision Checklist
Use this final checklist to validate your architecture choice:
## Architecture Decision Checklist
### ✅ MVC Checklist
- [ ] Primary interaction is request/response
- [ ] SEO is critical for success
- [ ] Server-side processing is required
- [ ] Team has MVC expertise
- [ ] Stateless operations predominate
- [ ] Clear transaction boundaries needed
- [ ] Horizontal scaling required
- [ ] Simple CRUD operations
- [ ] Progressive enhancement important
- [ ] Limited client-side state
### ✅ MVVM Checklist
- [ ] Rich, interactive UI required
- [ ] Complex client-side state
- [ ] Real-time updates needed
- [ ] Offline capability important
- [ ] Multiple views of same data
- [ ] Desktop or mobile app
- [ ] Data binding would simplify code
- [ ] Two-way synchronization needed
- [ ] Team comfortable with reactive patterns
- [ ] Long-lived client sessions
### ✅ Hybrid Checklist
- [ ] Need both SSR and client interactivity
- [ ] SEO + rich interactions
- [ ] Gradual migration planned
- [ ] Different requirements for different parts
- [ ] Team has diverse skills
- [ ] Modern framework ecosystem desired
- [ ] Real-time + traditional operations
- [ ] Progressive web app requirements
- [ ] API-first architecture
- [ ] Microservices architecture
### 🚫 Red Flags for MVC
- [ ] Extensive real-time requirements
- [ ] Complex state synchronization
- [ ] Rich animations/interactions
- [ ] Offline-first requirement
- [ ] Native mobile app needed
### 🚫 Red Flags for MVVM
- [ ] SEO is critical
- [ ] Simple CRUD application
- [ ] Team lacks reactive experience
- [ ] Tight deadline with no learning time
- [ ] Server-side processing heavy
### 🚫 Red Flags for Hybrid
- [ ] Small team without diverse skills
- [ ] Simple requirements
- [ ] Tight budget
- [ ] Need to minimize complexity
- [ ] Single platform target
Enter fullscreen mode
Exit fullscreen mode
Conclusion: Architecture as Evolution
After exploring MVC, MVVM, and hybrid patterns in depth, the key insight is this: architecture is not a one-time decision but an evolution.
Key Takeaways
No Silver Bullet: Neither MVC nor MVVM is universally superior. Each excels in specific contexts.
Hybrid is the Norm: Modern applications rarely use pure patterns. Successful architectures blend approaches.
Start Simple, Evolve: Begin with the simplest architecture that meets current needs. Add complexity only when required.
Team Matters: The best architecture is one your team can execute well. Consider expertise and learning curves.
Measure and Adapt: Use metrics to validate architectural decisions. Be willing to pivot based on data.
Patterns are Tools: MVC, MVVM, and hybrid approaches are tools in your toolkit. Master them all, use them wisely.
The Future
As we've seen with modern frameworks, the distinction between MVC and MVVM continues to blur. Emerging patterns like:
Island Architecture: Mixing static and dynamic components
Micro Frontends: Different architectures for different features
Edge Computing: Pushing logic closer to users
AI-Driven UIs: Adaptive architectures based on user behavior
These trends suggest that flexibility and adaptability will become even more important than adhering to specific patterns.
Complete Series Summary
MVC vs MVVM: Understanding the Difference - Introduced ICMV and IVVMM mnemonics
MVC Flow Patterns in Detail - Part 1 - Explored sequential, request-driven architectures
MVVM Flow Patterns in Detail - Part 2 - Examined reactive, binding-based patterns
MVC Flow Patterns in Detail - Comparative Analysis - Part 3 - Compared performance, testing, and memory management
MVC Flow Patterns in Detail - Hybrid Patterns and Modern Frameworks - Part 4 - Showed convergence in modern development
This Article - Part 5 - Provided practical decision framework
Final Thought
The journey from "MVC vs MVVM" to "MVC and MVVM" reflects the maturation of software architecture. The question is no longer "which pattern is better?" but rather "which combination of patterns best serves our users?"
There is no one-size-fits-all solution. There is no single solution. There are only choices to be made and elements to combine.
Choose thoughtfully, implement pragmatically and never forget to continue to evolve when new ideas or requirements materialize. Your architecture should enable you to deliver value, not adhere to rigid patterns or ideology.
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
•
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Dimension AI Technologies
Follow
Adventures in AI startups.
Location
Cambridge, UK
Joined
Apr 18, 2025
More from Dimension AI Technologies
MVC vs MVVM: Deep Dive into Real-World Flow Patterns - Part 4
#architecture
#mvc
#mvvm
#ui
MVC vs MVVM: Deep Dive into Real-World Flow Patterns - Part 2
#architecture
#mvc
#mvvm
#ui
MVC vs MVVM: Deep Dive into Real-World Flow Patterns - Part 1
#architecture
#csharp
#designpatterns
💎 DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community — A space to discuss and keep up software development and manage your software career
Home
Welcome Thread
Tags
About
Contact
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem — the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community © 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account