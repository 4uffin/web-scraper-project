Meet Mongoose Test Factory! - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SREâ€”the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project â€” features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Cryptoâ€”from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
aissam
Posted on Sep 23
Meet Mongoose Test Factory!
#javascript
#mongodb
#testing
#node
Stop Writing Mock Data by Hand - Meet Mongoose Test Factory!
Are you tired of writing endless lines of mock data for your MongoDB tests? What if I told you there's a way to generate realistic test data with literally ZERO configuration?
The Problem We All Face
// We've ALL written this boring code...
const mockUser = {
name: "John Doe",
email: "john@example.com",
age: 25,
isActive: true,
// ... 50 more fields
};
const anotherMockUser = {
name: "Jane Smith",
email: "jane@example.com",
age: 30,
// Copy-paste-modify hell continues...
};
Enter fullscreen mode
Exit fullscreen mode
Sound familiar? Writing test data is:
Time-consuming
Error-prone
Mind-numbingly boring
Repetitive across projects
The Game Changer
What if you could do this instead:
// 1. Apply one plugin
userSchema.plugin(mongooseTestFactory);
// 2. Generate infinite realistic data
const user = User.factory().build();
// Output: { name: "Emma Rodriguez", email: "emma.rodriguez@gmail.com", age: 28, isActive: true }
const users = await User.factory(100).create(); // 100 users in the DB!
Enter fullscreen mode
Exit fullscreen mode
That's it. No configuration. No setup. Just intelligent, realistic data.
Meet Mongoose Test Factory
I built this plugin because I was frustrated with existing solutions that required complex configuration or generated unrealistic data. Here's what makes it special:
It's Actually Intelligent
Recognizes field names: firstName generates names, userEmail generates emails
Respects ALL your Mongoose validators automatically
Understands relationships and generates proper ObjectIds
Three Power Modes
// Lightning-fast objects for unit tests
const user = User.factory().build();
// Full Mongoose instances with methods/virtuals
const user = User.factory().make();
// Persisted to database for integration tests
const user = await User.factory().create();
Enter fullscreen mode
Exit fullscreen mode
TypeScript Lovers Rejoice
interface IUserModel extends mongoose.Model<IUser> {
findByEmail(email: string): Promise<IUser | null>;
}
// Preserves ALL your custom methods + adds factory
const User = withFactory<IUser, IUserModel>(UserModel);
User.findByEmail('test@example.com');
// Your method
User.factory().build();
// Factory magic
Enter fullscreen mode
Exit fullscreen mode
Real-World Example
Here's an e-commerce schema that would take forever to mock manually:
const productSchema = new Schema({
name: { type: String, required: true },
price: { type: Number, min: 0.01, max: 9999.99 },
category: { type: String, enum: ['electronics', 'clothing', 'books'] },
description: String,
inStock: { type: Boolean, default: true },
tags: [String],
ratings: [{
user: { type: ObjectId, ref: 'User' },
score: { type: Number, min: 1, max: 5 }
}]
});
productSchema.plugin(mongooseTestFactory);
const Product = withFactory(mongoose.model('Product', productSchema));
// Generate 50 products with realistic data, proper prices,
// valid categories, and even nested ratings!
const products = await Product.factory(50).create();
Enter fullscreen mode
Exit fullscreen mode
The plugin automatically:
Generates product names that make sense
Creates prices within your min/max range
Picks valid categories from your enum
Builds nested rating objects with proper ObjectIds
Ensures all validation rules are met
Performance That Scales
// Need 10,000 test records? No problem!
await User.factory(10000).create(); // Optimized batch processing
// Reproducible tests across your team
FactoryPlugin.initialize({ seed: 12345 });
Enter fullscreen mode
Exit fullscreen mode
The Developer Experience
What developers are saying:
"Went from 30 minutes of setup to 30 seconds. This is magic!"
"Finally, a factory that understands my schema without me explaining it."
"The TypeScript support is chef's kiss"
Try It Right Now!
npm install --save-dev mongoose-test-factory
Enter fullscreen mode
Exit fullscreen mode
Literally 3 lines to get started:
import mongooseTestFactory, { withFactory } from 'mongoose-test-factory';
userSchema.plugin(mongooseTestFactory);
const User = withFactory(UserModel);
const user = User.factory().build(); // Done!
Enter fullscreen mode
Exit fullscreen mode
Why I Built This
As a full-stack developer, I was spending more time writing test data than actual tests. Every project needed the same boring setup:
Write mock data by hand
Copy-paste across files
Debug when schema changes
Repeat for every model
There had to be a better way.
After trying every existing solution and finding them lacking, I built Mongoose Test Factory with one goal: Make test data generation invisible.
What's Next?
I'm constantly improving based on community feedback:
More locale support for international data
Advanced relationship handling
Custom data generators
Performance monitoring
Want to contribute? The project is open source and I'd love your input!
Links:
NPM Package: https://www.npmjs.com/package/mongoose-test-factory
GitHub Repository: https://github.com/nexus-aissam/mongoose-test-factory
Full Documentation: https://github.com/nexus-aissam/mongoose-test-factory#readme
What do you think? Have you struggled with test data generation? What's your current approach? Let me know in the comments!
If this saves you time, drop a star on GitHub - it means the world to indie developers like me!
Happy coding!
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
â€¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
aissam
Follow
Joined
Jan 30, 2025
Trending on DEV Community
Hot
Lets Be Real: Its Time to Ditch `any` for `unknown` in TypeScript
#typescript
#javascript
#codereview
The 90-Day Coding Routine That Made Me Think Like An Architect
#webdev
#programming
#ai
#discuss
"Your Profile Doesn't Match the Role" and Other Interview Horror Stories
#watercooler
#career
#interview
#discuss
ðŸ’Ž DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community â€” A space to discuss and keep up software development and manage your software career
Home
Welcome Thread
Reading List
Tags
About
Contact
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem â€” the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community Â© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account