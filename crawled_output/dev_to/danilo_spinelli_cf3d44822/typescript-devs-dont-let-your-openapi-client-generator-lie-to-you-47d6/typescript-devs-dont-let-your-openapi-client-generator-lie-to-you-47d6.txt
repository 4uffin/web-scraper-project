OpenAPI to TypeScript: a More Reliable and Type-Safe Approach - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SREâ€”the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project â€” features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Cryptoâ€”from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
D.S.
Posted on Sep 14
OpenAPI to TypeScript: a More Reliable and Type-Safe Approach
#typescript
#openapi
#zod
#webdev
If youâ€™re building REST API clients (or servers) with TypeScript, you expect type safety to save the day. But most existing OpenAPI-to-Typescript generators give a false sense of security, hiding pitfalls that can bite in production. After benchmarking 20+ tools, hereâ€™s what I found, and how I choose to fix it.
Poor error handling
Calling
const ret = await api.post({ ... })
Enter fullscreen mode
Exit fullscreen mode
should be safe, but the method signature often ignores network issues like DNS failures or timeouts. Youâ€™re forced to wrap it in a try/catch, but without clear documentation on what errors to expect, youâ€™re left guessing. Even when documented, this approach is fragile and prevents efficient error handling as validation errors (versus OpenAPI specs) end up in the same bag as network errors.
Limited handling of HTTP statuses
Most generators emit types only for 2xx responses, ignoring 4xx/5xx errors with specific payloads. If the API returns a 400 or 500 with some ProblemJson, generated TypeScript types (and/or runtime schemas) wonâ€™t reflect it, leaving you vulnerable to runtime surprises.
Multiple success responses, different payloads
Some APIs return different payloads for 200 vs. 201 status codes. Many generated clients only handle the first successful status code. Other clients either treat non-200 responses as unknown errors, or merge them into some vague Typescript union, forcing further runtime checks to discriminate. Whatâ€™s the point of using the generated code then?
Mishandled default responses
The smartest generators create discriminated unions for all response types (200, 201, 400, 500, etc.), but default responses (covering unspecified cases in OpenAPI) are treated as generic errors and/or lack payload typing and validation, leading to inaccurate types.
Content-type being ignored
APIs returning multiple content types require discrimination by both status code and content-type. Afaik, no existing Typescript generator supports this. Ideally, you should be able to write:
if (r.status === 200) {
if (r.contentType === "application/json") {
// Typescript should know that r.data is SomeJsonModel
} else if ( r.contentType === "application/xml") {
// Typescript should know that r.data is SomeXmlModel
}
}
Enter fullscreen mode
Exit fullscreen mode
OpenAPI Schema mismatch
OpenAPI schemas are more expressive than TypeScript types. For example, a schema defining an email string or regex pattern often becomes a plain string in TypeScript. Even tools with runtime validation struggle to support advanced OpenAPI features like string patterns or oneOf vs anyOf, leading to inaccurate types and runtime bugs.
Conclusion
After evaluating the landscape, I faced a dilemma: convince maintainers of top tools to adopt breaking changes for their thousands of users or build a new solution from scratch. I chose the latter and built an open-source TypeScript client generator that prioritizes safe, accurate types and excellent Developer Experience:
https://gunzip.github.io/apical-ts/
What's your biggest pain point with generated OpenAPI clients / servers?
Iâ€™d love to hear your thoughts to shape this project, drop a comment, or check out the prototype!
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
â€¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
D.S.
Follow
Joined
Sep 9, 2025
Trending on DEV Community
Hot
Why Are You Not Reading My Post?
#tutorial
#discuss
#productivity
#career
What was your win this week?!
#weeklyretro
#discuss
Tested 15 Wrike Alternatives: Only These 6 Are Worth Your Time
#productivity
#devops
#opensource
#webdev
ðŸ’Ž DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community â€” A space to discuss and keep up software development and manage your software career
Home
DEV++
Welcome Thread
Reading List
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Free Postgres Database
Software comparisons
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem â€” the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community Â© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account