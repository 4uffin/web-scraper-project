Implementing Caching in .NET Core Web API - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SREâ€”the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project â€” features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Cryptoâ€”from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Harpreet Singh
Posted on Sep 23
Implementing Caching in .NET Core Web API
#webdev
#programming
#dotnetcore
#csharp
Caching is one of the most effective ways to improve the performance and scalability of your APIs. By storing frequently requested data, you can reduce database load, speed up response times, and handle higher traffic without degrading performance.
In this article, weâ€™ll explore memory caching, response caching, and distributed caching in .NET Core Web API with practical examples.
1. Response Caching
Response caching allows responses from your API to be stored and reused for a specified duration.
Setup in Program.cs
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddControllers();
builder.Services.AddResponseCaching();
var app = builder.Build();
app.UseResponseCaching();
app.MapControllers();
app.Run();
Enter fullscreen mode
Exit fullscreen mode
Using Response Caching in Controller
[ApiController]
[Route("api/[controller]")]
public class ProductsController : ControllerBase
{
[HttpGet]
[ResponseCache(Duration = 60, Location = ResponseCacheLocation.Client)]
public IActionResult Get()
{
var products = new[] { "Product 1", "Product 2" };
return Ok(products);
}
}
Enter fullscreen mode
Exit fullscreen mode
âœ… The API response will be cached for 60 seconds on the client.
2. In-Memory Caching
In-memory caching stores data in the serverâ€™s memory.
Setup in Program.cs
builder.Services.AddMemoryCache();
Enter fullscreen mode
Exit fullscreen mode
Using In-Memory Cache in Controller
[ApiController]
[Route("api/[controller]")]
public class OrdersController : ControllerBase
{
private readonly IMemoryCache _cache;
public OrdersController(IMemoryCache cache)
{
_cache = cache;
}
[HttpGet]
public IActionResult GetOrders()
{
const string cacheKey = "orders_list";
if (!_cache.TryGetValue(cacheKey, out string[] orders))
{
// Simulate fetching from database
orders = new[] { "Order 1", "Order 2" };
var cacheOptions = new MemoryCacheEntryOptions
{
AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(5),
SlidingExpiration = TimeSpan.FromMinutes(2)
};
_cache.Set(cacheKey, orders, cacheOptions);
}
return Ok(orders);
}
}
Enter fullscreen mode
Exit fullscreen mode
âœ… Reduces repeated database calls for frequently accessed data.
3. Distributed Caching
Distributed caching stores cache outside of the application, suitable for multi-server environments.
Setup with Redis
dotnet add package Microsoft.Extensions.Caching.StackExchangeRedis
Enter fullscreen mode
Exit fullscreen mode
builder.Services.AddStackExchangeRedisCache(options =>
{
options.Configuration = "localhost:6379";
options.InstanceName = "MyApp_";
});
Enter fullscreen mode
Exit fullscreen mode
Using Distributed Cache in Controller
[ApiController]
[Route("api/[controller]")]
public class CustomersController : ControllerBase
{
private readonly IDistributedCache _cache;
public CustomersController(IDistributedCache cache)
{
_cache = cache;
}
[HttpGet]
public async Task<IActionResult> GetCustomers()
{
var cacheKey = "customers_list";
var cachedData = await _cache.GetStringAsync(cacheKey);
if (string.IsNullOrEmpty(cachedData))
{
var customers = new[] { "Customer 1", "Customer 2" };
cachedData = System.Text.Json.JsonSerializer.Serialize(customers);
var options = new DistributedCacheEntryOptions
{
AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(10)
};
await _cache.SetStringAsync(cacheKey, cachedData, options);
}
var result = System.Text.Json.JsonSerializer.Deserialize<string[]>(cachedData);
return Ok(result);
}
}
Enter fullscreen mode
Exit fullscreen mode
âœ… Works across multiple instances of your API in a load-balanced environment.
Wrapping Up
Caching is essential for improving API performance, scalability, and user experience. In .NET Core Web API, you have several options:
Response Caching: For simple, client-side caching of responses.
In-Memory Caching: Quick caching within a single server instance.
Distributed Caching: Scalable caching across multiple servers (e.g., Redis).
By implementing caching appropriately, you can drastically reduce database load and improve response times for your users.
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
â€¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Harpreet Singh
Follow
Software engineer with 3 yearsâ€™ experience, still learning every day. I build apps, websites & tools with React, TypeScript, .NET & more. Debugging = 90% console.log, 10% panic, 100% fun.
Location
Auckland, New Zealand
Education
Manuaku Instiute of technolgy, Auckland, New Zealand
Pronouns
He/Him
Work
Software Engineer
Joined
Aug 19, 2025
More from Harpreet Singh
Managing API Version Transitions Across Teams
#webdev
#openapi
#productivity
#api
API Versioning in .NET Web API
#architecture
#api
#dotnet
#webdev
Global Exception Handling in .NET Web API
#csharp
#backend
#dotnet
#programming
ðŸ’Ž DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community â€” A space to discuss and keep up software development and manage your software career
Home
Welcome Thread
Tags
About
Contact
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem â€” the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community Â© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account