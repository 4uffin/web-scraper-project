Clprolf Docs #1 ‚Äî Declensions Explained - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE‚Äîthe hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project ‚Äî features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto‚Äîfrom Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Charles Koffler
Posted on Sep 15
‚Ä¢ Edited on Sep 16
Clprolf Docs #1 ‚Äî Declensions Explained
#architecture
#designpatterns
#tutorial
üìù This article is part of the official Clprolf documentation series (1/6).
Clprolf is a new programming language and framework that adds clarity to OOP by enforcing roles, responsibilities, and clean design.
Clprolf is a language and framework that helps you design objects with a single, explicit responsibility.
By assigning each class a role (also called its declension), you ensure compliance with the Single Responsibility Principle (SRP).
Objects become components, and this clarity remains intact even with inheritance.
What Is a Declension?
A declension expresses the nature of a class ‚Äî its fundamental role in the system.
Clprolf defines only a few basic roles, which keeps design unambiguous and intuitive.
The five available declensions are:
agent
Synonyms: simu_agent, simu_real_world_obj, simu_real_obj, abstraction.
worker_agent
Synonyms: simu_comp_as_worker, comp_as_worker.
model
Synonyms: model_real_world_obj, model_real_obj.
information
(no synonyms).
indef_obj
A flexible object without explicit role, behaving like a traditional OO class.
Business-Like Objects
These objects represent real-world abstractions or domain concepts.
agent: the active actor.
agent emphasizes action.
simu_real_obj emphasizes simulation.
abstraction emphasizes conceptual encapsulation (e.g., a Connection, a Socket).
simu_agent highlights simulation of a real-world agent (e.g., an employee).
simu_real_obj: a micro-simulation of a real-world entity.
Example: a Giraffe class with states and behaviors simulating how a giraffe acts.
abstraction: for abstract concepts and system elements (connections, sockets, system utilities).
model: a passive entity with no behavior ‚Äî just attributes.
Example: a Customer with fields but no methods.
Technical Objects
These objects handle purely computational or support tasks.
Here, the computer itself is seen as the actor.
worker_agent: the computer as a worker executing algorithms.
Synonyms: comp_as_worker, simu_comp_as_worker.
information: a coherent data container, used by workers in algorithms.
‚ö†Ô∏è Unlike model, it does not represent a real-world entity, only technical data.
Examples: system utilities, DAOs, repositories, low-level services, or MVC view components.
Declensions and Genders
Declensions can be refined with genders (optional sub-roles).
They may also have synonyms:
@Expert_component = @Human_expert = @Design_role
@GUI_role = @Machine_tool
@Active_agent (no synonym)
@Static = @Expert_component_static = @Human_expert_static
@Static for worker_agent (no synonym)
‚ö†Ô∏è Genders apply only to agents, except @Static, which may also apply to worker_agent.
Interrelationships Between Declensions
Agents and Workers
Every agent can also act as a worker (computers execute agents as workers).
But explicit workers should be minimized for clarity.
Models and Information
A model can be represented as information (stored as data),
but information should not replace a model.
Unidirectional Substitutions
Agent ‚Üí Worker ‚úÖ
Worker ‚Üí Agent ‚ùå
Model ‚Üí Information ‚úÖ
Information ‚Üí Model ‚ùå
These reversals usually reveal a design flaw or a deliberate reinterpretation.
Interfaces and Declensions
Interfaces also have declensions:
compat_interf_version = version_inh
compat_interf_capacity = capacity_inh
compat_interf (no synonym)
Declensions on interfaces specify which classes are allowed to implement them.
Capacity interfaces can also have a gender called Advice:
@For_agent_like
@For_worker_like
Inheritance Consistency
Clprolf enforces that inheritance stays role-consistent:
Business and technical objects cannot be mixed in the same hierarchy.
Synonyms of a declension are accepted.
Exceptions may be forced with @Forced_inh.
Using Declensions
In pure Clprolf, the declension replaces the class keyword.
In the framework, it appears as an annotation above the class.
Example:
@Agent
public class Animal { ... }
Enter fullscreen mode
Exit fullscreen mode
Algorithm for Choosing a Declension
Every class must declare a role.
Step 1 ‚Äì Does the class have methods?
Yes ‚Üí it is active ‚Üí choose @Agent or @Worker_agent.
No ‚Üí it is passive ‚Üí use @Model (entity) or @Information (technical container).
Step 2 ‚Äì Is the responsibility business-related or technical?
Business logic or expert knowledge ‚Üí @Agent.
Technical or support layer ‚Üí @Worker_agent.
Example: System Class in Java
At first sight: @Worker_agent (low-level, technical).
But Clprolf favors @Agent whenever possible.
System could also be seen as:
@Abstraction ‚Äî since ‚Äúthe system‚Äù is a conceptual entity.
@Agent(Role.EXPERT_COMPONENT) ‚Äî as an expert component representing the environment.
Summary
Declensions make objects into components with explicit roles.
Roles clarify responsibilities, improve readability, and ensure inheritance coherence.
Synonyms keep flexibility while preserving consistency.
Result: a simpler, more maintainable system, where every object is clearly positioned.
Notice
If the class already fits one of the well-known architectural categories, you can directly assign a matching role:
A service ‚Üí @Agent
A helper ‚Üí @Agent or @Worker_agent (often with Role.STATIC)
A DAO or repository ‚Üí @Worker_agent
A controller ‚Üí @Agent
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
‚Ä¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Charles Koffler
Follow
Location
France
Education
CNAM
Work
Software development engineer
Joined
May 28, 2025
More from Charles Koffler
Adapter Pattern in Clprolf: From Enumeration to Iterator
#architecture
#designpatterns
#programming
Clprolf Docs #5 ‚Äî Concurrency and Parallelism Made Clear
#architecture
#performance
#programming
Clprolf Docs #4 ‚Äî Interfaces in Clprolf: A Complete Overview
#design
#programming
#tutorial
üíé DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community ‚Äî A space to discuss and keep up software development and manage your software career
P√°gina Inicial
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
Sobre
Contato
Free Postgres Database
Software comparisons
Forem Shop
C√≥digo de Conduta
Pol√≠tica de Privacidade
Termos de Uso
Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community ¬© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account