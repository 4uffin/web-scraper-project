From Panic to Pull Request: The Developer’s Confidence Changelog - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE—the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project — features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto—from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
<devtips/>
Posted on Sep 15
From Panic to Pull Request: The Developer’s Confidence Changelog
#webdev
#programming
#development
#developer
A 30-day playbook to upgrade your engineering nerve without the cringe hacks.
Every dev knows the Zoom nod: you’re “following the diagram,” but inside you’re Googling why your Docker container hates you. Outwardly calm, inwardly debugging your soul. That’s the confidence gap the mismatch between how confident we look and how confident we feel.
Confidence isn’t a hidden stat at character creation. It’s XP you grind, patches you ship, and occasionally a nerf after a Friday deploy. My lowest point: a prod bug that nuked logins. Slack exploded, I aged three years in an hour. Confidence? Zero. But surviving that incident did more for my confidence than any TED talk. Once you’ve walked through a fire, lint warnings stop feeling like boss fights.
TL;DR: Confidence is built, not born. Think skill tree unlocked by reps: small PRs, honest docs, calm postmortems, and squads that share oxygen. Below is the playbook.
The myth of the natural confident dev
Every dev knows that one engineer who looks unshakable. They breeze through code reviews like they’re defusing bombs with one hand while sipping coffee with the other. I used to work with a guy like that let’s call him Mark. Mark always seemed chill in meetings, dropping opinions like he had the entire Linux kernel cached in his head. I later found out he privately DMed another teammate after every standup:
“Did I sound stupid? Was I overexplaining?”
That’s the thing: what we label as “confidence” in tech often isn’t confidence at all. Sometimes it’s just good posture, or worse arrogance disguised as certainty. The dev who shrugs off tests because “the code obviously works” isn’t confident; they’re a walking postmortem waiting to happen.
Think of it like bad variable names. On the surface, they work fine. But under the hood, they create chaos for everyone else who has to maintain the code. Arrogance ≠ confidence. One burns bridges, the other builds trust.
Psychologists have receipts for this. Impostor syndrome is a well-documented phenomenon where even highly competent people underestimate themselves. On the flip side, the Dunning–Kruger effect shows how beginners often overestimate their skill. In dev land, those two collide every day: juniors who think they’re hot stuff after one successful merge, seniors who quietly doubt their worth after shipping production for years.
I’ve lived that arc. My first PR comment started with “sorry, this is probably dumb but…” By my 100th PR, my comments looked more like “This solves X, tests included, feedback welcome.” Same brain, different confidence patch.
Confidence is an XP grind, not a cheat code
If confidence were a cheat code, we’d all be smashing IDDQD at our keyboards and walking into standups like invincible Doomguys. But it’s not. Confidence is XP. You get it the same way you get better at Vim or rolling your own regex reps, mistakes, and sheer hours in the game.
The first time I had to speak up in a standup, my voice cracked like a teenager in a Discord lobby. My “update” was basically: “uh… still debugging.” Fast-forward a year and I was casually dropping blockers, asking for feedback, and even cracking small jokes. The code didn’t change I did. The reps built tolerance, and tolerance slowly calcified into confidence.
And the receipts are everywhere. Pull up your GitHub contributions graph. That wall of green squares? It’s basically your confidence chart. The first commit is terrifying. By the 500th, you’re shipping without sweating every semicolon. A developer on r/ExperiencedDevs put it bluntly: “You don’t ‘become’ confident, you forget to panic.”
Humor aside, that’s the grind. It’s not glamorous. You gain confidence like you grind levels in an RPG skill tree: one PR, one bug fix, one design doc at a time. Failures hurt, but they give the most XP. My infamous prod bug (the one that killed logins for an hour) is still one of the biggest confidence multipliers of my career. After that, lint warnings stopped feeling like boss fights.
Use this as a changelog you can actually ship.
v1.0.0 Small-PR protocol: cap PRs ~200–400 LOC; add a PR template (context, approach, risks, test plan).
v1.1.0 oops.md: log incidents: trigger → fix → guardrail. Review monthly.
v1.2.0 Review rubric: “Ask, don’t dunk.” Ban “wtf?” comments; require 1 question, 1 suggestion, 1 praise.
v1.3.0 Standup upgrade: status = {done, doing, blocked} + 1 explicit ask.
v1.4.0 One-pager design docs: problem, options, tradeoffs, decision, rollback. 30 minutes, not a novel.
v1.5.0 Pair hour / week: rotate partners; goal is exposure, not perfection.
v1.6.0 Demo Fridays: ship or show a spike; make wins visible.
v1.7.0 Guardrails: pre-merge checklist, feature flags, canary + quick rollback.
v1.8.0 Win log: track “things that didn’t exist before me.” Review before performance reviews.
v1.9.0 Confidence debt: if you avoid a task twice, schedule a 45-min guided rep with a senior.
30-Day sprint to feel it:
Week 1: adopt Small-PR protocol + standup upgrade.
Week 2: start oops.md + pair hour.
Week 3: one-pager for the next change + demo Friday.
Week 4: run a mini-retro; ship 2 guardrails (flag + rollback).
Reps beat hacks (habits that scale)
Confidence doesn’t come from watching one TED talk or slapping “growth mindset” on your desk. It’s like lifting at the gym: no single rep makes you stronger, but the consistency stacks. Same deal in dev life.
Early in my career, I kept waiting for the big hack some secret framework, some magical productivity app, some “one weird trick” that senior engineers knew and I didn’t. Spoiler: it never came. What did change me were tiny, boring reps.
Small PRs: My first pull requests were 1,000-line monstrosities that reviewers roasted harder than a Hacker News comment thread. Breaking them into bite-sized changes turned reviews from terrifying battles into quick conversations.
Design docs: My first doc read like an anxious Slack message “sorry this might be dumb but maybe we should…” Months later, I wrote one with clear diagrams, tradeoffs, and a confident “here’s the recommended path.” Same brain, more reps. Google’s eng blog has receipts on why docs matter.
Standup chatter: At first, I muttered “still working on it.” Later, I started calling out blockers and offering help. Small rep, big shift.
If you want proof, check your own trail. Compare your earliest commits, docs, or even Slack history with today’s. It’s not magic it’s training data.
Developers love comparing LeetCode reps to gym reps, but here’s the truth: confidence isn’t about grinding leetcode problems, it’s about building reps in the real dev loop PRs, standups, docs, and bugs. That’s where XP gets cashed out.
Debugging the inner critic
Every dev has that inner voice that sounds like ESLint on steroids: “This code is trash. You don’t belong here. Someone’s about to expose you.” Left unchecked, that critic runs infinite loops in your head.
I used to treat mine like gospel. First prod bug? The critic screamed:
“You’re done. They’re going to revoke your GitHub account.”
Spoiler: nobody revoked anything. In fact, my manager said, “Congrats, you just joined the club. We’ve all broken prod.” That reframed the whole thing: bugs weren’t death sentences, they were integration tests for my career.
One trick that helped was keeping an oops.md file. Every time I messed up, I logged what happened, how I fixed it, and what I’d do differently. The first entries read like crime confessions: “Forgot to run tests → crashed staging.” A few months later they looked more like progress notes: “Didn’t stub service call → added mock → wrote regression test.” My mistakes went from shame fodder to learning logs.
Psychologists call this cognitive reframing. Developers just call it “debugging your brain.” By treating failures like failed test cases instead of fatal crashes, you learn faster and panic less. Psychology Today has the receipts if you want the academic version.
And don’t forget to log wins too. Confidence builds when you can look back at a streak of commits, closed tickets, or design docs and think: “Wait, I did that?” GitHub streaks are basically confidence dashboards if you squint.
The inner critic never fully shuts up. But like a noisy linter, you learn to filter out the false positives and act on the real warnings.
# oops.md (excerpt)## 2025-09-03 – Staging outage (bad env var)Trigger: mis-named ENV → 500s on /authFix: corrected var, added check in CIGuardrail: pre-deploy script validates required ENV; added regression testWhat I'll do next time: dry-run deploy to staging; ask for quick peer check
Squad buffs (confidence is multiplayer)
Confidence isn’t a solo quest it’s co-op mode. The fastest jumps I ever made weren’t from grinding LeetCode in the dark; they came from pairing with teammates who made me feel like I wasn’t about to brick the repo.
One of my first mentors, let’s call her Asha, was a senior who could review PRs like she was flipping through a cookbook. But instead of dunking on my mistakes, she asked questions:
“Why did you structure it this way?”
The subtext wasn’t “you’re dumb,” it was
“I want to understand your thinking.
” That tiny shift changed everything. Suddenly, code reviews felt like co-op puzzles instead of boss fights. There’s actual research behind this. Kent Beck’s Extreme Programming baked in pair programming not as a “nice to have” but as a confidence-building mechanic.
More recent studies show pair programming improves learning speed and reduces stress like a +5 morale buff in a raid. The opposite is also true. Work with a toxic teammate who sneers at every commit, and your confidence tanks faster than a failed migration. A single “wtf is this?” comment on a PR can undo weeks of progress. Reddit is full of devs describing their “best mentor ever” moments.
One post on r/ExperiencedDevs that stuck with me:
“The first time a senior sat next to me and said, ‘Don’t worry, I break prod too’ that’s when I stopped panicking about every little mistake.”
Confidence spreads like an aura. If your squad encourages questions, celebrates small wins, and shares their own failures, you level up faster. If they don’t, you start doubting whether you should even queue for the game.
The arrogance nerf (when confidence goes too far)
Here’s the dark side of the grind: confidence can get over-leveled. And when it does, it mutates into arrogance the cowboy coder archetype. You know the one: “Tests are for mortals. I deploy to prod raw.”
I watched this play out with a teammate once. He swaggered into every sprint like he had root access to the universe. He’d push code without reviews, shrug off feedback, and proudly announce, “Ship it, we’ll fix in prod.” For about a month, it almost looked heroic. Then one Friday (of course), his untested “quick fix” dropped prod. Customers couldn’t log in for hours. Suddenly the swagger was gone, replaced by a Slack war room and a retro labeled “The Incident.”
That’s the nerf: arrogance doesn’t scale. Real confidence is rooted in admitting what you don’t know and asking for backup when needed. It’s knowing when to push, but also when to pause for a review. Arrogance skips the pause and burns trust along the way.
Receipts? Just read through Google SRE’s postmortems you’ll notice a theme: disasters aren’t usually caused by clueless juniors, they’re caused by overconfident shortcuts.
The healthiest devs I’ve worked with weren’t the loudest in meetings. They were the ones who said things like:
“I’m 70% sure this is the right approach. Want to gut-check me?”
That’s confidence. Enough to lead, humble enough to check.
The confidence patch notes (condensed)
Think of this as the dev changelog for confidence the habits that quietly stack XP over time:
None of these are hacks. They’re reps. Small, boring, repeatable reps. Do them for a month and you’ll feel the difference the same way your GitHub graph starts to look greener after a streak.
Conclusion
Confidence isn’t innate it’s patched like buggy code. You grind it through PRs, docs, and bugs; you amplify it in squads; you lose it when arrogance takes over. If there’s one opinionated take I’ll leave you with, it’s this: tech doesn’t need more “genius devs.” It needs more devs confident enough to learn out loud, admit mistakes, and keep shipping.
And as AI eats boilerplate, those are the skills that’ll matter more than ever.
So yeah fake it till you ship it, sure. But better yet: rep it till you own it.
Resources
Dunning–Kruger research
Extreme Programming / Kent Beck
Google SRE postmortem culture
Good first issue repos
Reddit r/ExperiencedDevs thread
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
•
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
<devtips/>
Follow
Dev tips for folks who break things on purpose. Cloud, AI, and DevOps workflows that work. Daily stories, scars, and lessons. videos: youtube.com/@Runitbare
Location
Finland
Pronouns
he/him
Work
🔹 Blogging at <devtips/>
Joined
Feb 27, 2025
More from <devtips/>
Are you T-shaped? The only Developers Who’ll Have Jobs in 2026
#webdev
#programming
#devchallenge
#development
The fake GitHub economy no one talks about: Stars, Followers, and $5k Accounts.
#webdev
#programming
#github
#discuss
15 rust tools to level up your Linux terminal
#webdev
#programming
#rust
#linux
💎 DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community — A space to discuss and keep up software development and manage your software career
Home
Welcome Thread
Reading List
Tags
About
Contact
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem — the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community © 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account