C# Object Initialization Like a Pro: From Inline Blocks to Explicit Assignments (Basic Expert) - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE‚Äîthe hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project ‚Äî features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto‚Äîfrom Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Cristian Sifuentes
Posted on Sep 11
C# Object Initialization Like a Pro: From Inline Blocks to Explicit Assignments (Basic Expert)
#csharp
#programming
#backend
#softwaredevelopment
C# Object Initialization Like a Pro: From Inline Blocks to Explicit Assignments (Basic ‚Üí Expert)
You don‚Äôt just ‚Äúnew up‚Äù an object in C# ‚Äî you decide how expressive, safe, and readable that initialization will be. Whether you‚Äôre building a DTO from Graph API or wiring repositories, your initialization style matters.
Here‚Äôs your tiered playbook.
üü¢ BASIC ‚Äî ‚ÄúJust get me an object‚Äù
Inline initializer block (concise, declarative):
var defaultCallee = new ParticipantEndpoint
{
OdataType = "#microsoft.graph.callRecords.participantEndpoint",
UserAgent = new UserAgent
{
OdataType = "#microsoft.graph.callRecords.clientUserAgent",
HeaderValue = null,
ApplicationVersion = null,
AdditionalData =
{
["Platform"] = "unknown",
["ProductFamily"] = "unknown",
["CommunicationServiceId"] = null,
["AzureADAppId"] = null
}
},
AdditionalData = { ["Identity"] = null }
};
Enter fullscreen mode
Exit fullscreen mode
‚úÖ Benefits:
Compact, declarative.
Great for simple DTOs, tests, mocks.
Less boilerplate.
‚ö†Ô∏è Caveat:
Harder to debug line-by-line in watch windows.
Nested object initializers can become dense.
üü° MEDIUM ‚Äî ‚ÄúStep by step, please‚Äù
Explicit assignments (procedural, verbose):
var defaultCallee = new ParticipantEndpoint();
defaultCallee.OdataType = "#microsoft.graph.callRecords.participantEndpoint";
defaultCallee.UserAgent = new UserAgent();
defaultCallee.UserAgent.OdataType = "#microsoft.graph.callRecords.clientUserAgent";
defaultCallee.UserAgent.HeaderValue = null;
defaultCallee.UserAgent.ApplicationVersion = null;
defaultCallee.UserAgent.AdditionalData["Platform"] = "unknown";
defaultCallee.UserAgent.AdditionalData["ProductFamily"] = "unknown";
defaultCallee.UserAgent.AdditionalData["CommunicationServiceId"] = null;
defaultCallee.UserAgent.AdditionalData["AzureADAppId"] = null;
defaultCallee.AdditionalData["Identity"] = null;
Enter fullscreen mode
Exit fullscreen mode
‚úÖ Benefits:
Debug-friendly: you can set breakpoints after each assignment.
Easier when conditional logic is needed.
Works well in step-through tutorials or when building incrementally.
‚ö†Ô∏è Caveat:
Verbose and repetitive.
Can hide intent under ‚Äúnoise.‚Äù
üîµ ADVANCED ‚Äî ‚ÄúDesign for maintainability‚Äù
When to choose one over the other?
Inline initializer: Use when the object is a ‚Äúdata bag‚Äù (DTO, record, config snapshot). Perfect for declarative intent.
Explicit assignment: Use when initialization involves conditions, loops, validations, or services. Perfect for imperative workflows.
Example (mixed):
var endpoint = new ParticipantEndpoint
{
OdataType = "#microsoft.graph.callRecords.participantEndpoint",
UserAgent = new UserAgent
{
OdataType = "#microsoft.graph.callRecords.clientUserAgent"
}
};
// Add conditionals later
if (isUnknownPlatform)
endpoint.UserAgent.AdditionalData["Platform"] = "unknown";
if (!string.IsNullOrEmpty(version))
endpoint.UserAgent.ApplicationVersion = version;
Enter fullscreen mode
Exit fullscreen mode
üü£ EXPERT ‚Äî ‚ÄúObject initialization is OOP design‚Äù
It‚Äôs not just syntax sugar ‚Äî it‚Äôs how your model communicates intent:
Immutability: prefer record types with init-only setters when data must not change after construction.
Encapsulation: hide complex initialization in factory methods or builders.
Performance: fewer allocations when using initializer blocks vs. multiple statements.
Readability: initializer blocks group related data; assignments spread across code.
üëâ Example with a factory:
public static ParticipantEndpoint CreateDefault(string? version = null)
=> new()
{
OdataType = "#microsoft.graph.callRecords.participantEndpoint",
UserAgent = new UserAgent
{
OdataType = "#microsoft.graph.callRecords.clientUserAgent",
ApplicationVersion = version,
AdditionalData =
{
["Platform"] = "unknown",
["ProductFamily"] = "unknown"
}
},
AdditionalData = { ["Identity"] = null }
};
Enter fullscreen mode
Exit fullscreen mode
Now your construction logic is reusable, testable, and intention-revealing.
‚ö° Cheat Sheet
Goal
Use
Example
Quick, concise DTO
Inline initializer
new Foo { A=1, B=2 }
Debug / conditional setup
Explicit assignments
foo.A=1; if(x) foo.B=2;
Enforce invariants
Factory or Builder
Foo.CreateDefault()
Immutability
record with init
public record Foo { int A { get; init; } }
üß† Mental Model
Think of object initialization in C# as levels of intent:
Declare data shape ‚Üí inline initializer.
Assemble step by step ‚Üí explicit assignment.
Encapsulate complexity ‚Üí factory/builder patterns.
Pick the tool that matches your debuggability, readability, and design goals.
‚úç Written by: Cristian Sifuentes ‚Äì Full-stack dev crafting scalable apps with [.NET - Azure], [Angular - React], Git, SQL & AI integrations. Dark mode, clean code, and atomic commits enthusiast.
‚ú® Final Thought:
Initializer blocks and assignments aren‚Äôt competitors ‚Äî they‚Äôre complementary. Use inline blocks when declaring state; use assignments when narrating logic. The expert move? Wrap them both in clean abstractions.
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
‚Ä¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Cristian Sifuentes
Follow
üß† Full-stack dev integrating AI into scalable solutions with [.NET, Azure], [Angular, React], SQL, Git & cloud-native tools. Obsessed with clean code & atomic
Joined
Apr 15, 2025
More from Cristian Sifuentes
JavaScript Tools Landscape: npm vs pnpm vs Yarn vs Bun vs Deno (and Beyond)
#typescript
#node
#javascript
#programming
Building a Collapsible Admin Sidebar with React Router + useLocation (Pro Patterns)
#react
#frontend
#webdev
#programming
Cursor vs Windsurf vs Cline vs Claude-Code vs Kilo Code
#ai
#programming
#developer
#ide
üíé DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community ‚Äî A space to discuss and keep up software development and manage your software career
P√°gina Inicial
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
Sobre
Contato
Free Postgres Database
Software comparisons
Forem Shop
C√≥digo de Conduta
Pol√≠tica de Privacidade
Termos de Uso
Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community ¬© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account