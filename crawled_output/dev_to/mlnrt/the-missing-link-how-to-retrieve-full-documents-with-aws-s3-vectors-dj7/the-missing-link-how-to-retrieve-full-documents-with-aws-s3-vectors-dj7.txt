The Missing Link: How to Retrieve Full Documents with AWS S3 Vectors - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SREâ€”the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project â€” features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Cryptoâ€”from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Matthieu Lienart
Posted on Sep 14
â€¢ Edited on Sep 15
The Missing Link: How to Retrieve Full Documents with AWS S3 Vectors
#aws
#rag
#vectordatabase
Why write yet another blog article on how to use AWS S3 Vectors, when there are already many such blog articles and tutorials out there?
Because all existing tutorials I read miss a critical aspect: they don't explain how to actually retrieve your full documents after finding matching vectors. Instead, they store tiny example "documents" (often just a sentence) directly in the vector metadata. This approach, while easy for a tutorial demonstrating similarity search using vectors, completely falls apart when dealing with real-world content. Hopefully nobody is going to store entire documents in a vector metadata!
This article fills this important gap. I won't rehash the basics that others have covered well. Instead, I'll focus specifically on implementing a complete document retrieval with S3 Vectors and S3 Bucket that:
Stores your actual documents in a standard S3 Bucket
Creates and indexes embeddings in S3 Vectors
Connects vector search results back to your original documents
Unlike a vector database that handles document storage and retrieval for you, S3 Vectors only manages the vector index. Understanding how to bridge this gap is essential for building production-ready applications with AWS S3 Vectors.
At a high level, using S3 Vectors is a 3 steps process for both storing and querying as shown in this diagram.
Storing Documents and Vectors
The steps to store the documents and their embeddings are:
Put the documents in a regular S3 bucket. In such a context, I hash the file name or identifier to generate the S3 object key,
Use an embedding model to generate an embedding based on the content of the document,
Store the embedding in the vector index.
In this article example, the document are crawled web pages and the S3 object key is generated by hashing the page URL. The crawled pages have the format
{
"content": string,
"metadata": {
"url": string,
"title": string
}
}
Enter fullscreen mode
Exit fullscreen mode
At a high level, the code for the 3 steps is then:
s3_vectors = boto3.client("s3vectors")
s3 = boto3.resource("s3")
MODEL_ID = "amazon.titan-embed-text-v2:0"
vectors_data_bucket = s3.Bucket(S3_DOCUMENTS_BUCKET_NAME)
vectors = []
for page in pages:
key = hashlib.md5(page["metadata"]["url"].encode()).hexdigest()
# store the actual document in the S3 bucket as a text content
vectors_data_bucket.put_object(
Key=key,
Body=page["content"].encode("utf-8"),
Metadata={
"title": re.sub(r"[^a-zA-Z0-9\s]", "", page["metadata"]["title"]),
"url": page["metadata"]["url"]
}
)
# Generate embedding for the page text
model_response = bedrock_runtime.invoke_model(
modelId=MODEL_ID,
body=json.dumps({
"inputText": page["content"],
"dimensions": 1024
}).encode("utf-8"),
)
response_body = json.loads(model_response["body"].read().decode("utf-8"))
embedding = response_body["embedding"]
# Set the vector with the same key as the S3 Object
vector = {
"key": key,
"data": {
"float32": embedding
},
"metadata": page["metadata"]
}
vectors.append(vector)
# Store the vectors in the S3 Vectors index
s3_vectors.put_vectors(
vectorBucketName=S3_VECTORS_BUCKET_NAME,
indexName=S3_VECTORS_BUCKET_INDEX_NAME,
vectors=vectors
)
Enter fullscreen mode
Exit fullscreen mode
Querying S3 Vectors and Retrieving Documents
Then when you query the S3 Vectors to retrieve the documents you need to:
Use the embedding model to generate the embedding for the search question,
Query S3 Vectors to get the embeddings close to the search embedding,
For all embeddings in the results, use the key to retrieve the objects from the S3 Bucket.
question = "What is AWS S3 Vectors?"
documents = []
# Invoke the same model to generate the embedding for the question
response = bedrock_runtime.invoke_model(
modelId=MODEL_ID,
body=json.dumps({
"inputText": question,
"dimensions": 1024
}).encode("utf-8"),
)
model_response = json.loads(response["body"].read())
question_embedding = model_response["embedding"]
# Use the query embedding to search for similar embeddings in the S3 Vectors index
query_results = s3_vectors.query_vectors(
vectorBucketName=S3_VECTORS_BUCKET_NAME,
indexName=S3_VECTORS_BUCKET_INDEX_NAME,
queryVector={"float32":question_embedding},
topK=3,
returnDistance=True,
returnMetadata=True
)
vectors = query_results.get("vectors", [])
# Retrieve the actual documents from S3 using the keys from the query results
for vector in vectors:
obj = s3.Bucket(S3_DOCUMENTS_BUCKET_NAME).Object(vector["key"]).get()
content = obj["body"].read().decode("utf-8")
documents.append({
"title": vector["metadata"]["title"],
"url": vector["metadata"]["url"],
"content": content
})
Enter fullscreen mode
Exit fullscreen mode
Key Takeaways
Unlike a vector database which stores and retrieves the documents for you, S3 Vectors only stores the vector index. It is up to you to make the relationship between the vector key and the actual document. S3 makes that easy if you use the same key for the document vector in S3 Vectors and the document object in the S3 Bucket. While storing and retrieving becomes a multi-step process that you have to orchestrate and that inevitably increases response latency, this approach offers substantial cost savings compared to dedicated vector databases.
Note that the documents do not have to be stored in a S3 Bucket. In the above example, we could imagine not storing the pages' content as objects in a S3 Bucket, and just give back the page URLs from the vectors metadata which would be crawled downstream.
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
â€¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Matthieu Lienart
Follow
I am an AWS Cloud Engineer, Data Scientist and AWS Community Builder
Work
Cloud Engineer
Joined
Sep 24, 2022
More from Matthieu Lienart
Tracing LangChain with AWS X-Ray
#aws
#langchain
#ai
#monitoring
Logging LangChain to AWS CloudWatch
#langchain
#ai
#monitoring
#aws
A Serverless Chatbot with LangChain & AWS Bedrock
#serverless
#ai
#langchain
#aws
ðŸ’Ž DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community â€” A space to discuss and keep up software development and manage your software career
Home
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem â€” the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community Â© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account