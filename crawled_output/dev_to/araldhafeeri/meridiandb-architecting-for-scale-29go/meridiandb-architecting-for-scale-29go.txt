MeridianDB Architecting for Scale and Developer Experience - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SREâ€”the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project â€” features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Cryptoâ€”from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Ahmed Rakan
Posted on Sep 14
â€¢ Edited on Sep 15
MeridianDB Architecting for Scale and Developer Experience
#webdev
#database
#javascript
#ai
A few days ago, I took all my research and turned it into a blog about designing and launching a serverless federated database for AI agents.
Iâ€™ll admit â€” that first blog post was me squeezing all my research and ideas together under pressure.
Since then, Iâ€™ve received a lot of feedback, read even more, and refined the vision. I believe itâ€™s now complete.
Recap
The goal has been to design, build, and ship an AI-first database that redefines retrieval for AI.
MeridianDB goes beyond semantic meaning â€” adding temporal, contextual, and behavioral dimensions â€” and aims to solve catastrophic forgetting, striking a better balance between stability and plasticity.
ðŸ“„ First Iteration: Fixing AI Amnesia: MeridianDBâ€™s Answer to Costly Training and Memory Loss
After three more iterations, the vision is now solid. I know what I can ship within the next three weeks, and Iâ€™ve made major architectural changes to the database.
Letâ€™s ground the work and ship by Oct 7.
MeridianDB vs Existing Solutions
The most common solution today is RAG (Retrieval-Augmented Generation) â€” a technique that enhances LLMs by fetching external, up-to-date, domain-specific data before generating a response.
MeridianDB takes this further, expanding the dimensions of meaning for agents:
Semantic Features: Same as RAG â€” the agent retrieves relevant contextual data via semantic search. But not returned right away, over-fetched, and refined through Meridian DB algorithm.
Temporal Features: Goes beyond simple time-range queries:
Data decays over time, like human memory.
Data can be marked as factual (always retrieved if matched) or irrelevant (never retrieved).
Frequency of access matters â€” both when and how often data is used.
Contextual Features: Includes user environment, task descriptions, goals â€” whatever context the developer thinks the agent needs to perform optimally.
Behavioral Features: Using simple decision tree and allowing the agent to log it's work on retrieval of a,b,c how that effected task x ? Simple but yet powerful behavioral analysis that can be powered by both human-in-the-loop and the AI agent.
Limitations of RAG
RAG pipelines are powerful but bring several challenges:
Developer Complexity: Youâ€™re orchestrating multiple databases â€” leading to potential race conditions, ghost embeddings, and partial writes.
Consistency & Scalability: How do you scale both your storage DB and vector search DB while keeping them in sync?
Availability: What happens when one database fails? Can your pipeline remain highly available?
MeridianDB addresses these issues out of the box, while pushing retrieval innovation forward.
High-Level Architecture
1â€“2) Human clients: one driven by app logic, one for DB operators.
3) Worker API gateway: handles requests from both clients and SDK integrations.
4) Eventual consistency model: write operations are queued, simplifying retries and error handling while following Cloudflareâ€™s consistency model.
5â€“8) Queues publish write events consumed by workers for vectorization and D1.
9) Retrieval engine: performs multi-dimensional queries for the AI agent.
10â€“14) Behavioral logging: tracks agent performance on tasks, creating a feedback loop for improvement.
Tabular Data for Features No more Graph RAG
With the aim of maximizing scalability and performance, features will be stored in D1 columns.
In MeridianDB, we avoid traditional graph traversal as required in a Graph RAG implementation. Instead, we use a more efficient approach:
Perform a similarity search on the query, intentionally over-fetching results.
From the over-fetched set, extract document IDs and run an SQL-based filtering query in D1.
Apply user-defined functions to compute a composite score for each result, considering contextual, behavioral, temporal, and semantic dimensions.
Return the highest-scoring results to the user.
Pseudocode:
Fetch results from Vectorize.
Run an SQL query in D1 to filter by composite score ( behavioral, contextual, temporal, semantic ).
Return the filtered results to the user.
Benefits of MeridianDB
1. Integrated Consistency Model
Queue-based architecture ensures eventual consistency without developer orchestration of multiple datastores. This reduces overhead and eliminates ghost embeddings.
Data is stored redundantly (vector + D1) to maintain its multidimensional context â€” a tradeoff made deliberately for reliability.
2. Operational Simplicity
No need to glue together multiple systems, everything comes out of the box with great developer experience including SDK. MeridianDB as well comes with a built-in operator interface for observability, data management.
3. Native AI Feedback Loop
Behavioral logging allows for continuous improvement â€” even continuous learning in the future. You can measure whether retrieved context led to task success or failure through continuously updated decision trees.
4. Cloudflare-Native Scalability
Global low-latency access, ideal for AI agents.
Automatic retries, failover, and reliability handled by Cloudflare.
Event-driven processing, cheap to scale.
Limitations
Eventual Consistency
Reads may lag slightly behind writes. Read-after-write guarantees may need replicas or caching strategies.
Complexity in Feature Engineering
Developers must provide contextual features (task description, environment, etc.). Future iterations could offload this to an agent that auto-generates context.
Storage Cost & Decay Model
Temporal decay means data needs periodic cleanup. This can be handled with background jobs.
Learning Curve
MeridianDB introduces new mental models (temporal, semantic, behavioral, contextual). Developers familiar with basic RAG pipelines may need time to adapt. The SDK is designed to hide most of this complexity, exposing only three core methods: store, retrieve, log. With optional methods to interact with agents, behavioral, memory and more.
Cloudflare Coupling
Cloudflare-native architecture delivers great performance â€” but ties you to that ecosystem.
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
â€¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Ahmed Rakan
Follow
Senior Software Engineer
Joined
May 15, 2023
More from Ahmed Rakan
BlueprintDSL: Bringing the Vibe Back to Vibe Coding
#llm
#discuss
#startup
#ai
Design Databases Like a Senior Engineer: My Battle-Tested 7-Step Process
#database
#design
#webdev
#programming
I Built a Modern Serverless JS Full-Stack Framework in One Day
#webdev
#javascript
#serverless
ðŸ’Ž DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community â€” A space to discuss and keep up software development and manage your software career
Home
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem â€” the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community Â© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account