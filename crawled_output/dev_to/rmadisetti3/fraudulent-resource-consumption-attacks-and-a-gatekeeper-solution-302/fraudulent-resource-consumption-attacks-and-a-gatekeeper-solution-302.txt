Fraudulent Resource Consumption Attacks and a Gatekeeper Solution - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SREâ€”the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project â€” features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Cryptoâ€”from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Raj Madisetti
Posted on Sep 17
Fraudulent Resource Consumption Attacks and a Gatekeeper Solution
#frc
#aws
#cloud
#gatekeeper
Hello cyber enthusiasts and professionals,
Today, I will be presenting the persistent threat of Fraudulent Resource Consumption (FRC) attacks and a proposed Gatekeeper solution below.
Problem
Fraudulent Resource Consumption (FRC) attacks are a stealthy, yet prevalent threat to Cloud Service Providers with a goal to exploit unattended vulnerabilities and deplete CSP resources. These attacks aim to take advantage of the pay-per-use algorithm that most Cloud Service Providers such as Amazon Web Services and Microsoft Azure use. FRC attacks involve an attacker covertly gaining access to an unsuspecting Cloud userâ€™s account and setting up automated fraudulent resource requests (botnet) in order to siphon network resources for personal gain or malicious intent. Damages to CSPâ€™s are based on the utility pricing model, the attackerâ€™s skill level, and motivation.
FRC attacks are extremely important issues to address for Cloud users and Cloud Service Providers alike. They can critically disrupt organizational operations by dominating bandwidth and storage which can significantly slow or shut down Cloud servers. If servers are impacted heavily, it can lead to serious financial losses along with legal implications if contracts with private businesses are involved. Oftentimes, these attacks can also serve as distractions to lure attention away from more probing security threats such as data theft and network infiltration. Therefore, we should be diligent to implement a quick and methodical solution to Fraudulent Resource Consumption attacks in order to completely remove the problem.
Solution
This blog aims to introduce an effective solution to this FRC problem using a Gatekeeper medium in order to filter user requests to a Cloud service. This Gatekeeper can be
used as another form of authentication in order to sanitize each Cloud request to verify its source and priority. If a user cannot be verified, its requests will be assigned to the lowest possible priority and will be severely limited as to not incur any significant FRC costs. In essence, we will allow normal and verified traffic to pass through efficiently through the
Gatekeeper while clamping down on questionable Cloud requests. This will, in theory, eliminate the entire threat of FRC attacks in our Cloud model.
Experimental Approach
Normal request traffic, along with a simulated FRC (Fraudulent Resource Consumption) attack, was sent to an endpoint with and without a gatekeeper mechanism. The simulation involved ten trials of sending ten minutes of normal traffic at 200 requests per minute, five minutes of elevated traffic at 300 requests per minute, and another ten minutes of normal traffic to invoke Lambda functions, both with and without the Gatekeeper. The graphs were analyzed in Amazon Web Services (AWS). Both graphs showed noticeable peaks during the middle five minutes. The effectiveness of the Gatekeeper was measured by the reduction in the average requests per minute (RPM) of that peak with a clearly defined start and end time. The experiment is considered successful if the Gatekeeper reduces the average RPM of the peak by 70% throughout the ten trials.
The Gatekeeper proof of concept (POC) is a Python application with a client and server side. The client side sends requests with a payload (function name with user priority, region, and path) to the server on behalf of a predetermined number of users. The server side processes the requests from the client and executes them based on function priority. If a user has a low priority, their requests will be limited and will take longer to execute. This mechanism reduces the FRC peak for the Gatekeeper. A Python algorithm was used to send normal and FRC traffic to a Lambda function endpoint in AWS. CloudWatch Analytics was used to produce accurate line graphs to track function invocations as a metric for requests per minute.
Metrics for Evaluation
To evaluate and analyze the performance we can consider the following metrics:
Requests per minute (RPM): Measures the rate of requests being sent.
Response time: Time taken to get a response from the server.
Success rate: Number of successful responses versus the total number of requests.
Error rate: Number of failed requests.
Rate limit hits: Number of times the requests are rate-limited.
Retry count: Number of times requests are retried due to rate limiting.
Latency: Time delay between sending a request and receiving a response.
System load: CPU, memory, and network usage on the server handling the requests.
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
â€¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Raj Madisetti
Follow
Engineering professional with a Masters of Science in Information Security (Cybersecurity) from the Georgia Institute of Technology.
Joined
Sep 25, 2018
Trending on DEV Community
Hot
What was your win this week?!
#weeklyretro
#discuss
Kubernetes on the cloud vs on bare metal : Deception 101
#kubernetes
#cloud
#aws
#programming
AI Infrastructure Cloud Setup: Practical Choices That Scale
#ai
#architecture
#infrastructure
#cloud
ðŸ’Ž DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community â€” A space to discuss and keep up software development and manage your software career
Home
DEV++
Welcome Thread
Reading List
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Free Postgres Database
Software comparisons
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem â€” the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community Â© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account