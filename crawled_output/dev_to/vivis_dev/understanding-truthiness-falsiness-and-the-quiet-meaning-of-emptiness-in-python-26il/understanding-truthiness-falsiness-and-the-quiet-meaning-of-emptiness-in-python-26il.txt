Understanding truthiness, falsiness, and the quiet meaning of emptiness in Python - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE‚Äîthe hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project ‚Äî features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto‚Äîfrom Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Vivis Dev
Posted on Sep 11
‚Ä¢ Edited on Sep 20
‚Ä¢ Originally published at pythonkoans.substack.com
Understanding truthiness, falsiness, and the quiet meaning of emptiness in Python
#python
#programming
#beginners
#tutorial
Python Koans (12 Part Series)
1
Understanding truthiness, falsiness, and the quiet meaning of emptiness in Python
2
Understanding the difference between identity and equality, and why it matters more than it seems.
...
8 more parts...
3
Understanding how Python evaluates default arguments and why mutable defaults can carry unintended memory
4
Understanding Late Binding in Python Closures
5
Understanding Python‚Äôs LEGB rule, closures, and why variables sometimes behave like shadows.
6
Exploring how functions in Python are treated as first-class citizens, and the untapped potential they hold.
7
Navigating Python's import system and namespace packages
8
Understanding Python‚Äôs rules for hashing
9
Exploring chained operations and order of evaluation in python expressions
10
Understanding how Python's list comprehensions work under the hood
11
Exploring the dangerous power of unquoted Python strings, and how they caused CVE-2024-9287
12
Understanding Python dataclasses and how fields determine equality and hashing.
The Hidden Teaching: __bool__ and the Design of Truth
In Python, truth is not a binary of True and False. It is a reflection of meaning. Python asks, ‚ÄúIn the context of logic, what does this object say about itself?‚Äù
To control how an object behaves in a boolean context, such as in an if statement, you may define the __bool__ method.
Let us begin again.
Part 1: The Interpreter‚Äôs Question
When Python evaluates an object in a boolean context like:
if some_object:
...
Enter fullscreen mode
Exit fullscreen mode
It performs this sequence:
Call some_object.__bool__(), if defined.
If not defined, fall back to some_object.__len__():
If length is 0, treat as False.
Otherwise, treat as True.
If neither are defined, default to True
Thus, even a custom class can define its own measure of truth.
Part 2: Writing Our Own Truth
Let us construct a simple object: a container of wisdom.
class Scroll:
def __init__(self, text):
self.text = text
Enter fullscreen mode
Exit fullscreen mode
Now, let us observe its truth:
s = Scroll("Do not seek the truth, only cease to cherish opinions.")
if s:
print("The scroll speaks.")
else:
print("The scroll is silent.")
Enter fullscreen mode
Exit fullscreen mode
This will always print "The scroll speaks.", because Scroll has no __bool__ or __len__. Python defaults to treating all objects as True unless told otherwise.
Now, let us give it a voice of truth:
class Scroll:
def __init__(self, text):
self.text = text
def __bool__(self):
return bool(self.text.strip())
Enter fullscreen mode
Exit fullscreen mode
Now, observe:
Scroll(" ") # Behaves like False
Scroll("Peace") # Behaves like True
Enter fullscreen mode
Exit fullscreen mode
We have taught our object how to express its presence.
Part 3: Falling Back on __len__
If __bool__ is not defined, Python looks for __len__.
class WisdomBasket:
def __init__(self):
self.sayings = []
def __len__(self):
return len(self.sayings)
Enter fullscreen mode
Exit fullscreen mode
Now:
basket = WisdomBasket()
if basket:
print("There is wisdom.")
else:
print("The basket is empty.")
Enter fullscreen mode
Exit fullscreen mode
This is useful when your object represents a collection, and truth is tied to its contents.
Part 4: Truth as a Design Decision
Why does this matter?
Because in real-world code, truthiness is often meaning. Consider:
if response:
...
Enter fullscreen mode
Exit fullscreen mode
What should response mean?
Did the HTTP request succeed?
Did the response body contain useful data?
Was the status 200?
You decide what __bool__ should convey.
When designing APIs, internal libraries, or user-defined classes, a clear definition of truth can reduce boilerplate and make intent self-evident.
Part 5: A Caution on Ambiguity
Truthiness should be unambiguous and intuitive.
If your object represents a configuration, a request, or a resource, consider what it means to be ‚Äútruthy.‚Äù Avoid cleverness that makes the logic obscure:
if config:
# What does this mean?
Enter fullscreen mode
Exit fullscreen mode
Better to document, or avoid using truthiness altogether if the semantics are unclear.
Closing the Circle
The master did not say, "The empty list is False."
He said, "Not false. Only empty."
In Python, truth is not fixed. It is a shadow cast by your design. You may choose how your objects reflect light, or the absence of it.
If you enjoyed this post, consider subscribing or sharing it with your friends:
Python Koans | Vivis Dev | Substack
Python lessons wrapped in koans. Small puzzles, deep truths. Not your usual tutorial thread. Click to read Python Koans, by Vivis Dev, a Substack publication with hundreds of subscribers.
pythonkoans.substack.com
Python Koans (12 Part Series)
1
Understanding truthiness, falsiness, and the quiet meaning of emptiness in Python
2
Understanding the difference between identity and equality, and why it matters more than it seems.
...
8 more parts...
3
Understanding how Python evaluates default arguments and why mutable defaults can carry unintended memory
4
Understanding Late Binding in Python Closures
5
Understanding Python‚Äôs LEGB rule, closures, and why variables sometimes behave like shadows.
6
Exploring how functions in Python are treated as first-class citizens, and the untapped potential they hold.
7
Navigating Python's import system and namespace packages
8
Understanding Python‚Äôs rules for hashing
9
Exploring chained operations and order of evaluation in python expressions
10
Understanding how Python's list comprehensions work under the hood
11
Exploring the dangerous power of unquoted Python strings, and how they caused CVE-2024-9287
12
Understanding Python dataclasses and how fields determine equality and hashing.
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
‚Ä¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Vivis Dev
Follow
AI Tinkerer | Pythoneer
Subscribe to my free Python newsletter: https://pythonkoans.substack.com
Joined
Sep 10, 2025
More from Vivis Dev
Understanding Python dataclasses and how fields determine equality and hashing.
#python
#programming
Exploring the dangerous power of unquoted Python strings, and how they caused CVE-2024-9287
#python
#programming
#shell
#cve
Understanding how Python's list comprehensions work under the hood
#python
#programming
#koan
üíé DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community ‚Äî A space to discuss and keep up software development and manage your software career
Home
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community ¬© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account