Claude Code vs Codex: Dev Workflow Comparison - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE—the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project — features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto—from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Rohith Singh
for Composio
Posted on Sep 15
• Originally published at composio.dev
Claude Code vs Codex: Dev Workflow Comparison
#webdev
#mcp
#llm
#ai
For the past few days, there has been a lot of hype around OpenAI's Codex. And at the same time, Claude Code has been evolving day by day, to a perfect AI Agent with a list of features like subagents, slash commands, MCP support, and so much more. While I still prefer Claude Code, I thought it would be interesting to see how both of them perform on the same task. People say Codex + GPT-5 provides code closer to what a human would write, so let's test them out.
Before we begin, Codex has introduced their support for stdio based MCPs. But still lacks the direct support for HTTP endpoints for MCPs. So to make sure our MCPs work, I've written a simple proxy layer over the stdio support so that Codex can use MCPs like Figma, Jira, GitHub, and more. You can find the code here: rube-mcp-adapter-auth.js
So I ran a real build using Figma MCP for UI cloning and a separate coding challenge. And as always both agents got identical prompts, same setup.
All the code from this comparison can be found here: github.com/rohittcodes/claude-vs-codex.
TL;DR
Don't have time? Here's what happened:
Figma cloning: Claude Code captured the design better but missed the yellow theme and a few details; Codex created its own version but was faster and cheaper
Job scheduler: Claude Code provided more reasoning steps and structured code; Codex was concise and faster
Overall: Claude Code is better for complex, detailed tasks with multiple steps. Codex is more efficient for straightforward code generation, with its own way of writing code.
UX/DX: Codex felt simpler to set up, and use (not the http based MCPs); Claude’s developer experience felt deeper once you get used to it.
Cost: Claude Code used more tokens overall (Figma: 6,232,242; Scheduler: 234,772) vs Codex (Scheduler: 72,579; Figma: 1,499,455)
Introduction
Claude Code comes with native MCP support and extensive context windows. Codex recently added stdio-based MCP support (they still don't have direct support for HTTP endpoints for MCPs), while Claude Code supports MCPs out of the box. Btw, If you don't know what MCPs are, you can read about them here.
Instead of benchmarks, I wanted a practical comparison: build something devs can recognize. So, the tasks I picked were:
Figma UI cloned into a working frontend
A lightweight job scheduler with timezone handling
All within one day, with me just prompting.
How I tested them
I ran both agents through identical challenges:
Tools: Rube MCP + Figma
Languages: TypeScript
Measure: Token usage, time, code quality, dev experience
Both agents got the same prompts to keep it fair.
Rube MCP - Universal MCP Server
Rube MCP (by Composio) is the universal connection layer for MCP toolkits like Figma, Jira, GitHub, and more. Explore toolkits: docs.composio.dev/toolkits/introduction.
How to connect:
Go to rube.composio.dev
Click "Add to Claude Code"
Copy the command, run it in your terminal, then run /mcp to authenticate your Rube MCP server. Once done, you can start using the tools.
For Codex, we’ll reuse the same auth token via the proxy layer, setup the rube-mcp-adapter-auth.js file from the repo. See Codex config docs here if you want more control over Codex setup. For now, your config.toml should contain:
[mcp_servers.rube]
command = "node"
args = ["your-path-to/rube-mcp-adapter-auth.js"]
Enter fullscreen mode
Exit fullscreen mode
Coding Comparison
Round 1: Figma design cloning
I picked a complex landing page from Figma Community and asked both agents to recreate it using Next.js and TypeScript. You can find the Figma design here.
Prompt:
Recreate the Figma landing page at [FIGMA_URL] in Next.js + TypeScript using TailwindCSS v4 only (no config file).
Follow a modular structure (components/layout/*, components/ui/*, components/sections/*), ensure pixel-accurate fidelity (typography, spacing, shadows, colors), and make it fully responsive (desktop, tablet, mobile).
No inline styles or third-party UI libraries.
Extract reusable components for repeated Figma elements, and enforce strict TypeScript types (no any).
Goal: A clean, maintainable, production-ready codebase that mirrors the Figma design as close as possible.
Enter fullscreen mode
Exit fullscreen mode
I wasn’t building the full developer platform here, just cloning a large landing page to see how close each agent could get.
Claude Code results
Claude Code (Sonnet 4) delivered a working Next.js app but missed the yellow theme entirely. It captured the design structure to some extent and even exported images from the Figma design, but the visual accuracy was disappointing. The layout was there but colors, spacing, and typography were noticeably different from the original.
Tokens: used a lot more than Codex.. 6,232,242 tokens to be exact.
Time: Longer due to more iterations
Design fidelity: Partial - missed key theme elements
Codex results
Codex (GPT-5 Medium) created its own version of the landing page. It didn't replicate the theme, layout, or components from the original design. Instead, it built a decent-looking landing page from scratch with no image exports. The result was functional but completely different from the Figma design.
Tokens: fewer than Claude Code (i.e., 1,499,455 tokens)
Time: ~10 minutes
Design fidelity: None - created original design
Claude Code captured more of the original design but missed critical elements. Codex was faster and cheaper but ignored the design brief entirely.
Round 2: Job scheduler challenge
For the second task, It took a lot of time to decide upon this, it maybe not the best, but this is what I have for now.. PS: Suggest me some ideas for the new blogs.
I threw a complex TypeScript challenge at both agents: build a timezone-aware cron scheduler with persistence and catch-up execution. This tests system design, timezone handling, and production-ready code structure.
Prompt:
Build a lightweight job scheduler in TypeScript (Node.js) with the following requirements:
- Supports cron-style expressions (e.g., "09**1" = every Monday at 9AM).
- Must be timezone-aware: jobs scheduled in "America/New_York" vs "Asia/Kolkata" should trigger at correct local times even if the server runs in UTC.
- Implement a persistence layer (SQLite or JSON file) so scheduled jobs survive restarts.
- On startup, the scheduler must detect missed jobs (e.g., if server was down at scheduled time) and run catch-up executions.
- Provide a clean TypeScript interface with addJob, removeJob, listJobs methods.
- Include at least one example job (e.g., log "Hello World" daily at 9 AM in two different timezones).
- Must be written in modular, production-ready TypeScript (no any, no inline hacks).
- Optimize for readability + maintainability.
Enter fullscreen mode
Exit fullscreen mode
You can run both the projects by cloning the repo here
Claude Code results
Claude Code delivered a comprehensive solution with extensive documentation and reasoning steps. It provided detailed explanations, great comments for typical part of the codes, and built-in test cases. The implementation was thorough with proper error handling, graceful shutdown, and production-ready structure.
Tokens: 234,772. Higher token usage due to detailed explanations
Time: Longer due to comprehensive approach
Code quality: Production-ready with extensive documentation
Codex results
Codex was more concise and direct. It built a modular, timezone-aware cron scheduler with JSON persistence and catch-up functionality. The solution was clean and functional but with less verbose explanations. It focused on getting the job done efficiently.
Tokens: 72,579. Lower token usage, but more concise
Time: ~15 minutes
Code quality: Clean and functional
Both delivered working solutions. Claude Code provided more educational value and comprehensive documentation, while Codex was more efficient and direct.
What it costed (tokens + time)
Numbers vary by task complexity, but relative behavior was consistent:
Figma task: Claude Code used significantly more tokens due to detailed reasoning and image exports; Codex was more efficient
Scheduler task: Claude Code provided comprehensive documentation but higher token usage; Codex was concise and faster
Overall: Claude Code (Sonnet 4) ~2-3× Codex (GPT-5 Medium) on token usage
Exact usage so far, Figma: Claude Code 6,232,242; Codex 1,499,455. Scheduler: Claude Code 234,772; Codex 72,579.
Conclusion
Both can build apps with MCPs in a single day, but they approach tasks differently:
Claude Code strengths
Better design fidelity with Figma (when it follows instructions)
More comprehensive documentation and reasoning
Production-ready code structure
Educational value with detailed explanations
Codex strengths
Faster raw generation
More cost-effective token usage
Direct, concise solutions
Good for "get something running" quickly
As for my take, use Codex if you want a prototype fast and cheap, or when design fidelity isn't critical, Only use Claude Code if you care about maintainability, documentation, and production readiness. And also for design-heavy tasks, Claude Code is better but can miss key elements (like the yellow theme) or maybe it was because the recent performance issues with ClaudeAI.
Top comments (1)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Collapse
Expand
Rohan Sharma
Rohan Sharma
Rohan Sharma
Follow
Dive deeper than the deepest! || Programmer || Developer || Designer || Technical Writer
Email
specialrohansharma200@gmail.com
Location
Bihar, India
Education
B.tech, Nalanda College of Engineering, Chandi, 2022-26
Pronouns
he/him
Joined
Aug 16, 2024
•
Sep 15
Dropdown menu
Copy link
Hide
Codex is still not available in copilot
Like comment:
Like comment:
1 like
Like
Comment button
Reply
Code of Conduct
•
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Composio
Follow
Making AI Agents Actually Useful
More from Composio
Top 5 N8N Alternatives for Developers
#mcp
#ai
#productivity
#nocode
MCP & API: Are they Two Sides of the Same Coin, or Worlds Apart?
#mcp
#api
#ai
#productivity
13 MCP Servers Every Developer Should Use 💻
#webdev
#programming
#javascript
#ai
💎 DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community — A space to discuss and keep up software development and manage your software career
Home
DEV++
Welcome Thread
Reading List
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Free Postgres Database
Software comparisons
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem — the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community © 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account