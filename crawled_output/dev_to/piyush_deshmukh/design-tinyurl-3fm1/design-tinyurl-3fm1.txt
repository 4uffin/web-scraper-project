Design TinyURL - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE‚Äîthe hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project ‚Äî features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto‚Äîfrom Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Piyush Deshmukh
Posted on Sep 14
‚Ä¢ Originally published at piyushdeshmukh.hashnode.dev
Design TinyURL
#systemdesign
#backend
#architecture
#webdev
Introduction
A URL Shortener service takes a long URL (like https://example.com/some/very/deep/path) and produces a much shorter alias (like https://short.ly/aBcD12). Users accessing the short URL are redirected to the original long URL. Examples include TinyURL, Bitly, etc.
Functional Requirements
Features
Shorten a long URL
Redirect from Short URL ‚Üí Long URL
Analytics
Users
100M DAU (daily active users)
100:1 read to write ratio
1M writes/day
500 bytes each entry size
Data retention for 5 years
Non-Functional Requirements
High Availability - The system should be available 24/7, minimal downtime.
Low Latency - Redirects should be very fast (~200 ms).
High Durability - Data must persist even if servers crash.
API Endpoints
POST /api/urls/shorten
Request Body:
{
"longUrl": "https://example.com/some/very/deep/path"
}
Response Body:
{
"shortUrl": "https://short.ly/aBcD12"
}
GET /:shorturl
Response Body:
{
"longUrl": "https://example.com/some/very/deep/path"
}
High Level Design
Initial flow for a URL Shortening service will have:
Client sends a URL to shorten
The client sends a POST request to the API Gateway, including the original long URL.
API Gateway Forwards to URL Shortening Service
The API Gateway routes the request to the URL Shortening Service.
This service:
Generates a shortCode
Saves the mapping (shortCode ‚Üí longUrl) in the database
Returns the short URL to the client (e.g., https://short.ly/abc123)
Client Uses the Short URL
When anyone clicks the short URL (https://short.ly/abc123), a GET request is sent to the API Gateway.
API Gateway Routes to URL Redirection Service
The Redirection Service looks up the short code (abc123) in database.
Redirect to Original URL
Once the long URL is retrieved, the service responds with a 301 or 302 redirect to the original long URL.
The browser follows this redirect and loads the long URL.
Optimize Design & Deep Dives
How will someone be redirected to original url when clicked on short url?
When someone clicks on short url, the URL Redirection Service finds corresponding short url in DB.
And responds with an HTTP 302 status code (or 301), along with the Location header:
HTTP 302 Found
Location: https://www.example.com/very/long/path?ref=campaign
Why use 302 (Found) instead of 301 (Moved Permanently)?
302 is Temporary:
Tells browsers - "This redirect might change later. Don't cache it permanently."
301 is Permanent:
Tells browsers and search engines: "This link will always go to the same place."
Browsers will cache it permanently.
Why use NoSQL DB for a URL Shortener?
URL shorteners are a perfect fit for NoSQL because they involve simple key-value lookups. For example, you just need to map shortCode ‚Üí longUrl, which doesn‚Äôt require complex joins or relationships.
NoSQL offers:
High read/write throughput
Schema flexibility (you can add tracking data later)
Horizontal scalability (easily handle millions of requests)
Low-latency key-based access
We can use a highly available DB (eg, DynamoDB or Cassandra) to persist mappings
What data should we store in the DB?
URL
{
"shortCode": "abc123",
"longUrl": "https://www.example.com/very/long/article?id=12345",
"createdAt": "2025-09-14T10:00:00Z",
"userId": "77a211ff"
}
User
{
"userId": "77a211ff",
....
}
As we know URL Shortener is Read heavy, so how can we optimize our system?
Add a Caching Layer (eg. Redis)
Cache popular shortCode ‚Üí longUrl mappings
Reduces database reads and latency
Use TTL or LRU eviction policy to manage memory
Use indexing on shortcode in DB
Ensure the DB has a proper index on shortcode field.
Speeds up lookup queries for redirection.
How to generate unique IDs for each long url?
Generating unique, collision-free short codes is critical to the URL shortener‚Äôs design. Here are the most common methods:
Auto-Incrementing Counter + Base62 Encoding
Use a global counter that increments for each new URL.
Convert the counter number to Base62 (0-9, A-Z, a-z) to get a short, URL-friendly string.
Example: 125 ‚Üí "cb"
Pros:
Simple, predictable, no collisions.
Very short codes.
Cons:
Needs centralized counter (hard to scale).
Sequential URLs can reveal traffic volume.
Random String with Collision Check
Generate a random Base62 string of fixed length (eg., 6 chars).
Check the database for collisions, regenerate if exists.
Pros:
Easy to scale horizontally.
Hard to guess next short code (better privacy).
Cons:
Small collision risk (can be minimized by length).
Requires DB check on every generation.
Hashing the Long URL
Hash the original URL (MD5/SHA) and use first N chars as short code.
Same long URL always gets same short code.
Pros:
Idempotent (no duplicates for same URL).
No centralized state needed.
Cons:
Collision risk.
Slightly longer or less friendly codes.
UUID or GUID Encoding
Generate a UUID, encode in Base62 or hex.
Use a substring as the short code.
Pros:
Globally Unique.
Cons:
Codes are longer.
Note: For most URL shorteners, especially at small to medium scale, the Random String + Collision Check method offers the best balance.
How can we scale the system to handle High Traffic?
Sharding:
To handle high traffic and scale efficiently, we can use sharding to distribute data and load across multiple machines. This enables horizontal scaling, allowing us to add more nodes as traffic grows without major reconfiguration.
Load Balancing:
Use load balancers to distribute incoming requests evenly across services.
Prevents any one server from being overloaded.
CDN Edge Caching
Use a CDN (e.g., Cloudflare) to cache redirects at edge locations.
Reduces latency for global users.
Offloads requests before they even hit your backend.
Final Design
If you found this post helpful, feel free to:
üí¨ Drop a comment ‚Äî I‚Äôd love to hear your thoughts or answer your questions!
üîÅ Share it with others learning system design.
üìå Follow me here on Dev.to for more deep dives like this!
Thanks for reading! :)
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
‚Ä¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Piyush Deshmukh
Follow
Software Developer
Joined
Aug 24, 2025
Trending on DEV Community
Hot
Debugging with AI: How I Cut Error Fix Time by 70%
#ai
#programming
#webdev
#devops
The Secret Formula to Product Development in 2026
#webdev
#programming
#ai
#javascript
3 Reasons You're in Tech Post-Layoff Shock (Based on personal experience)
#career
#beginners
#learning
üíé DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community ‚Äî A space to discuss and keep up software development and manage your software career
Home
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community ¬© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account