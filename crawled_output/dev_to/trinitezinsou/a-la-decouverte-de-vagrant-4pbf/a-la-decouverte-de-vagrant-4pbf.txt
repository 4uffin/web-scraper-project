A la d√©couverte de vagrant - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE‚Äîthe hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project ‚Äî features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto‚Äîfrom Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
ZINSOU Trinit√©
Posted on Sep 14
A la d√©couverte de vagrant
#vagrant
#linux
#devops
#virtualmachine
üß† Introduction
"Et si tu pouvais faire appara√Ætre autant de machines comme par magie, autant que tu en voudrais pour tes environnementes tests? Pas de baguette, juste Vagrant."
Les environnements de test peuvent vite virer au cauchemar : installation foireuse, conflits de versions, etc. Et si on changeait √ßa avec un outil qui te fait sentir comme un DevOps sorcier ? üé©‚ú®
Dans cet article, on va :
D√©couvrir ce qu‚Äôest Vagrant (sans s‚Äôendormir) üò¥‚ùå
L‚Äôutiliser pour cr√©er deux VMs Ubuntu üñ•Ô∏èüñ•Ô∏è et pr√©parer un environnement de test pour notre s√©rie sur les sauvegardes incr√©mentales avec Postgre+Barman
Et tester notre setup comme des pros üß™
ü™Ñ Vagrant, c‚Äôest quoi ce truc ?
"Vagrant, c‚Äôest un peu comme Docker, mais pour les VM. C‚Äôest ton chef d‚Äôorchestre pour VirtualBox, VMware, Hyper-V, et autres joyeuset√©s. C‚Äôest un outil ultra fiable pour g√©rer des environnements complets avec de vraies machines virtuelles de mani√®re simple et automatis√©e."
Il s‚Äôagit d‚Äôun outil d√©velopp√© par Hashicorp permettant de g√©rer facilement des VMs avec une isolation totale des d√©pendances et des configurations, tout ceci dans un environement unique et jetable.
Tu lui √©cris un Vagrantfile, tu tapes vagrant up, et boum üí• : ta(tes) machine(s) est(sont) l√†, toute pr√™te √† etre utilis√©e(s). Pas besoin de cliquer sur 27 boutons dans VirtualBox ou te battre avec Hyper-V.
Vagrant t‚Äô√©vite de :
‚ùå Aller t√©l√©charger une ISO
‚ùå Suivre l‚Äôinstallateur √† la main
‚ùå Gal√©rer avec le r√©seau et les scripts
‚úÖ Il te permet de tout faire automatiquement, et de r√©initialiser ton environnement quand tu veux, comme une sauvegarde rapide de ta vie de dev.
üîç Pourquoi c‚Äôest pratique ?
üîÑ Test facile : tu veux tester une config Postgres ? SSH ? Un cluster ? Un lab r√©seau? Boom, tu spin une VM.
üí• Sans risque : tu peux facilement pr√©parer des d√©mos ou tutoriels sans polluer ta machine principale. Si tu casses tout, tu fais vagrant destroy && vagrant up et √ßa repart.
ü§ù Partageable : tu bosses en √©quipe ? Tu commits ton Vagrantfile et tout le monde a le m√™me environnement.
üß™ Proche de la prod : tu peux cr√©er des environnements qui imitent vraiment un serveur r√©el (contrairement √† Docker qui fait du container). Tu as d√©sormais donc tout pour apprendre l‚Äôadmin syst√®me ou le DevOps.
üõ†Ô∏è Comment √ßa fonctionne ?
Vagrant repose sur :
Un provider (g√©n√©ralement VirtualBox ou Hyper-V) pour faire tourner les machines
Les boxes : ce sont des images de syst√®mes d√©ployables au sein de tout environnement Vagrant. Il s'agit en pratique d'une fa√ßon de packager une distribution afin de permettre un d√©ploiement uniforme quel que soit le syst√®me d'exploitation ou l'hyperviseur utilis√©. Tu peux consulter le depot officiel des boxes de vagrant ici
Un Vagrantfile (ta recette): le fichier dans lequel toute la magie se d√©finie.
Des scripts ou outils pour provisionner la machine (installer des logiciels, configurer les services de base)
Vagrant va provisioner la machine en fonction de ce qui est d√©crit dans le fichier Vagrantfile (souvent √† la racine du projet). Un fichier Vagrantfile est un fichier Ruby, dont le contenu ne n√©cessite pas une grande connaisance de Ruby. Il sert √† d√©crire toutes les caract√©ristiques de la machine cible (stockages, Ram, r√©seaux, etc) et aussi √† pr√©parer tous les utilitaires de base n√©cessaire au bon fonctionnement de la machine.
üéì Premiers pas avec vagrant
Dans la suite nous allons prendre en main vagrant et mettre en place un lab pour la s√©rie √† propos des sauvegardes incr√©mentales avec postgres. On mettra dans la suite notre lab en place sur une machine Ubuntu.
Il s‚Äôagira √† la fin de pouvoir d√©marrer deux VM sur lequelles nous allons installer respectivement barman et postgres.
üöÄ Installation de Vagrant
Tu peux installer vagrant soit en ligne de commande soit avec un executable disponible sur la documentation officielle ici.
Il faudra aussi VirtualBox fonctionnel pour la suite, c‚Äôest le provider vagrant que nous allons utiliser dans la suite
üõ†Ô∏è Manipulation de Vagrant
Pour d√©marrer nous allons simplement √©crire notre premier Vagrantfile, on y mettra le minimum d‚Äôinformation pour faire tourner une VM. Il faudra cr√©er un dossier qui contiendra un fichier Vagrantfile dont le contenu pourra √™tre le suivant
Vagrant.configure("2") do |config|
config.vm.box = "ubuntu/focal64"
config.vm.hostname = "vagrantbox"
end
Enter fullscreen mode
Exit fullscreen mode
Vagrant mets √† disposition une large vari√©t√© de commande pour manipuler les diff√©rentes composantes de l‚Äôecosyst√®me vagrant comme vagrant box list ou vagrand box add box_name pour respectivement lister les box disponibles localement, et ajouter une box √† la collection locale.
$ vagrant box add ubuntu/focal64
==> box: Loading metadata for box 'ubuntu/focal64'
box: URL: https://vagrantcloud.com/api/v2/vagrant/ubuntu/focal64
This box can work with multiple providers! The providers that it
can work with are listed below. Please review the list and choose
the provider you will be working with.
1) hyperv
2) libvirt
3) virtualbox
4) vmware_desktop
Enter your choice: 3
==> box: Adding box 'ubuntu/focal64' (v2004.01) for provider: virtualbox
box: Downloading: https://vagrantcloud.com/ubuntu/boxes/focal64/versions/20240821.0.1/providers/virtualbox/unknown/vagrant.box
Enter fullscreen mode
Exit fullscreen mode
$ vagrant box list
ubuntu/bionic64 (virtualbox, 20230607.0.0)
ubuntu/focal64
(virtualbox, 20240220.0.0)
Enter fullscreen mode
Exit fullscreen mode
Plus d‚Äôinformation sur la gestion des box vagrant ici.
V√©rifions ensuite que la syntaxe du fichier est correcte avec vagrant validate. S‚Äôil n‚Äôy a aucune erreur tu verras le message suivant Vagrantfile validated successfully.
A ce stade s‚Äôil n‚Äôy a aucune erreur, on peut lancer notre vm avec la commande vagrant up
$ vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
==> default: Importing base box 'ubuntu/focal64'...
==> default: Matching MAC address for NAT networking...
==> default: Checking if box 'ubuntu/focal64' version '20240220.0.0' is up to date...
==> default: A newer version of the box 'ubuntu/focal64' for provider 'virtualbox' is
==> default: available! You currently have version '20240220.0.0'. The latest is version
==> default: '20240821.0.1'. Run `vagrant box update` to update.
==> default: Setting the name of the VM: ocr_default_1749933808776_2967
==> default: Clearing any previously set network interfaces...
[...]
$ vagrant status
Current machine states:
default
running (virtualbox)
[...]
Enter fullscreen mode
Exit fullscreen mode
Une fois la VM lanc√©e, on pourra s‚Äôy connecter par ssh pour effectuer nos diff√©rentes manipulations avec la commande vagrant ssh nom_machine.
Vagrant peut etre bien aussi utilis√© dans un context pour r√©pondre √† un sch√©ma d‚Äôarchitecture multi-tiers ie plusieurs machines(parfois avec diff√©rents OS) √† la fois comme c‚Äôest souvent le cas en production; il suffi juste d‚Äôalligner autant de description de VM qu‚Äôil nous faut.
Connectons nous √† pr√©sent √† notre machine jusqu‚Äôici pr√©par√©e
$ vagrant ssh default
Welcome to Ubuntu 20.04.6 LTS (GNU/Linux 5.4.0-172-generic x86_64)
* Documentation:
https://help.ubuntu.com
* Management:
https://landscape.canonical.com
* Support:
https://ubuntu.com/pro
[...]
vagrant@vagrantbox:~$
Enter fullscreen mode
Exit fullscreen mode
Le diagramme ci-dessous illustre le parcours typique d'une machine virtuelle Vagrant, depuis son initialisation jusqu'√† sa suppression compl√®te.
√âtapes principales
vagrant init
Initialise un projet Vagrant en cr√©ant un Vagrantfile.
Configured vagrantfile
Etape importante pour la mise en place du Vagrantfile. On y mettre le necessaire pour la pr√©paration de la machine(provisonnement et autre). Ensuite grace √† la commande vagrant up on d√©marre la machine virtuelle. Si elle n‚Äôexiste pas, elle est cr√©√©e et provisionn√©e.
Running
La machine est en cours d'ex√©cution. √Ä partir de l√†, plusieurs options s‚Äôoffrent √† toi :
* `vagrant reload` : red√©marre la VM avec la config √† jour
* `vagrant suspend` / `vagrant resume` : suspend et reprend l‚Äôex√©cution
* `vagrant halt` : √©teint la VM proprement
* `vagrant provision` : r√©ex√©cute les scripts de provisioning
Enter fullscreen mode
Exit fullscreen mode
Destroy
Avec vagrant destroy, la VM est compl√®tement supprim√©e. Tu reviens alors √† un √©tat propre.
üöÄ Provisionner les VM vagrant
Maintenant que notre environnement de base est d√©fini dans le Vagrantfile, il est temps de pr√©parer chaque machine pour qu‚Äôelles soient pr√™tes √† l‚Äôemploi ie installer le n√©cessaire qu‚Äôil faut pour les utiliser; c‚Äôest l‚Äôetape du provisionnement.
Vagrant met √† disposition plusieurs interfaces pour provisionner nos VM: les provisionneur de type shell, fichier, chef, docker, ansible, etc. Dans la suite, nous allons d√©couvrir quelques un de ces provisonneurs et pr√©parer le n√©cessaire pour provisonner nos VM pour le lab sur postgres et vagrant.
Provisionner Shell
Il permet de sp√©cifier une suite d‚Äôinstruction √† ex√©cuter pour provisionner la machine. Cette interface supporte par defaut deux options inline et path pour respectivement sp√©cifier une commande √† directement saisir dans le vagranfile ou le chemin vers un script bash deja pret √† l‚Äôemploi pour pr√©parer notre machine comme le montre l‚Äôexemple ci dessous
Vagrant.configure("2") do |config|
# ... autre configuration
config.vm.provision "shell",
inline: "echo Hello, World"
end
Vagrant.configure("2") do |config|
# ... autre configuration
config.vm.provision "shell", path: /path/to/my/bash/script
end
Enter fullscreen mode
Exit fullscreen mode
Provisionner fichier
Il permet de monter un fichier ou un dossier depuis la machine h√¥te vers la machine virtuelle.
Ce m√©canisme est particuli√®rement utile lorsqu‚Äôil s‚Äôagit de partager des scripts de provisionnement, des fichiers de configuration ou des jeux de donn√©es entre l‚Äôh√¥te et la VM, sans avoir √† les copier manuellement √† chaque fois. Pour copier par exemple un fichier vers la machine hote, la syntaxe est la suivante:
Vagrant.configure("2") do |config|
# ... autre configuration
config.vm.provision "file", source: "~/path/to/host/folder", destination: "$HOME/remote/newfolder"
end
Enter fullscreen mode
Exit fullscreen mode
Cette copie est ponctuelle et ne synchronise pas l‚Äôetat des fichiers. Pour synchroniser l‚Äôetat des fichiers entre l‚Äôhote et la VM, la configuration doit se pr√©senter comme suit:
Vagrant.configure("2") do |config|
# ... autre configuration
config.vm.synced_folder "src/", "/srv/website"
end
Enter fullscreen mode
Exit fullscreen mode
Pour plus d‚Äôinformations sur la sychronisation consulter la documentation officielle ici.
Provisionner ansible
Contrairement aux scripts shell classiques, le provisionneur Ansible permet de d√©crire l‚Äô√©tat attendu d‚Äôun syst√®me de mani√®re d√©clarative. Cela signifie que tu √©cris des "playbooks" (fichiers YAML) qui d√©finissent ce que tu veux obtenir (ex.‚ÄØ: PostgreSQL install√©, un utilisateur cr√©√©, un service d√©marr√©), et Ansible s‚Äôoccupe de faire le n√©cessaire pour atteindre cet √©tat, sans r√©p√©ter inutilement les t√¢ches d√©j√† effectu√©es.
üîç Avantages d‚Äôutiliser Ansible avec Vagrant :
‚úÖ Code plus lisible, structur√© et r√©utilisable.
üîÅ Idempotence : rejouer un playbook ne modifie rien si tout est d√©j√† en place.
‚öôÔ∏è Facile √† maintenir, surtout pour des environnements complexes ou multi-machines.
Vagrant peut ex√©cuter Ansible en tant que provisionneur local ou distant, selon que Ansible est install√© sur l‚Äôh√¥te ou sur la VM elle-m√™me.
Voici un exemple minimal dans un Vagrantfile :
config.vm.provision "ansible" do |ansible|
ansible.playbook = "playbook.yml"
ansible.inventory_path = "inventory.ini"
end
Enter fullscreen mode
Exit fullscreen mode
üß™ Phase pratique : mise en place du lab PostgreSQL + Barman
Il est temps de passer √† la pratique et de construire notre environnement de test.
L‚Äôobjectif de cette phase est de cr√©er deux machines virtuelles √† l‚Äôaide de Vagrant :
üêò Une premi√®re VM avec PostgreSQL install√©; elle simulera notre base de donn√©es source,
üì¶ Une seconde VM avec barman install√©; elle repr√©sentera un poste administrateur ou une machine de contr√¥le depuis laquelle on pourra g√©rer nos sauvegardes.
Nous allons automatiser l‚Äôinstallation de chaque composant √† l‚Äôaide de scripts de provisionnement Bash. Le Vagrantfile d√©finira l‚Äôarchitecture de notre lab et ex√©cutera les scripts automatiquement au d√©marrage des machines.
Commen√ßons par cr√©er le fichier Vagrantfile et les scripts n√©cessaires √† l‚Äôinstallation de postgres et barman.
Vagranfile:
# Vagrantfile
Vagrant.configure("2") do |config|
config.vm.define "vm1_postgres" do |vm1|
vm1.vm.box = "ubuntu/jammy64"
vm1.vm.hostname = "postgres"
vm1.vm.network "private_network", ip: "192.168.56.10"
vm1.vm.provision "shell", path: "scripts/setup_postgres.sh"
end
config.vm.define "vm2_vagrant" do |vm2|
vm2.vm.box = "ubuntu/jammy64"
vm2.vm.hostname = "vagrant"
vm2.vm.network "private_network", ip: "192.168.56.11"
vm2.vm.provision "shell", path: "scripts/setup_vagrant.sh"
end
end
Enter fullscreen mode
Exit fullscreen mode
scripts/setup_postgres.sh
#!/bin/bash
set -e
echo "[INFO] Installation de PostgreSQL..."
# Mise √† jour des paquets
sudo apt-get update
# Installation de PostgreSQL
sudo apt-get install -y postgresql postgresql-contrib
# V√©rification
psql --version && echo "[OK] PostgreSQL install√©"
Enter fullscreen mode
Exit fullscreen mode
scripts/setup_barman.sh
#!/bin/bash
set -e
echo "[INFO] Installation de Barman..."
# Mise √† jour des paquets
sudo apt-get update
# Installation de Barman (et d√©pendances)
sudo apt-get install -y barman
# V√©rification
barman --version && echo "[OK] Barman install√©"
Enter fullscreen mode
Exit fullscreen mode
üß© Conclusion
Nous venons de d√©couvrir Vagrant et en application poser les bases d‚Äôun environnement de test en mettant en place deux machines virtuelles : l'une avec PostgreSQL install√©, et l'autre avec Barman, notre outil de sauvegarde dans la s√©rie sur les sauvegardes incr√©mentales.
Gr√¢ce √† Vagrant et aux scripts de provisionnement, nous avons automatis√© le d√©ploiement de cet environnement, ce qui nous permettra de reproduire facilement nos tests, de gagner du temps, et d‚Äô√©viter les erreurs manuelles.
Ce que nous avons mis en place ici ne se limite pas au contexte de postgres et de barman : ce type de lab peut servir de base g√©n√©rique pour toutes sortes de pratiques DevOps, d‚Äôexp√©rimentations syst√®mes ou de tests techniques en environnement isol√©.
üß∞ Un socle simple, reproductible et extensible id√©al pour apprendre, tester, casser‚Ä¶ et recommencer !
√Ä tr√®s bient√¥t pour le prochain article de ce blog
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
‚Ä¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
ZINSOU Trinit√©
Follow
Software builder into clean architecture, automation & clear docs. Bilingual (EN/FR). Open to collabs, tech writing & job opportunities.
Location
Remote
Joined
Jun 1, 2022
More from ZINSOU Trinit√©
Getting Started with Vagrant
#tooling
#ubuntu
#devops
#vagrant
Setting up incremental backups with PostgreSql - Implementation - Part 2
#ubuntu
#postgres
#tutorial
#devops
üíé DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community ‚Äî A space to discuss and keep up software development and manage your software career
Home
Welcome Thread
Reading List
Tags
About
Contact
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community ¬© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account