How to Make Coding Fun in JavaScript (Almost Like in Clojure) - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SREâ€”the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project â€” features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Cryptoâ€”from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Stanislav Somov
Posted on Sep 23
How to Make Coding Fun in JavaScript (Almost Like in Clojure)
#javascript
#tooling
#node
#productivity
A REPL?! What is it?
REPL stands for Read-Eval-Print Loop, and in Clojure itâ€™s the way to work with
code. Itâ€™s interactive, fast, and honestly just fun. You write some code, run it
immediately, and boom - youâ€™ve got the result right there.
The problem with the default NodeJS REPL is that itâ€™s not very practical for
everyday coding. Running it in a terminal isnâ€™t convenient: you donâ€™t see the
full picture, your code isnâ€™t linted/checked beforehand, and youâ€™re constantly
switching between the editor and the terminal, losing focus and context.
So, in this post Iâ€™ll show you how to make JavaScript coding way more
interactive and enjoyable - kinda like how people code in Clojure.
For example, in JavaScript you might write:
function add(a, b) { return a + b; }
Enter fullscreen mode
Exit fullscreen mode
To test it, youâ€™d usually add some tests, or do something like:
console.log(add(36, 6));
Enter fullscreen mode
Exit fullscreen mode
Then run it with:
node index.js
Enter fullscreen mode
Exit fullscreen mode
Thatâ€™s a lot of steps for a single result.
In Clojure, itâ€™s much more direct:
(defn add [a b] (+ a b))
(add 35 7) ;; => 42
Enter fullscreen mode
Exit fullscreen mode
The feedback loop is immediate. (Of course, we still need proper tests for
real-world software, but for exploration and problem-solving, a REPL is very
effective.)
The Recipe
So how do we bring that to JavaScript?
I wrote an extension for the Conjure plugin
in Neovim. Setup is simple - just follow the
docs:
Install Neovim
Install Conjure
Install NodeJS
Install Treesitter and
run :TSInstall javascript inside Neovim
Create a new ".js" file and open it in Neovim(for example: nvim repl-test.js
in your terminal). Conjure should attach automatically if everything is setup
correctly.
Thatâ€™s it - youâ€™re ready to start evaluating JavaScript straight from your editor.
Why bother? Because once youâ€™ve got this REPL loop going, you make fewer bugs,
you can actually feel the flow of your code, and you tweak things way faster.
Example:
const mult = (a, b) => a * b;
mult(3, 4);
// (out) 12
mult(5, 3);
// (out) 15
mult(10, 8); // (out) 80
Enter fullscreen mode
Exit fullscreen mode
Want to see the value of an expression quickly? Press <localleader>ee
(Conjureâ€™s default). Need to explore an object? Just evaluate it:
const obj = { a: 1, b: { c: 3 } }; // eval this first
obj.b.c;
// (out) 3
Enter fullscreen mode
Exit fullscreen mode
Debugging on the Fly
Checking intermediate steps becomes simple:
[1, 2, 2, 3].reduce((acc, x) => {
console.log("acc", acc);
console.log("x", x);
console.log("val", acc[x]);
return { ...acc, [x]: ++acc[x] || 1 };
}, {});
Enter fullscreen mode
Exit fullscreen mode
Youâ€™ll instantly see each step in Conjureâ€™s log buffer. No rerunning files, no
juggling terminals. Just... flow.
A Quick Clojure Example
Clojure developers often define a function and immediately test it inside a
(comment ...) block:
(defn name-extractor [m] (get m :name))
(comment
(name-extractor {:name "Kisha"}) ;; "Kisha"
(name-extractor {:age 20}))
;; nil
Enter fullscreen mode
Exit fullscreen mode
If we want to return :noname when the field is missing, we just adjust the
function:
(defn name-extractor [m]
(get m :name :noname))
Enter fullscreen mode
Exit fullscreen mode
And if we want to handle empty strings as well:
(defn name-extractor [{:keys [name]}]
(or (not-empty name) :noname))
Enter fullscreen mode
Exit fullscreen mode
Each step is tried and refined in the REPL.
Doing the Same in JavaScript
function nameExtractor({ name }) {
return name || "noname";
}
nameExtractor({ name: "John" }); // 'John'
nameExtractor({ age: 15 });
// 'noname'
nameExtractor({ name: "" });
// 'noname'
Enter fullscreen mode
Exit fullscreen mode
Just like in Clojure, you can write small test cases inline and adapt the
function step by step.
Exploring RXJS
RXJS can feel abstract at first, but with the REPL you can experiment
interactively and see results as you go:
import { BehaviorSubject } from "rxjs"
import { combineLatestWith, map, tap } from "rxjs/operators"
let o1 = new BehaviorSubject({ a: 1 })
let o2 = new BehaviorSubject({ b: 6 })
o1.pipe(combineLatestWith(o2),
tap(x => console.log("combined:", x)),
map(([{ a }, { b }]) => a + b),
tap(x => console.log("sum:", x))
).subscribe()
o1.next({ a: 2 })
o2.next({ b: 8 })
o1.unsubscribe()
o2.unsubscribe()
Enter fullscreen mode
Exit fullscreen mode
You can adjust values, rerun them, and instantly observe how the transformations
behave.
Useful Keybindings
<localleader>ef - evaluate the whole file
<localleader>ts - toggle Stray Out Mode (to see delayed evaluations like
setTimeout)
<localleader>cr - restart the REPL (clears all previous evaluations)
<localleader>E
- evaluate a selected block of text in visual mode (great for
JSDoc examples)
NodeJS Quirks (Handled by Conjure)
Arrow functions canâ€™t be redefined in the NodeJS REPL, but Conjure rewrites
them as regular functions.
import isnâ€™t supported in the NodeJS REPL, but Conjure translates it into
require.
Wrapping Up
These tricks can make your workflow in JavaScript faster, more interactive, and
closer to the Clojure REPL style. A shorter feedback loop not only makes coding
more enjoyable, but also helps you write cleaner, more reliable code.
Top comments (1)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Collapse
Expand
roshan sharma
roshan sharma
roshan sharma
Follow
Joined
Sep 20, 2025
â€¢
Sep 23
Dropdown menu
Copy link
Hide
Wow, this hits the sweet spot, Iâ€™ve always wanted JS to feel more interactive without jumping between editor & terminal all the time. Using Conjure + Neovim for REPL sounds great.
Like comment:
Like comment:
1Â like
Like
Comment button
Reply
Code of Conduct
â€¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Stanislav Somov
Follow
Joined
Sep 23, 2025
Trending on DEV Community
Hot
3 Reasons You're in Tech Post-Layoff Shock (Based on personal experience)
#career
#beginners
#learning
Why Are You Not Reading My Post?
#tutorial
#discuss
#productivity
#career
"Your Profile Doesn't Match the Role" and Other Interview Horror Stories
#watercooler
#career
#interview
#discuss
ðŸ’Ž DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community â€” A space to discuss and keep up software development and manage your software career
Home
Welcome Thread
Reading List
Tags
About
Contact
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem â€” the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community Â© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account