Hidden Classes: The JavaScript performance secret that changed everything - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE—the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project — features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto—from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Max Prilutskiy
Posted on Sep 17
Hidden Classes: The JavaScript performance secret that changed everything
#javascript
#webdev
#learning
Last week, I was profiling a Node.js service at Lingo.dev that was mysteriously slow. Chrome DevTools kept mentioning something called "Hidden Classes" in the performance panel. One accidental click on that term sent me down a rabbit hole that completely transformed how I write JavaScript.
Here's the wild part: by understanding this one concept, you can make your JavaScript code run 10x, 50x, sometimes even 100x faster. No exaggeration. I've been writing JavaScript for years, and discovering Hidden Classes felt like finding out that my car had a turbo button I never knew existed.
By the end of this article, you'll understand exactly how V8 (Chrome's JavaScript engine) optimizes your objects behind the scenes, why seemingly innocent code can destroy performance, and most importantly - how to write JavaScript that runs at near-native speeds. Let's dive into one of JavaScript's best-kept optimization secrets.
What Are Hidden Classes, Really?
Here's the thing that blew my mind: JavaScript doesn't have classes. Not really. When we write class in JavaScript, it's syntactic sugar over prototypes. But V8 creates actual classes internally - Hidden Classes - to make your dynamic JavaScript objects behave like static C++ structs.
Think about it. In C++, when you access struct.field, the compiler knows exactly where that field lives in memory. It's just pointer arithmetic. But JavaScript? We can add properties whenever we want:
const user = {};
user.name = "Alice";
// Just added a property!
user.age = 28;
// Another one!
user.premium = true;
// Why not?
delete user.age;
// Changed my mind!
user["dynamic" + "Prop"] = "chaos"; // Living dangerously!
Enter fullscreen mode
Exit fullscreen mode
How does V8 make this dynamic chaos fast? Hidden Classes. Every time you create an object, V8 assigns it a hidden class (internally called a Map) that describes the object's shape - what properties it has and where they're stored in memory.
V8's team explains this brilliantly: Hidden Classes are V8's secret weapon for turning JavaScript's flexibility into C++-like performance.
The Shape-Shifting Magic
This is where it gets interesting. Watch what happens when we create objects:
// Step 1: Empty object gets Hidden Class HC0
const point = {};
// Step 2: Adding 'x' creates Hidden Class HC1
// HC1 says: "I have property 'x' at offset 0"
point.x = 5;
// Step 3: Adding 'y' creates Hidden Class HC2
// HC2 says: "I have 'x' at offset 0, 'y' at offset 1"
point.y = 10;
Enter fullscreen mode
Exit fullscreen mode
But here's the genius part - V8 creates a transition chain:
HC0 → (add x) → HC1 → (add y) → HC2
Now when you create another object with the same pattern:
const point2 = {};
// Reuses HC0!
point2.x = 15;
// Follows transition to HC1!
point2.y = 20;
// Follows transition to HC2!
Enter fullscreen mode
Exit fullscreen mode
V8 doesn't create new hidden classes. It reuses the existing chain! This is why object creation order matters so much.
I created a visualization to show this in action:
// These objects share the same Hidden Class
const users = [
{name: "Alice", age: 28, city: "NYC"},
{name: "Bob",
age: 34, city: "LA"},
{name: "Carol", age: 29, city: "Chicago"}
];
// But this breaks the pattern - different Hidden Class!
const wrongOrder = {age: 25, name: "Dave", city: "Boston"};
Enter fullscreen mode
Exit fullscreen mode
Performance: The Numbers That Matter
I didn't believe the performance impact until I ran benchmarks. Check this out:
// Monomorphic function - processes one shape
function getX(point) {
return point.x;
}
// Create 1 million points with same shape
const goodPoints = [];
for (let i = 0; i < 1000000; i++) {
goodPoints.push({x: i, y: i * 2});
}
// Create 1 million points with different shapes
const badPoints = [];
for (let i = 0; i < 1000000; i++) {
if (i % 2) {
badPoints.push({x: i, y: i * 2});
// Shape A
} else {
badPoints.push({y: i * 2, x: i});
// Shape B - different order!
}
}
console.time('Monomorphic');
let sum = 0;
for (const p of goodPoints) sum += getX(p);
console.timeEnd('Monomorphic');
// ~8ms on my machine
console.time('Polymorphic');
sum = 0;
for (const p of badPoints) sum += getX(p);
console.timeEnd('Polymorphic');
// ~450ms on my machine
Enter fullscreen mode
Exit fullscreen mode
That's a 56x difference! For the exact same logical operation!
Why? When getX sees only one hidden class (monomorphic), V8's inline cache remembers: "property x is always at offset 0". It becomes a simple memory read. But with multiple shapes (polymorphic), V8 checks: "Is this HC1? Check offset 0. Is this HC2? Check offset 1..." Eventually, with too many shapes (megamorphic), it gives up and does slow dictionary lookups.
Benedikt Meurer's optimization killers guide shows even more dramatic examples.
Common Pitfalls That Murder Performance
After diving deep into V8's source and Mathias Bynens' excellent articles, I found patterns that destroy Hidden Class optimizations:
The Delete Disaster
// DON'T DO THIS
const user = {name: "Alice", age: 28, premium: false};
delete user.premium;
// Forces dictionary mode - game over!
// DO THIS INSTEAD
user.premium = null;
// Maintains Hidden Class
user.premium = undefined;
// Also maintains Hidden Class
Enter fullscreen mode
Exit fullscreen mode
Once you delete, V8 converts the object to dictionary mode - a hash table. Every property access becomes a hash lookup. I've seen this single line slow down entire applications.
The Order Chaos
// DON'T: Random property order
function createUser(data) {
const user = {};
if (data.name) user.name = data.name;
if (data.email) user.email = data.email;
if (data.age) user.age = data.age;
return user;
}
// Creates different Hidden Classes based on which properties exist!
// DO: Consistent shape
function createUser(data) {
return {
name: data.name || null,
email: data.email || null,
age: data.age || null
};
}
// Always same Hidden Class!
Enter fullscreen mode
Exit fullscreen mode
The Dynamic Property Trap
// DON'T: Dynamic property names in hot code
function process(obj, fields) {
const result = {};
for (const field of fields) {
result[field] = obj[field];
// Different shapes each time!
}
return result;
}
// DO: Known shapes
function processUser(user) {
return {
id: user.id,
name: user.name,
email: user.email
};
// Always same shape!
}
Enter fullscreen mode
Exit fullscreen mode
The Art of Monomorphic Code
After weeks of optimization, here are patterns that consistently deliver peak performance:
Constructor Pattern
class Point {
constructor(x = 0, y = 0) {
// Initialize ALL properties in constructor
this.x = x;
this.y = y;
this._cached = null;
// Even future properties!
}
cache(value) {
this._cached = value;
// No new properties added
}
}
Enter fullscreen mode
Exit fullscreen mode
Object Pool Pattern
// Reuse objects with consistent shape
const pointPool = [];
function acquirePoint(x, y) {
if (pointPool.length > 0) {
const p = pointPool.pop();
p.x = x;
p.y = y;
return p;
}
return {x, y};
// Consistent shape
}
function releasePoint(p) {
pointPool.push(p);
}
Enter fullscreen mode
Exit fullscreen mode
Array Processing Pattern
// Processing uniform arrays is FAST
const users = userIds.map(id => ({
id,
name: null,
email: null,
lastSeen: null
}));
// Later: fill in data without changing shape
for (const user of users) {
const data = await fetchUser(user.id);
user.name = data.name;
user.email = data.email;
user.lastSeen = data.lastSeen;
}
Enter fullscreen mode
Exit fullscreen mode
Bonus: Peeking Under the Hood with V8 Flags
Want to see Hidden Classes in action? V8 has secret flags that expose everything:
# See Hidden Class transitions
node --trace-maps your-script.js
# See inline cache states
node --trace-ic your-script.js
# See deoptimizations happen
node --trace-deopt your-script.js
Enter fullscreen mode
Exit fullscreen mode
I spent an entire weekend running these flags on production code. The output is verbose but incredibly educational. You can literally see V8 creating Hidden Classes, following transitions, and deoptimizing when you mess up.
Here's a mind-blowing trace output I got:
[TraceMaps: ReplaceDescriptors from= 0x1234...a (map 0x1234...b) to= 0x1234...c reason= field]
-x: +0 const DATA
+x: +0 const DATA
+y: +1 const DATA
Enter fullscreen mode
Exit fullscreen mode
That's V8 creating a transition from HC1 (has x) to HC2 (has x and y). It's like watching the Matrix!
The Performance Transformation
Remember that slow Node.js service I mentioned at the beginning? After applying Hidden Class optimizations:
Response time: 340ms → 28ms
Memory usage: -40%
CPU utilization: -65%
The changes were surprisingly simple: consistent property initialization, removing delete statements, and ensuring uniform object shapes in hot paths. The Chrome DevTools Performance panel confirmed: inline cache hits went from 12% to 94%.
Conclusion
Hidden Classes are JavaScript's performance secret sauce. They're why V8 can make a dynamic language compete with static ones. Understanding them transformed how I write JavaScript - not through complex algorithms or fancy libraries, but by respecting how JavaScript engines actually work.
The beauty is that monomorphic code isn't just faster - it's often cleaner and more predictable. When you initialize all properties upfront, your objects become self-documenting. When you avoid delete, you're forced to handle nulls properly. When you maintain consistent shapes, your code becomes more maintainable.
Next time you're debugging performance issues, remember: those innocent-looking objects might be shape-shifting more than you think. A few strategic changes to maintain Hidden Class stability can unlock massive performance gains.
Join the Conversation:
At Lingo.dev, we develop APIs and open source tools to help developers produce perfect translations for their apps and documentation. Performance optimization like Hidden Classes is crucial when processing thousands of translation strings in real-time.
🐦 Follow us on Twitter for dev memes
OR
💬 Join our fast-growing Discord community where developers work on next-gen i18n tools, share tips & tricks and debate whether that last millisecond matters (spoiler: it does)
Have a performance mystery you've solved? Share it with the community - we love learning about clever optimizations in the wild!
Top comments (3)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Collapse
Expand
Jessica Williams
Jessica Williams
Jessica Williams
Follow
I am Jessica Williams, a SEO Executive at Dev Technosys, a leading Artificial Intelligence Development Company.
Location
Commerce, CA, USA
Joined
Feb 11, 2025
•
Sep 18
Dropdown menu
Copy link
Hide
A rare find that provided a lot of information.
Like comment:
Like comment:
2 likes
Like
Comment button
Reply
Collapse
Expand
Max Prilutskiy
Max Prilutskiy
Max Prilutskiy
Follow
Hacking on open source, with JavaScript and LLMs. Thoughts on software development, and unusual tech stuff.
Location
San Francisco, California
Work
Author of Lingo.dev
Joined
Aug 18, 2021
•
Sep 19
Dropdown menu
Copy link
Hide
Thank you Jessica 🫸🫷
Like comment:
Like comment:
1 like
Like
Comment button
Reply
Collapse
Expand
Veronica Prilutskaya 🌱
Veronica Prilutskaya 🌱
Veronica Prilutskaya 🌱
Follow
building Lingo.dev.
Location
San Francisco, California
Work
Lingo.dev
Joined
May 10, 2023
•
Sep 18
Dropdown menu
Copy link
Hide
surprised how significantly it decreases response time
Like comment:
Like comment:
1 like
Like
Comment button
Reply
Some comments may only be visible to logged-in visitors. Sign in to view all comments.
Code of Conduct
•
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Max Prilutskiy
Follow
Hacking on open source, with JavaScript and LLMs. Thoughts on software development, and unusual tech stuff.
Location
San Francisco, California
Work
Author of Lingo.dev
Joined
Aug 18, 2021
More from Max Prilutskiy
[Boost]
#api
#javascript
#webdev
Introducing Lingo.dev Compiler: Localize a React app without rewriting its code
#react
#webdev
#javascript
Upcoming JavaScript Features You Should Know About
#javascript
#typescript
#webdev
💎 DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community — A space to discuss and keep up software development and manage your software career
Home
Welcome Thread
Reading List
Tags
About
Contact
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem — the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community © 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account