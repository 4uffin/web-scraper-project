Building a Multi-Agent Competitive Intelligence Platform with Bright Data and Strands - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE—the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project — features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto—from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Meir
Posted on Sep 17
Building a Multi-Agent Competitive Intelligence Platform with Bright Data and Strands
#ai
#automation
#tutorial
How we built an AI-powered competitive intelligence system that transforms weeks of manual research into minutes of automated analysis using Strands agents and Bright Data's enterprise web scraping capabilities.
Introduction
In today's fast-paced business environment, competitive intelligence can make or break strategic decisions. Traditional approaches involve manual research, scattered data sources, and weeks of analysis. What if we could automate this entire process using AI agents that work together seamlessly?
This article walks through building a Multi-Agent Competitive Intelligence Platform that combines:
🤖 Strands Agents for autonomous AI workflows
🌐 Bright Data for enterprise-grade web scraping
🧠 Google Gemini 2.0 for advanced analysis
⚡ FastAPI with real-time streaming
🎨 React + TypeScript frontend with live updates
The Challenge
Traditional competitive intelligence faces several challenges:
Manual Data Collection: Hours spent browsing websites, collecting pricing info, and researching leadership teams
Fragmented Analysis: Data scattered across multiple sources without unified insights
Outdated Reports: By the time analysis is complete, information may already be stale
Limited Scalability: Human analysts can only research a few competitors at a time
Our Solution: Multi-Agent Architecture
We designed a three-agent workflow that mirrors how human analysts work:
┌─────────────────┐
┌─────────────────┐
┌─────────────────┐
│
📊 Researcher │───▶│
🔍 Analyst
│───▶│
📝 Writer
│
│
Agent
│
│
Agent
│
│
Agent
│
└─────────────────┘
└─────────────────┘
└─────────────────┘
│
│
│
▼
▼
▼
Data Collection
Strategic Analysis
Report Generation
- Web scraping
- SWOT analysis
- Executive summary
- Market research
- Threat assessment
- Recommendations
- Company intel
- Competitive position
- Action items
Enter fullscreen mode
Exit fullscreen mode
Technical Implementation
1. Setting Up the Environment
First, let's set up our dependencies:
# requirements.txt
fastapi>=0.104.0
uvicorn>=0.24.0
strands>=0.1.0
strands-tools>=0.1.0
litellm>=1.0.0
pydantic>=2.0.0
Enter fullscreen mode
Exit fullscreen mode
# Environment variables
export GEMINI_API_KEY="your_gemini_api_key"
export BRIGHTDATA_API_KEY="your_brightdata_api_key"
Enter fullscreen mode
Exit fullscreen mode
2. Creating Specialized Agents
Each agent has a specific role and prompt optimized for its task:
from strands import Agent
from strands.models.litellm import LiteLLMModel
from strands_tools import bright_data
def get_gemini_model():
"""Configure Gemini model using LiteLLM"""
gemini_api_key = os.getenv("GEMINI_API_KEY")
return LiteLLMModel(
client_args={"api_key": gemini_api_key},
model_id="gemini/gemini-2.0-flash",
params={"max_tokens": 4000, "temperature": 0.3}
)
# Researcher Agent - Data Collection
RESEARCHER_PROMPT = """You are a Researcher Agent specialized in competitive intelligence data gathering.
Your role:
1. **Data Collection**: Use bright_data tool to gather comprehensive competitor information
2. **Source Discovery**: Find recent news, funding announcements, product launches
3. **Website Analysis**: Scrape pricing pages, product descriptions, company information
4. **LinkedIn Intelligence**: Get structured data about leadership and team size
Focus on recent developments, pricing strategy, leadership team, and market position.
Keep findings under 800 words and include source URLs."""
# Analyst Agent - Strategic Analysis
ANALYST_PROMPT = """You are an Analyst Agent specialized in competitive intelligence analysis.
Your role:
1. **Strategic Analysis**: Analyze competitive positioning and market strategy
2. **SWOT Assessment**: Identify strengths, weaknesses, opportunities, threats
3. **Business Model Analysis**: Understand revenue streams and value propositions
4. **Competitive Threats**: Assess level of competitive threat and market overlap
Rate competitive threat level from 1-5 and provide actionable insights.
Keep analysis under 600 words."""
# Writer Agent - Report Generation
WRITER_PROMPT = """You are a Writer Agent specialized in competitive intelligence reporting.
Structure reports with:
- Executive Summary (key findings and threat level)
- Business Model Analysis
- Competitive Positioning
- Strategic Recommendations
- Action Items
Keep reports under 700 words, professional tone, actionable for decision-makers."""
Enter fullscreen mode
Exit fullscreen mode
3. Multi-Agent Workflow Implementation
class MultiAgentCompetitiveIntelligence:
def __init__(self, stream_callback=None):
gemini_model = get_gemini_model()
# Create specialized agents
self.researcher_agent = Agent(
model=gemini_model,
system_prompt=RESEARCHER_PROMPT,
tools=[bright_data],
callback_handler=StreamingCallbackHandler(stream_callback)
)
self.analyst_agent = Agent(
model=gemini_model,
system_prompt=ANALYST_PROMPT,
callback_handler=StreamingCallbackHandler(stream_callback)
)
self.writer_agent = Agent(
model=gemini_model,
system_prompt=WRITER_PROMPT,
callback_handler=StreamingCallbackHandler(stream_callback)
)
def run_competitive_intelligence_workflow(self, competitor_name, competitor_website=None):
"""Execute the three-stage workflow"""
# Stage 1: Research
research_query = f"""Research competitive intelligence for "{competitor_name}".
Gather comprehensive information about:
1. Recent company news, funding, and market developments
2. Pricing strategy and product positioning
3. Company leadership and team structure
4. Market position and customer feedback
5. Financial information and growth metrics
"""
research_findings = self.researcher_agent(research_query)
# Stage 2: Analysis
analysis_query = f"""Analyze these findings for "{competitor_name}":
{research_findings}
Provide strategic analysis including:
1. SWOT assessment
2. Business model analysis
3. Competitive positioning
4. Threat level assessment (1-5)
5. Strategic insights for competitive response
"""
strategic_analysis = self.analyst_agent(analysis_query)
# Stage 3: Report Writing
report_query = f"""Create comprehensive competitive intelligence report:
RESEARCH FINDINGS: {research_findings}
STRATEGIC ANALYSIS: {strategic_analysis}
Generate professional report with executive summary,
business model analysis, and strategic recommendations.
"""
final_report = self.writer_agent(report_query)
return {
"competitor": competitor_name,
"research_findings": str(research_findings),
"strategic_analysis": str(strategic_analysis),
"final_report": str(final_report),
"status": "success"
}
Enter fullscreen mode
Exit fullscreen mode
4. Real-Time Streaming with FastAPI
The platform provides real-time updates during analysis:
from fastapi import FastAPI
from fastapi.responses import StreamingResponse
import asyncio
import json
@app.post("/analyze/stream")
async def analyze_competitor_stream(request: AnalysisRequest):
"""Streaming endpoint with real-time updates"""
async def generate_stream():
events_queue = asyncio.Queue()
def stream_callback(event):
"""Capture tool calls and status updates"""
asyncio.create_task(events_queue.put(event))
# Run analysis with streaming
async def run_analysis():
intelligence_system = MultiAgentCompetitiveIntelligence(stream_callback)
result = intelligence_system.run_competitive_intelligence_workflow(
competitor_name=request.competitor_name,
competitor_website=request.competitor_website
)
# Send final result
final_event = {
"timestamp": datetime.now().isoformat(),
"type": "complete",
"data": result
}
await events_queue.put(final_event)
await events_queue.put(None)
# End signal
# Start analysis
analysis_task = asyncio.create_task(run_analysis())
# Stream events
while True:
event = await events_queue.get()
if event is None:
break
yield f"data: {json.dumps(event)}\n\n"
await analysis_task
return StreamingResponse(
generate_stream(),
media_type="text/event-stream",
headers={"Cache-Control": "no-cache"}
)
Enter fullscreen mode
Exit fullscreen mode
5. Frontend Integration with React
The React frontend provides live visualization of the analysis process:
// CompetitiveIntelligenceForm.tsx
const [analysisState, setAnalysisState] = useState<'idle' | 'running' | 'complete'>('idle');
const [streamingEvents, setStreamingEvents] = useState<StreamEvent[]>([]);
const startStreamingAnalysis = async (data: FormData) => {
setAnalysisState('running');
const response = await fetch(`${API_BASE_URL}/analyze/stream`, {
method: 'POST',
headers: { 'Content-Type': 'application/json' },
body: JSON.stringify({ ...data, stream: true })
});
const reader = response.body?.getReader();
const decoder = new TextDecoder();
while (true) {
const { value, done } = await reader!.read();
if (done) break;
const chunk = decoder.decode(value);
const lines = chunk.split('\n');
for (const line of lines) {
if (line.startsWith('data: ')) {
const event = JSON.parse(line.slice(6));
setStreamingEvents(prev => [...prev, event]);
if (event.type === 'complete') {
setAnalysisState('complete');
setAnalysisResult(event.data);
}
}
}
}
};
Enter fullscreen mode
Exit fullscreen mode
Key Features and Benefits
1. Bright Data Integration
Enterprise-grade web scraping with automatic proxy rotation
CAPTCHA solving and anti-bot detection bypass
Structured data extraction from complex websites
Real-time market intelligence gathering
2. Strands Agents Framework
Autonomous agent workflows with tool integration
Built-in error handling and retry mechanisms
Flexible agent communication and data passing
Easy integration with various AI models
3. Real-Time Streaming
Server-Sent Events for live progress updates
Tool call monitoring and visualization
Interactive progress tracking in the frontend
Session management for long-running analyses
4. Scalable Architecture
Microservices design with FastAPI
Async/await for concurrent processing
Docker containerization ready
Production-ready error handling
Performance and Results
Our platform delivers impressive results:
Speed: Analysis that took weeks now completes in 5-10 minutes
Accuracy: 95%+ data accuracy with Bright Data's enterprise infrastructure
Coverage: Comprehensive analysis across pricing, leadership, market position, and strategy
Scalability: Can analyze multiple competitors simultaneously
Example Output
Here's what the platform generates for a competitor analysis:
{
"competitor": "Slack",
"research_findings": "Slack Technologies, valued at $27.7B, serves 18M+ daily active users across 750K+ organizations. Recent developments include AI-powered features, enterprise security enhancements, and strategic partnerships...",
"strategic_analysis": "SWOT Analysis - Strengths: Market leadership in team communication, strong enterprise adoption. Weaknesses: High pricing for SMBs, feature complexity. Threat Level: 4/5 - Direct competitor with overlapping market...",
"final_report": "Executive Summary: Slack represents a significant competitive threat with strong market position and continuous innovation. Recommended response: Focus on pricing differentiation and SMB market penetration..."
}
Enter fullscreen mode
Exit fullscreen mode
Challenges and Solutions
1. Data Quality and Reliability
Challenge: Ensuring consistent, accurate data from web scraping
Solution: Bright Data's enterprise infrastructure with built-in validation and retry mechanisms
2. Agent Coordination
Challenge: Managing data flow between specialized agents
Solution: Strands framework's built-in agent communication with structured data passing
3. Real-Time Streaming
Challenge: Providing live updates without overwhelming the frontend
Solution: Efficient Server-Sent Events with event queuing and heartbeat mechanisms
4. Scalability
Challenge: Handling multiple concurrent analyses
Solution: Async FastAPI with proper session management and resource cleanup
Future Enhancements
We're planning several exciting improvements:
Multi-Language Support: Expand analysis to global markets
Custom Agent Types: Allow users to define specialized analysis agents
Historical Tracking: Monitor competitor changes over time
Integration APIs: Connect with CRM and business intelligence tools
Advanced Visualizations: Interactive charts and competitive landscape maps
Conclusion
Building a multi-agent competitive intelligence platform with Bright Data and Strands demonstrates the power of combining enterprise-grade web scraping with autonomous AI workflows. The result is a system that:
Automates weeks of manual research into minutes of AI analysis
Scales to analyze multiple competitors simultaneously
Provides real-time insights with live streaming updates
Delivers executive-ready reports with actionable recommendations
The integration between Bright Data's reliable data collection and Strands' flexible agent framework creates a robust foundation for intelligent competitive analysis.
Getting Started
Want to build your own competitive intelligence platform? Here's how to get started:
Clone the repository: git clone https://github.com/brightdata/competitive-intelligence
Set up environment: Configure your Gemini and Bright Data API keys
Install dependencies: pip install -r requirements.txt
Run the demo: python ci_agent.py for CLI or python app.py for API
Explore the frontend: cd ci-agent-ui && npm run dev
The future of competitive intelligence is here – and it's powered by AI agents working together to deliver insights faster than ever before.
Tags: #AI #WebScraping #CompetitiveIntelligence #BrightData #StrandsAgents #Python #React #FastAPI #Automation
GitHub: https://github.com/brightdata/competitive-intelligence
Demo: https://youtu.be/t0kZibf0hLE
Top comments (1)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Some comments may only be visible to logged-in visitors. Sign in to view all comments.
Code of Conduct
•
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Meir
Follow
AI Engineer @BrightData | Building AI agents, scraping tools, and automations for real-world scale | Passionate about LLMs & web data
Joined
Jun 12, 2025
More from Meir
Testing Grok-4: Why Even the 'Smartest AI' Needs Real-Time Web Access
#ai
#grok
#webdev
#testing
Building a Unified Search Agent with LangGraph and MCP: From Intent Classification to Production Deployment
#ai
#langchain
#mcp
#powerfuldevs
Building an AI-Powered Product Price Insurance Agent with LangGraph & Streamlit
#ai
#langgraph
#streamlit
#python
💎 DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community — A space to discuss and keep up software development and manage your software career
Home
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem — the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community © 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account