Building Production-Ready AWS Three-Tier Architecture with Terraform and GitOps - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SREâ€”the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project â€” features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Cryptoâ€”from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Renato Mendoza
Posted on Sep 21
Building Production-Ready AWS Three-Tier Architecture with Terraform and GitOps
#architecture
#aws
#terraform
#devops
Modern web applications demand scalable, secure, and maintainable infrastructure. This project demonstrates how to deploy a complete three-tier architecture on AWS using Terraform with professional CI/CD workflows.
What You'll Build
A production-ready architecture featuring:
Web Tier: Application Load Balancer with SSL termination and Auto Scaling Groups
Application Tier: EC2 instances running PHP web application in private subnets
Database Tier: RDS MySQL with Multi-AZ support and encrypted storage
Key Features
ðŸ”’ Security First
Private subnets for application and database tiers
AWS Secrets Manager integration for database credentials
OIDC authentication (no long-term AWS keys)
Security groups with least-privilege access
ðŸš€ GitOps Workflow
Environment-specific branches (env/dev, env/staging, env/prod)
Automated Terraform validation and planning on PRs
Manual approval gates for production deployments
Safe destroy workflows with confirmation requirements
ðŸ“Š Infrastructure as Code
Modular Terraform design for reusability
Remote state management with S3 and DynamoDB
Environment-specific configurations
Comprehensive output values
Project Structure
aws-three-tier-terraform-cicd/
â”œâ”€â”€ .github/workflows/
â”‚
â””â”€â”€ terraform.yaml
# CI/CD pipeline
â”œâ”€â”€ docs/
â”‚
â””â”€â”€ MANUAL_WORKFLOWS.md
# Manual workflow documentation
â”œâ”€â”€ infra/envs/
â”‚
â”œâ”€â”€ dev/
# Development environment config
â”‚
â”‚
â””â”€â”€ terraform.tfvars
# Dev-specific variables
â”‚
â”œâ”€â”€ staging/
# Staging environment config
â”‚
â”‚
â””â”€â”€ terraform.tfvars
# Staging-specific variables
â”‚
â”œâ”€â”€ prod/
# Production environment config
â”‚
â”‚
â””â”€â”€ terraform.tfvars
# Production-specific variables
â”‚
â”œâ”€â”€ main.tf
# Main infrastructure configuration
â”‚
â”œâ”€â”€ variables.tf
# Input variables
â”‚
â”œâ”€â”€ locals.tf
# Local values
â”‚
â””â”€â”€ versions.tf
# Terraform and provider versions
â”œâ”€â”€ modules/
â”‚
â”œâ”€â”€ application/
# Application tier module
â”‚
â”‚
â”œâ”€â”€ main.tf
# Application module implementation
â”‚
â”‚
â”œâ”€â”€ variables.tf
# Application module variables
â”‚
â”‚
â””â”€â”€ outputs.tf
# Application module outputs
â”‚
â””â”€â”€ network/
# Network tier module
â”‚
â”œâ”€â”€ main.tf
# Network module implementation
â”‚
â”œâ”€â”€ variables.tf
# Network module variables
â”‚
â””â”€â”€ outputs.tf
# Network module outputs
â””â”€â”€ scripts/
# Helper scripts
Enter fullscreen mode
Exit fullscreen mode
Quick Start
Fork the repository and configure GitHub secrets:
DB_PASSWORD
# Database password
AWS_ROLE_ARN
# OIDC role ARN
Enter fullscreen mode
Exit fullscreen mode
For detailed instructions on setting up OIDC authentication and configuring the Terraform backend, see: one-click-aws-terraform-backend-gitops-oidc
Set GitHub variables:
AWS_REGION
# Target AWS region
TF_BACKEND_*
# Terraform backend config
Enter fullscreen mode
Exit fullscreen mode
Configure environment by copying terraform.tfvars.example:
region = "us-west-2"
env_name = "dev"
certificate_arn = "arn:aws:acm:..."
domain_name = "yourdomain.com"
Enter fullscreen mode
Exit fullscreen mode
Deploy using GitOps:
Create PR to environment branches â†’ Terraform format check, validation, and plan
Merge to env/dev â†’ Deploy to development
Merge to env/staging â†’ Deploy to staging
Merge to env/prod â†’ Deploy to production (with manual approval)
CI/CD Pipeline Highlights
The GitHub Actions workflow provides:
Automated Planning: Terraform plans run on every PR with results commented
Environment Isolation: Separate workspaces for dev/staging/prod
Security Gates: Manual approval required for production changes
Safe Destruction: Multi-step confirmation for infrastructure teardown
Database Security
Credentials are handled through multiple security layers:
GitHub Secrets store the master password
AWS Secrets Manager receives the password via CI/CD
IAM Roles allow EC2 instances to retrieve credentials
No Hardcoding - passwords never appear in code or state
Production Considerations
Configure DNS manually (project doesn't create Route53 records)
Enable VPC Flow Logs for network monitoring
Use remote state backend for team collaboration
Why This Approach Works
This architecture pattern provides:
Scalability: Auto Scaling Groups handle traffic spikes
Security: Multi-layered security with private networking
Reliability: Multi-AZ deployment with load balancing
Maintainability: Modular Terraform with GitOps workflows
Cost Efficiency: Environment-specific scaling configurations
Ready to deploy enterprise-grade infrastructure? Check out the full repository for complete implementation details.
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
â€¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Renato Mendoza
Follow
Building bridges between code, cloud, and automation.
Location
Lima, PerÃº
Pronouns
He/him
Work
DevOps Engineer
Joined
Aug 9, 2025
More from Renato Mendoza
One-Click Deployments #2: AWS EKS Fargate Cluster Using Terraform and Helm
#aws
#kubernetes
#terraform
#devops
One-Click Deployments #1: Bootstrap a GitOps-Ready AWS Terraform Backend with GitHub Actions (OIDC)
#devops
#aws
#terraform
#githubactions
ðŸ’Ž DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community â€” A space to discuss and keep up software development and manage your software career
Home
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem â€” the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community Â© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account