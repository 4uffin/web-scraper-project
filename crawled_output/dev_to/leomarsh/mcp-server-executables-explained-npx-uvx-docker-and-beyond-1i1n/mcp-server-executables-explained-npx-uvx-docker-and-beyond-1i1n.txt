MCP Server Executables Explained: npx, uvx, Docker, and Beyond - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE—the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project — features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto—from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Leo Marsh
Posted on Sep 12
MCP Server Executables Explained: npx, uvx, Docker, and Beyond
#ai
#devops
#mcp
#productivity
Getting Started with MCPs (5 Part Series)
1
MCP Servers Explained: How to Connect AI to Everything in 2025
2
MCP Architecture Explained: Clients, Servers, and Tools That Power AI Integrations
3
MCP Gateways: Managing Multiple Servers Like a Pro
4
MCP Server Executables Explained: npx, uvx, Docker, and Beyond
5
The Security Vulnerabilities Hiding in Your MCP Servers
After covering MCP architecture, gateways, and how MCPs work under the hood, let's tackle something practical: how do you actually run MCP servers? If you've seen configurations with npx, uvx, or Docker commands and wondered what's going on, this post is for you.
The Executable Landscape
When you configure an MCP server, you're essentially telling your client (Claude, Cursor, VS Code) how to spawn a process that speaks the MCP protocol. But not all servers are created equal - they come in different flavors based on their underlying technology.
json
// What do these commands actually mean?
{
"mcpServers": {
"memory": {
"command": "npx",
// JavaScript/Node.js server
"args": ["-y", "@modelcontextprotocol/server-memory"]
},
"sqlite": {
"command": "uvx",
// Python server
"args": ["mcp-server-sqlite", "--db-path", "test.db"]
},
"docker-example": {
"command": "docker",
// Containerized server
"args": ["run", "-i", "mcp-server:latest"]
}
}
}
Enter fullscreen mode
Exit fullscreen mode
Understanding the Executables
npx - The Node.js Runner
npx is used for TypeScript/JavaScript-based MCP servers. It's Node Package Execute - a tool that downloads and runs Node.js packages without installing them globally.
How it works:
Downloads the package from npm registry (if not cached)
Executes it in a temporary environment
The -y flag auto-confirms any prompts
Example:
bashnpx -y @modelcontextprotocol/server-filesystem
# Downloads and runs the filesystem MCP server
Enter fullscreen mode
Exit fullscreen mode
Pros:
Zero installation required
Always runs the latest version
Simple configuration
Cons:
Security risk: runs with full system access
Requires Node.js installed
Downloads code on every fresh run
uvx - The Python Equivalent
uvx is the Python equivalent, used for Python-based MCP servers. It's part of the uv package manager - Rust-powered and blazingly fast.
How it works:
Creates isolated Python environments automatically
Downloads from PyPI (Python Package Index)
Manages dependencies in virtual environments
Example:
bashuvx mcp-server-fetch
# Runs the Python-based fetch server
Enter fullscreen mode
Exit fullscreen mode
Pros:
Faster dependency resolution than pip
Automatic virtual environment management
No Python version conflicts
Cons:
Requires uv installation first
Same security concerns as npx - full host access
Less familiar to Python developers than pip
uv - Direct Python Execution
For development, you might see uv without the x:
json{
"command": "uv",
"args": ["--directory", "/path/to/project", "run", "mcp-server"]
}
Enter fullscreen mode
Exit fullscreen mode
This runs Python code directly from a project directory - useful during development.
Docker - The Secure Option
Docker containers provide isolation and security that npx/uvx lack.
How it works:
Runs servers in isolated containers
Can limit resources and network access
Provides consistent environment across systems
Example:
json{
"command": "docker",
"args": [
"run",
"-i",
// Interactive mode for stdio
"--rm",
// Remove container after exit
"mcp-server:latest"
]
}
Enter fullscreen mode
Exit fullscreen mode
Pros:
Sandboxed execution - much more secure
Platform independent
Resource limits possible
Cons:
Requires Docker installation
Slightly more complex configuration
Container startup overhead
Direct Executables
Some MCP servers compile to native binaries:
json{
"command": "/usr/local/bin/mcp-custom-server",
"args": ["--config", "server.json"]
}
Enter fullscreen mode
Exit fullscreen mode
These are typically Go, Rust, or C++ servers compiled for specific platforms.
Local vs Remote: Where Does Execution Happen?
Local Servers (stdio transport)
Most MCP servers run locally on your machine using stdio (standard input/output):
json{
"command": "npx",
// Spawns local process
"args": ["-y", "@modelcontextprotocol/server-memory"]
}
Enter fullscreen mode
Exit fullscreen mode
Characteristics:
Client spawns the server process directly
Communication via stdin/stdout
Server has access to your local filesystem
No network configuration needed
Remote Servers (SSE/HTTP transport)
Some servers run remotely and communicate over the network:
json{
"transport": "sse",
"url": "https://mcp.example.com/sse"
}
Enter fullscreen mode
Exit fullscreen mode
Characteristics:
Server runs on separate machine/cloud
Communication via HTTP/SSE
Authentication typically required
Can scale independently
Hybrid: Local Containers
Docker bridges the gap - runs locally but with isolation:
json{
"command": "docker",
"args": ["run", "-p", "8080:8080", "mcp-server"],
"transport": "http",
"url": "http://localhost:8080"
}
Enter fullscreen mode
Exit fullscreen mode
Security Implications: The Elephant in the Room
Using npx or uvx means telling your system to download and execute whatever code is registered with that package name, with full root access to your machine.
The Risk Matrix
Best Practices
For Development: Use npx/uvx for convenience, but understand the risks
For Production: Use Docker containers or verified solutions
For Enterprise: Never use npx/uvx - containerize everything
For Sensitive Data: Run in isolated VMs or cloud environments
Platform-Specific Gotchas
Windows Issues
On Windows, npx commands often need special handling:
json// Broken on Windows:
{
"command": "npx",
"args": ["-y", "package"]
}
// Fixed:
{
"command": "cmd",
"args": ["/c", "npx", "-y", "package"]
}
Enter fullscreen mode
Exit fullscreen mode
macOS/Linux
Generally work out of the box, but watch for:
Permission issues with Docker
Path resolution differences
Shell interpretation variations
The Future: Beyond Current Executables
The MCP ecosystem is evolving rapidly. Docker is establishing containers as the standard for MCP server distribution, with initiatives like:
MCP Gateway: Remote server orchestration
Verified Marketplaces: Curated, security-audited servers
WebAssembly: Platform-independent, sandboxed execution
Practical Decision Framework
Choose npx when:
Prototyping or learning
Using official Anthropic servers
Local development only
Choose uvx when:
Working with Python-based tools
Need faster package management
Want virtual environment isolation
Choose Docker when:
Security is a concern
Need reproducible environments
Deploying to production
Working with sensitive data
Choose direct binaries when:
Maximum performance needed
Custom enterprise servers
Embedded systems
Conclusion
Understanding MCP server executables isn't just about configuration syntax - it's about making informed decisions about security, performance, and deployment. While npx and uvx offer convenience for development, the future of production MCP deployments clearly points toward containerization and managed platforms.
As the ecosystem matures, expect to see more emphasis on secure, verified execution environments. The wild west days of "just run npx" are numbered - and that's a good thing for everyone building serious AI applications.
Next in the series: We'll dive into MCP authentication patterns and how to secure your server connections. Stay tuned!
What execution method are you using for your MCP servers? Have you moved to containers yet, or still living dangerously with npx? Let's discuss in the comments!
Getting Started with MCPs (5 Part Series)
1
MCP Servers Explained: How to Connect AI to Everything in 2025
2
MCP Architecture Explained: Clients, Servers, and Tools That Power AI Integrations
3
MCP Gateways: Managing Multiple Servers Like a Pro
4
MCP Server Executables Explained: npx, uvx, Docker, and Beyond
5
The Security Vulnerabilities Hiding in Your MCP Servers
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
•
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Leo Marsh
Follow
AI infrastructure developer building Storm MCP — secure, verified MCP servers & gateways for Claude, Cursor and other MCP clients.
Joined
Aug 11, 2025
More from Leo Marsh
The MCP Registry Is Here - But Is It Already Too Late?
#ai
#discuss
#mcp
#opensource
The Security Vulnerabilities Hiding in Your MCP Servers
#ai
#devops
#productivity
#mcp
DIY MCP Servers vs Verified Solutions: The Trade-offs Nobody's Talking About 🎭
#ai
#mcp
#discuss
#productivity
💎 DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community — A space to discuss and keep up software development and manage your software career
Página Inicial
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
Sobre
Contato
Free Postgres Database
Software comparisons
Forem Shop
Código de Conduta
Política de Privacidade
Termos de Uso
Built on Forem — the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community © 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account