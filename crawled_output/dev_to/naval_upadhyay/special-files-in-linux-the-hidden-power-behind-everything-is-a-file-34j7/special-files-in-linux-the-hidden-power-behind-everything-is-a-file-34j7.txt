Special Files in Linux: The Hidden Power Behind “Everything is a File” - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE—the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project — features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto—from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Naval Kishor Upadhyay
Posted on Sep 14
Special Files in Linux: The Hidden Power Behind “Everything is a File”
#linux
#devops
#beginners
Special Files in Linux: The Hidden Power Behind “Everything is a File”
Linux follows the philosophy that “everything is a file.” This means that hardware devices, inter-process communication, and even shortcuts to files are all represented using a consistent file interface. The practical enablers of this philosophy are special files, which act as gateways to devices, processes, and links.
This article focuses on special files only. It uses point-based explanations for readability while keeping complete descriptive detail.
1) Block Files
What they are: Interfaces to devices that manage data in fixed-size chunks (blocks)—commonly 512 bytes or larger—so the system can read or write a whole block at once.
Access pattern: Support random access, which lets the kernel jump directly to any block on the device without scanning earlier data—like flipping straight to page 100 in a book.
Where they live: Exposed under /dev, for example /dev/sda (first SATA/SCSI disk) or /dev/nvme0n1 (NVMe SSD).
Why they matter: Filesystems (ext4, xfs, btrfs, etc.) rely on the random-access nature of block devices to place and retrieve metadata and file content efficiently.
Common commands:
lsblk — enumerate block devices in a tree view with sizes, types, and mount points.
fdisk -l — inspect partition tables and partitions on attached disks.
Mental model:
A block device is a book: pages (blocks) can be opened directly in any order.
2) Character Files
What they are: Interfaces to devices that send/receive data as a continuous stream of characters rather than addressable blocks.
Access pattern: Sequential by nature; data flows in order and cannot be randomly jumped like pages in a book—more like water from a tap.
Where they live: Also under /dev, with common examples like /dev/tty (terminal/keyboard) and /dev/null (a sink that discards all input).
Why they matter: Ideal for real-time I/O with human interfaces (keyboards, serial ports) and virtual devices that don’t store data but still need a uniform interface.
Demonstration:
cat /dev/tty — read characters typed into the terminal device.
echo "noise" > /dev/null — write and discard output with zero storage.
Mental model:
A character device is a tap: the stream arrives in sequence and you consume it as it flows.
3) Socket Files (Unix Domain Sockets)
What they are: IPC endpoints represented as filesystem entries (usually in /run or /var/run) that let processes on the same host exchange messages bidirectionally.
How they work: One process listens on a socket path; other processes connect to it and exchange request/response data—akin to a private telephone line that stays inside the machine.
Example: /var/run/docker.sock enables docker CLI commands to communicate with the Docker daemon without exposing a TCP port.
Why they matter: Provide low-latency, secure communication channels for daemons and clients (database servers, system services, container runtimes) without temporary files.
Inspection: ss -x lists active Unix domain sockets; combine with lsof to see which processes own them.
Mental model:
A socket is a phone line between programs, not a file of stored bytes.
4) Named Pipes (FIFOs)
What they are: Special files created with mkfifo that implement first-in, first-out byte streams between unrelated processes via the filesystem.
Behavior: One process writes; another reads in the same order. Data does not persist: once read, it’s gone. Writers block until a reader opens the FIFO (and vice versa) unless opened non-blocking.
Why they matter: Enable streaming handoffs and decoupled pipelines without intermediate on-disk files—useful for glueing tools that weren’t started in the same shell pipeline.
Minimal example:
mkfifo mypipe
echo "Hello World" > mypipe
# Writer blocks until a reader connects
cat < mypipe
# Reader receives "Hello World"
Enter fullscreen mode
Exit fullscreen mode
Mental model:
A FIFO is a tube between programs; what goes in first comes out first.
5) Links (Hard and Symbolic)
What they are: Alternative names or references that let you access the same file content (hard links) or target path (symbolic links) through different directory entries.
Hard links: Create another directory entry pointing to the same inode and data blocks. Deleting one name does not delete the underlying content while any hard link remains.
Symbolic (soft) links: Create a small file that stores the target path. If the target is moved or deleted, the symlink becomes dangling and fails to resolve.
Use cases: Hard links are for redundancy within the same filesystem; symlinks are for flexible redirection, cross-filesystem pointers, and versioned paths (like current -> v2.3.1).
Commands:
ln original.txt hard.txt — new hard link sharing inode with original.txt.
ln -s original.txt soft.txt — symlink that resolves to original.txt’s path.
Mental model:
A hard link is another door to the same room; a symlink is a signpost pointing to a room by address.
6) Identifying File Types Quickly
ls -l reveals the file type via the first character of the mode string:
- regular file, d directory, b block device, c character device, s socket, p FIFO, l symlink.
stat provides detailed metadata including inode, device numbers, and link counts, which is especially helpful for distinguishing hard links (same inode) from different files.
Symbol
File Type
Example
-
Regular file
notes.txt
d
Directory
/home/user/
b
Block device
/dev/sda
c
Character device
/dev/tty
s
Socket
/var/run/docker.sock
p
Named Pipe (FIFO)
/tmp/mypipe
l
Link (symlink)
shortcut → file.txt
7) Why Special Files Matter (Unified Power)
API unification: The same syscalls—open, read, write, ioctl, close—work across devices, IPC endpoints, and regular files, which simplifies user-space programming and tooling.
Transparency & portability: Scripts and applications don’t need device-specific code paths; they interact with everything as if it were a file, improving composability and portability.
Performance & ergonomics: Block devices enable filesystems and fast random I/O; character devices support live streams; sockets and FIFOs enable efficient zero-temp-file pipelines between services.
Operational clarity: With ls -l, stat, lsblk, ss -x, and lsof, you can discover, inspect, and debug device access and IPC links using familiar file-centric tooling.
Final Takeaway
Special files turn a complex operating system into a cohesive, scriptable environment. Whether you are saving data to a disk, capturing keystrokes, streaming data across processes, or wiring services together, Linux keeps it elegant by making it all file operations—consistently discoverable, inspectable, and automatable.
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
•
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Naval Kishor Upadhyay
Follow
Experienced software engineer
Location
Vienna, Austria
Joined
Aug 14, 2025
More from Naval Kishor Upadhyay
Archiving & Compression in Linux — From `.tar` to `.gz` and Beyond
#linux
#beginners
Linux Filesystem Explained — From `/` to `/home` (and Everything Between)
#linux
#beginners
System Calls and Interactions in Linux
#linux
#devops
#beginners
💎 DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community — A space to discuss and keep up software development and manage your software career
Home
DEV++
Welcome Thread
Reading List
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Free Postgres Database
Software comparisons
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem — the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community © 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account