AI coding anti-patterns: 6 things to avoid for better AI coding - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SREâ€”the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project â€” features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Cryptoâ€”from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
David Turnbull
for Lingo.dev
Posted on Sep 25
AI coding anti-patterns: 6 things to avoid for better AI coding
#ai
#productivity
#programming
Introduction
Since joining Lingo.dev, startup life has been pushing me to eek out as much as I can from AI coding assistants. The more I do this though, the more I've identified counter-productive patterns that I'm sure other people are suffering from.
This article covers some of the most significant anti-patterns that I want to proclaim from my soapbox.
1. Assuming understanding
If your AI assistant regularly goes off the rails, your prompts might not be as clear as you think. There's probably a lot of room for interpretation, leading to outcomes that are technically correct but not what you want.
The simplest option is to ask the AI to explain its understanding of your prompt back to you in its own words.
For more reliability, discuss the probelm and intent with the AI, prompting it to ask questions until the problem space is well understood. You'll likely realize your own understanding has some significant gaps.
2. Persisting with dead-end conversations
When an AI assistant goes down the wrong path, it can be difficult to get it back on the right path.
If you feel like you're not making progress in a certain conversation, don't fall into the sunk cost fallacy. Instead, start over and try again.
LLMs are slot machines, and simply pulling the lever again can be the most effective option. (This is one of those "If it is stupid but it works, it isn't stupid" ideas.)
3. Wasting tokens on codebase exploration
AI coding tools are useful for exploring a codebase, but they also stumble down irrelevant rabbit holes. This means all sorts of useless information can end up in the context window, degrading the performance of the model.
If you know what the relevant parts of the codebase are, or if you know it'll only take you a couple of minutes to figure it out, refer to those files directly.
Alternatively:
Use AI to explore the codebase.
Ask the AI to return the list of file paths relevant to a certain task.
Start a new conversation and reference those files directly.
That's the best of both worlds with only a couple of extra keystrokes.
4. Using too many MCP servers
Model Context Protocol (MCP) servers can be useful â€” I'm particularly fond of Context7 and Playwright MCP â€” but each server exposes tools with descriptions and those descriptions eat into the context window.
The more MCP servers that are enabled by default, the worse your starting point for every conversation. It's an immediate handicap.
Here's what I recommend:
Only enable MCP servers when they're relevant to the task you're working on.
Get comfortable with toggling MCP servers on and off in your coding assistant.
Consider if an MCP server is even necessary. For example, AI coding tools are excellent at using the GitHub CLI, so setting up an MCP to interact with GitHub may not be the best trade-off.
5. Bloated memory files
Most AI coding assistants have some concept of "memory" or "rules". These are instructions that are automatically injected into the context window based on what part of the code is being explored or modified.
These files can be a huge timesaver, but it's also easy for them to become bloated over time with an ever-expanding list:
Preferences that aren't relevant to every request
Rules that are better followed without the use of AI
Here's what I recommend:
Start by putting preferences in text files that you have to explicitly reference. If you find reference them regularly, "promote" them to memory files.
Don't waste the context window on rules that can be handled deterministically through linting and formatting tools.
Review and prune memory files on a regular basis. Ensure that every rule fights for its right to exist.
6. Having loyalty to any assistant or model
On Twitter, I regularly see die-hard fans of Claude Code or Codex or Cursor or whatever else. This kind of fandom only benefits the makers of the tools, not the people using the tools.
Instead:
Be willing to jump between tools and models
Regularly reevaluate (possibly outdated) assumptions about the "best" tools
Don't buy into the hype that tool makers are selling
I don't think it's necessary to constantly seek greener grass, but at least don't become static when the ground is shifting so quickly.
Top comments (2)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Collapse
Expand
Max Prilutskiy
Lingo.dev
Max Prilutskiy
Lingo.dev
Max Prilutskiy
Follow
Hacking on open source, with JavaScript and LLMs. Thoughts on software development, and unusual tech stuff.
Location
San Francisco, California
Work
Author of Lingo.dev
Joined
Aug 18, 2021
â€¢
Sep 25
Dropdown menu
Copy link
Hide
Assuming understanding
This is very important, we oftentimes assume models already understand "fundamentals" but actually that's a big mistake, as the training data is usually outdated when you work with the cutting edge tech.
Like comment:
Like comment:
2Â likes
Like
Comment button
Reply
Collapse
Expand
Thomas Hansen
Thomas Hansen
Thomas Hansen
Follow
CEO at AINIRO.IO - Obsessed with ChatGPT, AI and Machine Learning. Delivering AI solutions and development platforms based upon No-Code and AI.
Location
Cyprus
Work
CEO and Founder of AINIRO Ltd
Joined
Mar 13, 2022
â€¢
Sep 25
Dropdown menu
Copy link
Hide
To (seriously) reduce token count, you have to change programming language - Just sayin' ...
I'll probably get half of DEV disagreeing with me here, but you simply cannot build serious systems using AI with traditional languages, you'll need declarative languages.
You can read more here ...
Like comment:
Like comment:
1Â like
Like
Comment button
Reply
Code of Conduct
â€¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Lingo.dev
Follow
Create perfect translations using the best LLMs
More from Lingo.dev
27 Rust-based alternatives to classic CLI apps
#cli
#rust
#productivity
#programming
ðŸ’Ž DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community â€” A space to discuss and keep up software development and manage your software career
Home
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem â€” the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community Â© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account