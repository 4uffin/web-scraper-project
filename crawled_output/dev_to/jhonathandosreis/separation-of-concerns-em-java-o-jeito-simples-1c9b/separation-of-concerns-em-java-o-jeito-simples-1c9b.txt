Separation of Concerns em Java: O Jeito Simples - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE‚Äîthe hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project ‚Äî features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto‚Äîfrom Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Jhonathan dos reis
Posted on Sep 15
Separation of Concerns em Java: O Jeito Simples
#architecture
#java
#tutorial
√â dif√≠cil aceitar a verdade. Que sua aplica√ß√£o Java com mais de 2000 linhas est√° toda escrita em uma √∫nica classe... mas voc√™ j√° sabe disso, ou pelo menos espero que saiba. Eu sei que voc√™ j√° tentou torn√°-la mais compacta, mas as coisas simplesmente n√£o est√£o fazendo sentido.
√â aqui que entra um princ√≠pio que transcende tempo e espa√ßo, que nos ajuda em todos os aspectos da nossa vida: Separation of Concerns (Separa√ß√£o de Responsabilidades) ou SoC.
Eu sei que pode parecer intimidante, mas n√£o se preocupe - o Tio T est√° aqui e vou tornar tudo o mais simples poss√≠vel para o seu prazer.
Ent√£o hoje vamos passar por estes pontos:
O que √© Separation of Concerns?
Coes√£o e Acoplamento
Por que funciona?
Exemplos pr√°ticos em Java
Conclus√£o
Antes de come√ßarmos, fique confort√°vel, pegue sua bebida favorita e coloque seus √≥culos inteligentes. Vamos come√ßar!
O que √© Separation of Concerns?
Como todo bom post t√©cnico precisa de uma cita√ß√£o, aqui est√° algo que copiei da Wikipedia:
"Em ci√™ncia da computa√ß√£o, separation of concerns √© um princ√≠pio de design para separar um programa de computador em se√ß√µes distintas, de modo que cada se√ß√£o aborde uma preocupa√ß√£o separada."
Ok, agora que as formalidades acabaram, deixe-me explicar de forma simples.
Separation of Concerns √© um princ√≠pio universal que praticamente todas as pessoas aplicam. N√£o estou falando apenas de desenvolvimento de software - ele se aplica a muitos outros campos tamb√©m.
Um Exemplo do Mundo Real
Imagine sua cozinha. Voc√™ n√£o guarda talheres no mesmo lugar que produtos de limpeza, certo? Voc√™ tem gavetas separadas para:
Talheres
Panelas
Temperos
Produtos de limpeza
Por qu√™? Porque cada categoria tem uma responsabilidade diferente, e mistur√°-las tornaria sua vida um caos.
Como SoC se Aplica ao Java?
Em Java, aplicamos SoC em v√°rios n√≠veis:
1. N√≠vel de Arquitetura - Padr√£o MVC
// Model - Respons√°vel pelos dados
public class Usuario {
private Long id;
private String nome;
private String email;
// getters e setters
}
// View - Respons√°vel pela apresenta√ß√£o (JSP exemplo)
<%@ page contentType="text/html;charset=UTF-8" %>
<html>
<body>
<h1>Bem-vindo, ${usuario.nome}!</h1>
</body>
</html>
// Controller - Respons√°vel pela l√≥gica de controle
@RestController
@RequestMapping("/usuarios")
public class UsuarioController {
@Autowired
private UsuarioService service;
@GetMapping("/{id}")
public Usuario buscarUsuario(@PathVariable Long id) {
return service.buscarPorId(id);
}
}
Enter fullscreen mode
Exit fullscreen mode
2. N√≠vel de Camadas - Arquitetura em Camadas
// Camada de Apresenta√ß√£o
@RestController
public class PedidoController {
@Autowired
private PedidoService pedidoService;
@PostMapping("/pedidos")
public ResponseEntity<Pedido> criarPedido(@RequestBody PedidoDTO dto) {
Pedido pedido = pedidoService.processar(dto);
return ResponseEntity.ok(pedido);
}
}
// Camada de Neg√≥cio
@Service
public class PedidoService {
@Autowired
private PedidoRepository repository;
@Autowired
private EmailService emailService;
public Pedido processar(PedidoDTO dto) {
// L√≥gica de neg√≥cio
Pedido pedido = new Pedido(dto);
pedido.calcularTotal();
pedido = repository.save(pedido);
emailService.enviarConfirmacao(pedido);
return pedido;
}
}
// Camada de Dados
@Repository
public interface PedidoRepository extends JpaRepository<Pedido, Long> {
List<Pedido> findByClienteId(Long clienteId);
}
Enter fullscreen mode
Exit fullscreen mode
Coes√£o e Acoplamento
Dois conceitos fundamentais em SoC:
Alta Coes√£o (BOM ‚úÖ)
Elementos relacionados ficam juntos.
// ALTA COES√ÉO - Todos os m√©todos s√£o sobre gerenciamento de conta
public class ContaBancaria {
private BigDecimal saldo;
private String numero;
public void depositar(BigDecimal valor) {
this.saldo = this.saldo.add(valor);
}
public void sacar(BigDecimal valor) {
if (saldo.compareTo(valor) >= 0) {
this.saldo = this.saldo.subtract(valor);
}
}
public BigDecimal consultarSaldo() {
return this.saldo;
}
}
Enter fullscreen mode
Exit fullscreen mode
Baixo Acoplamento (BOM ‚úÖ)
M√≥dulos dependem minimamente uns dos outros.
// BAIXO ACOPLAMENTO - Usando interfaces
public interface NotificadorService {
void enviar(String mensagem, String destinatario);
}
@Service
public class EmailNotificador implements NotificadorService {
public void enviar(String mensagem, String destinatario) {
// Implementa√ß√£o de email
}
}
@Service
public class SMSNotificador implements NotificadorService {
public void enviar(String mensagem, String destinatario) {
// Implementa√ß√£o de SMS
}
}
// A classe n√£o est√° acoplada a uma implementa√ß√£o espec√≠fica
@Service
public class PedidoService {
@Autowired
private NotificadorService notificador; // Interface, n√£o implementa√ß√£o!
public void finalizarPedido(Pedido pedido) {
// processar pedido...
notificador.enviar("Pedido confirmado!", pedido.getCliente().getEmail());
}
}
Enter fullscreen mode
Exit fullscreen mode
Por Que SoC Funciona?
1. Manutenibilidade üîß
Quando voc√™ precisa fazer uma mudan√ßa, voc√™ sabe exatamente onde ir:
// Antes de SoC - Tudo misturado üò±
public class SistemaPedido {
public void processarPedido(String item, int quantidade, String email) {
// Valida√ß√£o
if (item == null || quantidade <= 0) {
throw new IllegalArgumentException("Dados inv√°lidos");
}
// C√°lculo de pre√ßo
double preco = quantidade * 10.0;
if (quantidade > 100) {
preco = preco * 0.9; // desconto
}
// Salvar no banco
Connection conn = DriverManager.getConnection("jdbc:...");
PreparedStatement stmt = conn.prepareStatement("INSERT INTO pedidos...");
// ...
// Enviar email
Properties props = new Properties();
Session session = Session.getInstance(props);
MimeMessage message = new MimeMessage(session);
// ...
}
}
// Depois de SoC - Tudo organizado üòä
@Service
public class PedidoService {
@Autowired private ValidadorPedido validador;
@Autowired private CalculadoraPreco calculadora;
@Autowired private PedidoRepository repository;
@Autowired private EmailService emailService;
public void processarPedido(PedidoDTO dto) {
validador.validar(dto);
BigDecimal preco = calculadora.calcular(dto);
Pedido pedido = new Pedido(dto, preco);
repository.save(pedido);
emailService.enviarConfirmacao(pedido);
}
}
Enter fullscreen mode
Exit fullscreen mode
2. Testabilidade üß™
Com SoC, testar fica muito mais f√°cil:
@Test
public void testCalculadoraPreco() {
CalculadoraPreco calc = new CalculadoraPreco();
PedidoDTO dto = new PedidoDTO("Item", 150);
BigDecimal preco = calc.calcular(dto);
// Testando apenas a l√≥gica de c√°lculo, isoladamente!
assertEquals(new BigDecimal("1350.00"), preco); // 150 * 10 * 0.9
}
@Test
public void testPedidoService() {
// Usando mocks para isolar o teste
ValidadorPedido validador = mock(ValidadorPedido.class);
CalculadoraPreco calculadora = mock(CalculadoraPreco.class);
PedidoRepository repository = mock(PedidoRepository.class);
EmailService emailService = mock(EmailService.class);
when(calculadora.calcular(any())).thenReturn(new BigDecimal("100"));
PedidoService service = new PedidoService(validador, calculadora, repository, emailService);
service.processarPedido(new PedidoDTO());
verify(repository).save(any());
verify(emailService).enviarConfirmacao(any());
}
Enter fullscreen mode
Exit fullscreen mode
3. Reutiliza√ß√£o ‚ôªÔ∏è
Componentes bem separados podem ser reutilizados:
// Este servi√ßo de email pode ser usado em qualquer lugar!
@Service
public class EmailService {
public void enviar(Email email) {
// implementa√ß√£o
}
}
// Usado no PedidoService
@Service
public class PedidoService {
@Autowired EmailService emailService;
// ...
}
// Usado no UsuarioService tamb√©m!
@Service
public class UsuarioService {
@Autowired EmailService emailService;
// ...
}
Enter fullscreen mode
Exit fullscreen mode
Exemplos Pr√°ticos do Mundo Java
Exemplo 1: Sistema de E-commerce
// ‚ùå RUIM - Violando SoC
public class Produto {
private String nome;
private BigDecimal preco;
// M√©todos de neg√≥cio - OK
public BigDecimal calcularPrecoComDesconto(BigDecimal percentual) {
return preco.multiply(BigDecimal.ONE.subtract(percentual));
}
// M√©todo de persist√™ncia - N√ÉO DEVERIA ESTAR AQUI!
public void salvarNoBanco() {
Connection conn = DriverManager.getConnection("...");
// c√≥digo SQL...
}
// M√©todo de apresenta√ß√£o - N√ÉO DEVERIA ESTAR AQUI!
public String toHTML() {
return "<div>" + nome + " - R$ " + preco + "</div>";
}
}
// ‚úÖ BOM - Respeitando SoC
public class Produto {
private String nome;
private BigDecimal preco;
// Apenas l√≥gica de neg√≥cio
public BigDecimal calcularPrecoComDesconto(BigDecimal percentual) {
return preco.multiply(BigDecimal.ONE.subtract(percentual));
}
}
@Repository
public class ProdutoRepository {
public void salvar(Produto produto) {
// c√≥digo de persist√™ncia
}
}
@Component
public class ProdutoView {
public String renderizar(Produto produto) {
return "<div>" + produto.getNome() + " - R$ " + produto.getPreco() + "</div>";
}
}
Enter fullscreen mode
Exit fullscreen mode
Exemplo 2: Processamento de Pagamento
// Separando responsabilidades em um sistema de pagamento
// 1. Valida√ß√£o
@Component
public class ValidadorPagamento {
public void validar(DadosPagamento dados) {
if (dados.getValor().compareTo(BigDecimal.ZERO) <= 0) {
throw new ValorInvalidoException();
}
if (!isCartaoValido(dados.getNumeroCartao())) {
throw new CartaoInvalidoException();
}
}
private boolean isCartaoValido(String numero) {
// Algoritmo de Luhn
return true; // simplificado
}
}
// 2. Processamento
@Component
public class ProcessadorPagamento {
@Autowired
private GatewayPagamento gateway;
public RespostaPagamento processar(DadosPagamento dados) {
return gateway.cobrar(dados);
}
}
// 3. Notifica√ß√£o
@Component
public class NotificadorPagamento {
@Autowired
private EmailService emailService;
@Autowired
private SMSService smsService;
public void notificarSucesso(Pagamento pagamento) {
emailService.enviar(criarEmailSucesso(pagamento));
if (pagamento.getCliente().temCelular()) {
smsService.enviar(criarSMSSucesso(pagamento));
}
}
}
// 4. Orquestra√ß√£o
@Service
public class PagamentoService {
@Autowired private ValidadorPagamento validador;
@Autowired private ProcessadorPagamento processador;
@Autowired private NotificadorPagamento notificador;
@Autowired private PagamentoRepository repository;
@Transactional
public Pagamento realizarPagamento(DadosPagamento dados) {
// Cada componente faz sua parte
validador.validar(dados);
RespostaPagamento resposta = processador.processar(dados);
Pagamento pagamento = new Pagamento(dados, resposta);
repository.save(pagamento);
notificador.notificarSucesso(pagamento);
return pagamento;
}
}
Enter fullscreen mode
Exit fullscreen mode
SoC em Diferentes N√≠veis
N√≠vel de M√©todo
// ‚ùå RUIM - M√©todo fazendo muitas coisas
public void processarRelatorio(List<Venda> vendas) {
// Filtrar vendas
List<Venda> vendasValidas = new ArrayList<>();
for (Venda v : vendas) {
if (v.getValor() > 0 && v.getData() != null) {
vendasValidas.add(v);
}
}
// Calcular total
BigDecimal total = BigDecimal.ZERO;
for (Venda v : vendasValidas) {
total = total.add(v.getValor());
}
// Formatar relat√≥rio
StringBuilder sb = new StringBuilder();
sb.append("Relat√≥rio de Vendas\n");
sb.append("Total: ").append(total).append("\n");
// Salvar arquivo
Files.write(Paths.get("relatorio.txt"), sb.toString().getBytes());
// Enviar email
emailService.enviar("relatorio@empresa.com", sb.toString());
}
// ‚úÖ BOM - Cada m√©todo com uma responsabilidade
public void processarRelatorio(List<Venda> vendas) {
List<Venda> vendasValidas = filtrarVendasValidas(vendas);
BigDecimal total = calcularTotal(vendasValidas);
String relatorio = formatarRelatorio(vendasValidas, total);
salvarRelatorio(relatorio);
enviarRelatorioPorEmail(relatorio);
}
private List<Venda> filtrarVendasValidas(List<Venda> vendas) {
return vendas.stream()
.filter(v -> v.getValor().compareTo(BigDecimal.ZERO) > 0)
.filter(v -> v.getData() != null)
.collect(Collectors.toList());
}
private BigDecimal calcularTotal(List<Venda> vendas) {
return vendas.stream()
.map(Venda::getValor)
.reduce(BigDecimal.ZERO, BigDecimal::add);
}
private String formatarRelatorio(List<Venda> vendas, BigDecimal total) {
return String.format("Relat√≥rio de Vendas\nTotal: %s\nQuantidade: %d",
total, vendas.size());
}
Enter fullscreen mode
Exit fullscreen mode
N√≠vel de Pacotes
com.empresa.app/
‚îú‚îÄ‚îÄ controller/
# Respons√°vel por receber requisi√ß√µes
‚îÇ
‚îú‚îÄ‚îÄ UsuarioController.java
‚îÇ
‚îî‚îÄ‚îÄ ProdutoController.java
‚îú‚îÄ‚îÄ service/
# L√≥gica de neg√≥cio
‚îÇ
‚îú‚îÄ‚îÄ UsuarioService.java
‚îÇ
‚îî‚îÄ‚îÄ ProdutoService.java
‚îú‚îÄ‚îÄ repository/
# Acesso a dados
‚îÇ
‚îú‚îÄ‚îÄ UsuarioRepository.java
‚îÇ
‚îî‚îÄ‚îÄ ProdutoRepository.java
‚îú‚îÄ‚îÄ model/
# Entidades do dom√≠nio
‚îÇ
‚îú‚îÄ‚îÄ Usuario.java
‚îÇ
‚îî‚îÄ‚îÄ Produto.java
‚îú‚îÄ‚îÄ dto/
# Objetos de transfer√™ncia
‚îÇ
‚îú‚îÄ‚îÄ UsuarioDTO.java
‚îÇ
‚îî‚îÄ‚îÄ ProdutoDTO.java
‚îî‚îÄ‚îÄ util/
# Utilit√°rios
‚îú‚îÄ‚îÄ EmailUtil.java
‚îî‚îÄ‚îÄ ValidadorUtil.java
Enter fullscreen mode
Exit fullscreen mode
Aplicando SoC com Spring Boot
Spring Boot naturalmente encoraja SoC atrav√©s de suas anota√ß√µes:
@Configuration
// Configura√ß√£o separada
public class AppConfig {
@Bean
public RestTemplate restTemplate() {
return new RestTemplate();
}
}
@Component
// Componente reutiliz√°vel
public class CacheManager {
private Map<String, Object> cache = new HashMap<>();
// ...
}
@Service
// L√≥gica de neg√≥cio
public class ClienteService {
// ...
}
@Repository
// Acesso a dados
public interface ClienteRepository extends JpaRepository<Cliente, Long> {
// ...
}
@RestController // Controlador REST
public class ClienteController {
// ...
}
@Aspect
// Aspectos transversais (logging, seguran√ßa)
@Component
public class LoggingAspect {
@Around("@annotation(Loggable)")
public Object logExecutionTime(ProceedingJoinPoint joinPoint) throws Throwable {
long start = System.currentTimeMillis();
Object proceed = joinPoint.proceed();
long executionTime = System.currentTimeMillis() - start;
logger.info("{} executed in {} ms", joinPoint.getSignature(), executionTime);
return proceed;
}
}
Enter fullscreen mode
Exit fullscreen mode
Padr√µes de Design que Implementam SoC
1. Strategy Pattern
// Separando algoritmos de c√°lculo de frete
public interface CalculadoraFrete {
BigDecimal calcular(Pedido pedido);
}
@Component
public class FretePAC implements CalculadoraFrete {
public BigDecimal calcular(Pedido pedido) {
return pedido.getPeso().multiply(new BigDecimal("5.00"));
}
}
@Component
public class FreteSedex implements CalculadoraFrete {
public BigDecimal calcular(Pedido pedido) {
return pedido.getPeso().multiply(new BigDecimal("15.00"));
}
}
@Service
public class FreteService {
private Map<TipoFrete, CalculadoraFrete> calculadoras;
public BigDecimal calcularFrete(Pedido pedido, TipoFrete tipo) {
return calculadoras.get(tipo).calcular(pedido);
}
}
Enter fullscreen mode
Exit fullscreen mode
2. Observer Pattern
// Separando notifica√ß√µes de eventos
public interface EventListener {
void onPedidoCriado(Pedido pedido);
}
@Component
public class EmailListener implements EventListener {
public void onPedidoCriado(Pedido pedido) {
// Enviar email
}
}
@Component
public class EstoqueListener implements EventListener {
public void onPedidoCriado(Pedido pedido) {
// Atualizar estoque
}
}
@Component
public class NotaFiscalListener implements EventListener {
public void onPedidoCriado(Pedido pedido) {
// Gerar nota fiscal
}
}
@Service
public class PedidoService {
@Autowired
private List<EventListener> listeners;
public void criarPedido(PedidoDTO dto) {
Pedido pedido = new Pedido(dto);
// salvar pedido...
// Notificar todos os interessados
listeners.forEach(l -> l.onPedidoCriado(pedido));
}
}
Enter fullscreen mode
Exit fullscreen mode
Microservi√ßos: SoC em Escala
// Servi√ßo de Usu√°rios
@SpringBootApplication
public class UserServiceApplication {
// Respons√°vel apenas por usu√°rios
}
// Servi√ßo de Pedidos
@SpringBootApplication
public class OrderServiceApplication {
// Respons√°vel apenas por pedidos
}
// Servi√ßo de Notifica√ß√µes
@SpringBootApplication
public class NotificationServiceApplication {
// Respons√°vel apenas por notifica√ß√µes
}
// Comunica√ß√£o via REST ou mensageria
@FeignClient(name = "user-service")
public interface UserServiceClient {
@GetMapping("/users/{id}")
User getUser(@PathVariable Long id);
}
Enter fullscreen mode
Exit fullscreen mode
Armadilhas Comuns e Como Evit√°-las
1. God Class (Classe Deus)
// ‚ùå RUIM - Classe fazendo tudo
public class SistemaCompleto {
// 50 atributos
// 100 m√©todos
// Valida√ß√£o, c√°lculo, persist√™ncia, apresenta√ß√£o...
}
// ‚úÖ BOM - Responsabilidades distribu√≠das
public class Usuario { /* modelo */ }
public class UsuarioService { /* l√≥gica */ }
public class UsuarioRepository { /* persist√™ncia */ }
public class UsuarioController { /* API */ }
Enter fullscreen mode
Exit fullscreen mode
2. Anemic Domain Model
// ‚ö†Ô∏è CUIDADO - Modelo an√™mico (sem comportamento)
public class Conta {
private BigDecimal saldo;
// apenas getters e setters
}
public class ContaService {
public void sacar(Conta conta, BigDecimal valor) {
// toda l√≥gica aqui
}
}
// ‚úÖ MELHOR - Modelo rico
public class Conta {
private BigDecimal saldo;
public void sacar(BigDecimal valor) {
if (valor.compareTo(saldo) > 0) {
throw new SaldoInsuficienteException();
}
this.saldo = saldo.subtract(valor);
}
public void depositar(BigDecimal valor) {
this.saldo = saldo.add(valor);
}
}
Enter fullscreen mode
Exit fullscreen mode
Conclus√£o
Separation of Concerns n√£o √© apenas um princ√≠pio te√≥rico - √© uma ferramenta pr√°tica que torna nosso c√≥digo:
Mais f√°cil de entender üß†
Mais f√°cil de manter üîß
Mais f√°cil de testar üß™
Mais f√°cil de escalar üìà
Mais f√°cil de reutilizar ‚ôªÔ∏è
Lembre-se:
Cada classe deve ter uma raz√£o para mudar
Cada m√©todo deve fazer uma coisa bem feita
Cada camada deve ter uma responsabilidade clara
Prefira composi√ß√£o sobre heran√ßa
Use interfaces para reduzir acoplamento
Pr√≥ximos Passos
Estude os princ√≠pios SOLID (SoC √© parte do S - Single Responsibility)
Explore padr√µes de design como MVC, MVP, MVVM
Pratique Domain-Driven Design (DDD)
Aprenda sobre Arquitetura Hexagonal
Experimente com Microservi√ßos
Call to Action
Agora olhe para seu c√≥digo Java. Encontre aquela classe com 1000 linhas. Voc√™ sabe qual √©.
Comece pequeno:
Extraia um m√©todo
Depois extraia uma classe
Depois separe em camadas
Continue refatorando
Roma n√£o foi constru√≠da em um dia, e seu c√≥digo limpo tamb√©m n√£o ser√°. Mas cada passo na dire√ß√£o certa conta!
üí¨ Tem alguma d√∫vida ou quer compartilhar como aplica SoC em seus projetos Java? Deixe um coment√°rio abaixo!
‚≠ê Se este artigo foi √∫til, n√£o esque√ßa de dar uma estrela e compartilhar com seus colegas desenvolvedores Jav
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
‚Ä¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Jhonathan dos reis
Follow
Location
Goi√¢nia
Education
Senai Fatesg
Work
Java FullStack Developer
Joined
Apr 14, 2023
Trending on DEV Community
Hot
Orchestrating Real-World Agent Workflows with MCP
#ai
#beginners
#tutorial
#discuss
AI Infrastructure Cloud Setup: Practical Choices That Scale
#ai
#architecture
#infrastructure
#cloud
Orchestrating Real-World Agent Workflows with MCP
#ai
#beginners
#tutorial
#discuss
üíé DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community ‚Äî A space to discuss and keep up software development and manage your software career
Home
DEV++
Welcome Thread
Reading List
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Free Postgres Database
Software comparisons
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community ¬© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account