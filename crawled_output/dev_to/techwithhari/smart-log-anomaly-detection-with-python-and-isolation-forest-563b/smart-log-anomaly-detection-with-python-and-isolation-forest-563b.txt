Smart Log Anomaly Detection with Python and Isolation Forest - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE‚Äîthe hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project ‚Äî features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto‚Äîfrom Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Haripriya Veluchamy
Posted on Sep 12
Smart Log Anomaly Detection with Python and Isolation Forest
#python
#machinelearning
#devops
#beginners
Ever stared at thousands of log lines wondering which ones actually matter? Or worse, have you been alerted for ERROR logs that weren't important while missing critical anomalies? I've been there too.
In this post, I'll share how I built a machine learning-powered log anomaly detection system that does more than just filter for "ERROR" - it actually understands the patterns in your logs to identify what's truly unusual.
The Problem with Traditional Log Analysis
Traditional log analysis often relies on simple filtering for ERROR logs. But this approach has serious limitations:
Not all errors are anomalies - some happen routinely and aren't concerning
Not all anomalies are errors - some WARNING or INFO logs can indicate problems
Context matters - an ERROR after 10 similar ones is different from a unique one
What we need is a system that learns the normal patterns in our logs and highlights deviations - and that's exactly what I built.
Understanding Unsupervised Learning for Log Analysis
Before diving into the solution, let's understand the core concept: unsupervised learning.
Unlike supervised learning (where you train with labeled examples), unsupervised learning finds patterns without being explicitly told what to look for. This is perfect for log analysis because:
We don't have pre-labeled examples of "anomalous" vs "normal" logs
The definition of "normal" changes from system to system
New types of anomalies emerge that we've never seen before
Isolation Forest is an unsupervised algorithm that excels at anomaly detection. It works by building decision trees that try to isolate data points - anomalies require fewer "splits" to isolate because they stand out from normal patterns. This makes it ideal for the "needle in a haystack" nature of log anomalies.
My Log Anomaly Detection Solution
I created a Flask web application that takes uploaded log files, processes them using machine learning, and highlights the anomalies. The complete code is available on my GitHub repository.
For a detailed walkthrough of the code, check out my YouTube tutorial video where I explain each component step by step.
Key Innovations in the System
What makes this system special isn't just the use of Isolation Forest, but how it extracts meaningful features from logs:
1. Smart Feature Extraction
The most crucial part of anomaly detection is feature engineering. My system extracts these features from logs:
Basic features: log level (ERROR/WARNING/INFO), message length
Content-based features: presence of words like "failure", "exception", "unauthorized"
Connection-related issues: network, latency, timeouts
Frequency analysis: how common is this particular message?
Numerical extraction: does the message contain numbers (like error codes)?
These features help the algorithm understand what makes a log entry "unusual" beyond just its log level.
2. Configurable Anomaly Threshold
The system allows you to adjust the "contamination" parameter, which represents how many anomalies you expect. For log analysis, I found 10% to be a good starting point, but you can adjust based on your system's characteristics.
3. Intuitive Visualization
The web interface makes it easy to:
Upload log files with a simple drag-and-drop
View detected anomalies highlighted in red
See patterns in a visual chart
Download results as CSV for further analysis
Real Results from Real Logs
When I ran this on production logs, I found fascinating patterns:
952 INFO Database connection failed -1
957 WARNING Database connection failed -1
965 ERROR API request received: GET /products 1
973 ERROR Suspicious IP access blocked -1
976 ERROR Rate limit exceeded for user 1
992 WARNING Database connection established -1
Enter fullscreen mode
Exit fullscreen mode
The -1 values indicate anomalies, while 1 values are normal logs. Notice how some ERROR logs are marked as normal (1) because they're common in the system, while some INFO logs are marked as anomalies (-1) because they contain unusual patterns.
This is the key insight: log level alone doesn't determine what's anomalous. Context, frequency, and content matter more.
How You Can Use This Tool
You can apply this approach to various logging systems:
CI/CD Logs: Find failures in GitHub Actions, Jenkins, or CircleCI
Application Logs: Detect unusual behavior in your web applications
Infrastructure Logs: Monitor servers, databases, and networks
Security Logs: Identify potential security breaches or unusual access patterns
Project Structure
The project follows a clean, modular structure:
log_analyser/
‚îú‚îÄ‚îÄ core/
‚îÇ
‚îú‚îÄ‚îÄ anamoly_detector.py
# ML algorithm implementation
‚îÇ
‚îú‚îÄ‚îÄ parser.py
# Log file parsing
‚îÇ
‚îî‚îÄ‚îÄ preprocessor.py
# Feature extraction
‚îú‚îÄ‚îÄ logs/
# Uploaded logs storage
‚îú‚îÄ‚îÄ main.py
# Flask application
‚îú‚îÄ‚îÄ static/
# Static assets (charts)
‚îî‚îÄ‚îÄ templates/
# HTML templates
Enter fullscreen mode
Exit fullscreen mode
Lessons Learned
Building this system taught me several important lessons:
Unsupervised learning is powerful for logs: You don't need labeled examples to find anomalies
Feature engineering matters most: The quality of features determines the quality of detection
Domain knowledge helps: Understanding log patterns improves feature selection
Visualization makes understanding easier: Seeing anomalies visually reveals patterns
Try It Yourself
Ready to try it with your own logs? Check out the GitHub repository for installation instructions. The README contains everything you need to get started.
For a full video walkthrough, check out my YouTube tutorial where I explain the entire system from setup to analysis.
Conclusion
Log anomaly detection doesn't have to be limited to simple ERROR filtering. With unsupervised machine learning techniques like Isolation Forest, we can build systems that truly understand what's normal and what's unusual in our specific environment.
I'd love to hear what patterns you discover in your logs using this approach!
Have you built similar tools for log analysis? What techniques have you found most effective? Let me know in the comments!
Top comments (1)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Collapse
Expand
Suvrajeet Banerjee
Suvrajeet Banerjee
Suvrajeet Banerjee
Follow
DevOps Engineer with 2+ years of hands-on experience transforming legacy operations into agile, cloud-native ecosystems. Headed procurement for $11 Mn.+mining projects & delivering AWS Solutions ! üòé
Location
Bengaluru, Karnataka, India
Education
Haldia Institute of Technology
Work
Aspiring DevOps Engineer
Joined
Jun 30, 2025
‚Ä¢
Sep 13
Dropdown menu
Copy link
Hide
Machine learning is revolutionizing how we find needles in log haystacks! üîç
Like comment:
Like comment:
2¬†likes
Like
Comment button
Reply
Code of Conduct
‚Ä¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Haripriya Veluchamy
Follow
software engineer with a deep passion for DevOps and cloud technologies.
Location
Tamilnadu, India
Joined
Aug 11, 2024
More from Haripriya Veluchamy
The Day I Learned Why DynamoDB Costs More
#aws
#cloud
#cloudcomputing
#devops
Deploying a Django Blog on AWS: Terraform Infrastructure as Code Best Practices
#terraform
#aws
#devops
#beginners
Enhancing AWS CodePipeline for Real-Time Batch Processing: Lessons from My Experience
#aws
#cicd
#learning
#devops
üíé DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community ‚Äî A space to discuss and keep up software development and manage your software career
Home
Welcome Thread
Reading List
Tags
About
Contact
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community ¬© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account