How to host a website locally and let other users use it — super-elaborate - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE—the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project — features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto—from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Aadarsh Nagrath
Posted on Sep 17
How to host a website locally and let other users use it — super-elaborate
#devops
#networking
#tutorial
#webdev
Below is a complete, practical guide that covers everything from “quick demo in 2 minutes” to “production-grade, secure, and resilient”.
Read the whole thing for interview depth; use the quick sections when you need speed.
TL;DR (one-minute pitch)
Run your app and bind to 0.0.0.0 so it’s reachable on the LAN.
Open the port in your firewall and (optionally) reserve a static local IP.
For LAN-only access: share http://<local_ip>:<port>.
For Internet access: either set up router port-forwarding + dynamic DNS / domain + TLS, or use a tunnel service (ngrok / cloudflared) for ease.
For production: put Nginx/Traefik as a reverse proxy, get Let’s Encrypt TLS, run the app as a systemd/docker service, enable firewall, monitoring, and fail2ban.
Full walkthrough
Assumptions
OS: Linux example (Ubuntu). I’ll also give Windows/macOS commands where relevant.
App runs on port 3000 (adjust if different).
You control your home/office router (or you’ll use a tunnel).
1) Local server — make the app reachable on your machine and LAN
Static files (quick)
# Python 3 (static files)
python3 -m http.server 3000
# serves current dir
Enter fullscreen mode
Exit fullscreen mode
Dynamic apps — examples
Node / Express
// server.js
const express = require('express');
const app = express();
app.use(express.static('public'));
const PORT = process.env.PORT || 3000;
app.listen(PORT, '0.0.0.0', () => console.log(`Listening on ${PORT}`));
Enter fullscreen mode
Exit fullscreen mode
Start: node server.js
Flask
# dev server (not for production)
FLASK_APP=app.py flask run --host=0.0.0.0 --port=3000
Enter fullscreen mode
Exit fullscreen mode
Django
python manage.py runserver 0.0.0.0:8000
Enter fullscreen mode
Exit fullscreen mode
Why 0.0.0.0?
localhost/127.0.0.1 only listens on loopback. 0.0.0.0 listens on all interfaces so other LAN machines can reach you.
2) Find your local IP and test from another machine on the same network
Find IP
Linux/macOS: ip addr show or ifconfig
e.g. you'll see 192.168.1.5
Windows: ipconfig
Test from another device on same Wi-Fi
Open http://192.168.1.5:3000 in their browser.
If it works — great. If not, continue debugging below.
3) Open the firewall and check listening sockets
Linux (ufw)
sudo ufw allow 3000/tcp
sudo ufw status
Enter fullscreen mode
Exit fullscreen mode
Iptables (example)
sudo iptables -I INPUT -p tcp --dport 3000 -j ACCEPT
Enter fullscreen mode
Exit fullscreen mode
Windows (PowerShell)
New-NetFirewallRule -DisplayName "Allow3000" -Direction Inbound -LocalPort 3000 -Protocol TCP -Action Allow
Enter fullscreen mode
Exit fullscreen mode
Verify server is listening
ss -tulpn | grep :3000
# or
sudo lsof -i :3000
Enter fullscreen mode
Exit fullscreen mode
4) Make your local IP stable (DHCP reservation or static IP)
Easiest/robust: configure DHCP reservation on your router (bind your machine MAC → fixed IP).
Alternative: set a static IP on the OS; avoid conflicts by choosing outside DHCP range.
Why? Router port forwards and DNS point to a local IP; if it changes, forwarding breaks.
5) Letting people on the Internet access your site
You have four common options. Pick by tradeoffs:
Option A — Router port forwarding + domain or dynamic DNS (more “own infra”)
Steps
In router admin, forward TCP port 80 (HTTP) and 443 (HTTPS) to 192.168.1.5 (your machine).
Check your public IP: curl ifconfig.me (from your machine).
If you have a domain: create an A record pointing to the public IP. If IP is dynamic, use a DDNS provider (DuckDNS, No-IP, DynDNS).
Obtain TLS with Let’s Encrypt (certbot) — see section on SSL.
Test from outside (mobile data or ask a friend).
Pros: full control, no third-party tunnel.
Cons: ISP might block 80/443, NAT complexity, exposes home network — needs hardening.
Tip: If your ISP blocks 80, forward a high port (e.g., 8080) externally and use a VPS reverse proxy or a tunnel for TLS.
Option B — Tunnel services (fast, safe for demos)
ngrok: ngrok http 3000 → gives https://<random>.ngrok.io
Sign up for token, can get stable subdomain on paid plan.
localtunnel: npx localtunnel --port 3000 --subdomain mydemo
Cloudflare Tunnel (cloudflared): persistent, integrates with your Cloudflare DNS and supports production use.
Pros: no router changes, works behind CGNAT, quick, TLS handled.
Cons: external dependency; free plans may be limited.
Example ngrok
# install ngrok, then
ngrok authtoken <your-token>
ngrok http 3000
# copy the https URL and share
Enter fullscreen mode
Exit fullscreen mode
Option C — VPS reverse proxy + SSH reverse tunnel (robust, low-cost)
Spin a cheap VPS (DigitalOcean, AWS Lightsail) with a public IP and domain.
On the VPS run Nginx and point your domain to the VPS IP.
From your local machine open an SSH reverse tunnel:
ssh -R 8080:localhost:3000 user@vps.example.com
Enter fullscreen mode
Exit fullscreen mode
Then in the VPS Nginx config, reverse proxy / to http://127.0.0.1:8080. Use autossh to keep tunnel persistent.
Pros: You control the domain & TLS on VPS; only outbound SSH from home (safer).
Cons: More setup, cost of VPS.
Option D — Host on a cloud provider (recommended for production)
If the goal is stable public hosting, deploy to a cloud server or platform (VPS, Heroku, Vercel, Netlify, AWS/GCP/Azure) rather than exposing a home machine.
6) Domain names and TLS (Let’s Encrypt example)
Install certbot and nginx plugin (Ubuntu)
sudo apt update
sudo apt install nginx certbot python3-certbot-nginx
Enter fullscreen mode
Exit fullscreen mode
Nginx server block example
server {
listen 80;
server_name example.com www.example.com;
location / {
proxy_pass http://127.0.0.1:3000;
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
}
}
Enter fullscreen mode
Exit fullscreen mode
Obtain certificate
sudo certbot --nginx -d example.com -d www.example.com
# Certbot will configure nginx and set up automatic renew
Enter fullscreen mode
Exit fullscreen mode
If behind NAT / using tunnel: terminate TLS at the tunnel (ngrok/cloudflare) or at VPS reverse proxy.
Cloudflare note: If using Cloudflare proxy, set SSL/TLS to “Full (strict)” with origin certs for security.
7) Run your app as a service (reliability)
systemd service for Node app
# /etc/systemd/system/myapp.service
[Unit]
Description=My Node App
After=network.target
[Service]
User=ubuntu
WorkingDirectory=/home/ubuntu/myapp
ExecStart=/usr/bin/node server.js
Restart=always
Environment=NODE_ENV=production PORT=3000
[Install]
WantedBy=multi-user.target
Enter fullscreen mode
Exit fullscreen mode
sudo systemctl daemon-reload
sudo systemctl enable --now myapp
sudo systemctl status myapp
Enter fullscreen mode
Exit fullscreen mode
Alternative: Use pm2 for Node, or Docker + docker-compose. For containers, use restart policies.
8) Reverse proxy and load balancing (Nginx / Traefik)
Use Nginx to:
Terminate TLS.
Serve static assets directly.
Proxy traffic to the app on localhost.
Add rate limiting, IP blocklists, gzip, caching.
Simple Nginx proxy (see above).
If you have multiple app instances, create an upstream block and load balance.
9) Docker approach (portable reproducible stack)
Dockerfile (example Node)
FROM node:20-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --production
COPY . .
EXPOSE 3000
CMD ["node", "server.js"]
Enter fullscreen mode
Exit fullscreen mode
docker-compose.yml (Nginx + app)
version: '3.8'
services:
app:
build: .
restart: always
nginx:
image: nginx:stable
ports:
- "80:80"
- "443:443"
volumes:
- ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
depends_on:
- app
Enter fullscreen mode
Exit fullscreen mode
Use docker-compose up -d.
10) Security checklist (MUST for Internet exposure)
Use HTTPS only (redirect HTTP → HTTPS).
Don’t expose databases or admin ports to the public network.
Use firewall: only open necessary ports (80/443, ssh limited to known IPs).
Use fail2ban to ban repeated failed login attempts.
Keep OS and dependencies updated.
Use a reverse proxy to enforce security headers:
Strict-Transport-Security, X-Frame-Options, X-Content-Type-Options, CSP.
Use environment variables or secret manager for credentials — don’t commit .env to VCS.
For staging/demos: put a simple auth gate (basic auth) or IP allowlist.
For team-only access: prefer VPN (WireGuard) or private tunnel.
11) Monitoring and logging
Logs: Nginx access/error logs, app logs (journalctl -u myapp or Docker logs).
Health checks: expose /healthz which returns 200 for monitoring.
Uptime monitoring: UptimeRobot / Pingdom or custom Prometheus + Alertmanager.
Performance: enable gzip, cache static assets, use CDN for large public assets.
12) Troubleshooting checklist (if not reachable)
Is the app running? systemctl status / ps aux / docker ps.
Is it listening on correct interface? ss -tulpn | grep 3000.
Firewall open? sudo ufw status or Windows firewall rules.
From local machine: curl http://127.0.0.1:3000.
From another LAN machine: curl http://192.168.1.5:3000.
If public: is port forwarding set up? Check router settings.
Is ISP blocking ports? Test with a remote port scan or try an alternate external port.
DNS propagation issues: dig +short example.com and compare to expected IP.
Use traceroute and tcpdump to debug network hops and packets.
13) Example: full step-by-step (Ubuntu) — Node app, public access via ngrok (quick, safe demo)
Clone and start app:
git clone https://.../myapp.git
cd myapp
npm install
node server.js --port 3000 --host 0.0.0.0
Enter fullscreen mode
Exit fullscreen mode
Allow firewall:
sudo ufw allow 3000/tcp
Enter fullscreen mode
Exit fullscreen mode
Install ngrok, authenticate, and start tunnel:
ngrok authtoken <token>
ngrok http 3000
# ngrok prints a public https://... url — share that
Enter fullscreen mode
Exit fullscreen mode
(Optional) Make Node run as a service with systemd (see earlier).
Why this flow? Fast, secure for demos, no router fiddling or DNS changes required.
14) Example: production checklist (if you mean “others” = many users)
Use a cloud VM or managed platform (AWS/GCP/DigitalOcean). Don’t host high-traffic production on a home connection.
Use a reverse proxy with TLS (Nginx/Traefik), autoscaling/load balancing, CDN for static content.
Use managed databases and secrets. Regular backups, monitoring, and incident response plan.
15) Interview talking points — how to present this answer (concise)
If asked in an interview, structure your answer:
Goal & constraints (LAN vs Internet, security, budget).
Quick demo solution: serve on 0.0.0.0 and use ngrok for external demos.
Production solution: deploy to a cloud VM / container platform, front with Nginx/Traefik, secure with Let’s Encrypt, use monitoring & CI/CD.
Risks & mitigations: ISP blocks, security exposure, scaling, backups.
Why decisions: choose tunnels for quick demos, VPS/prod for stability and long-term control.
16) Common gotchas to mention (shows depth)
CGNAT: Some home ISPs use carrier NAT — port forwarding won’t work. Use a tunnel or VPS reverse proxy.
ISP blocks: Residential ISPs sometimes block 80/443. Use alternative ports or VPS.
Router UPnP security risk: Avoid enabling UPnP for automatic port opening on untrusted networks.
Certificates & local hostnames: Let’s Encrypt requires a publicly resolvable domain. For internal names use self-signed certs or a private CA.
Privacy: Be mindful of exposing development credentials or debug endpoints.
17) Example artifacts to prepare for interview (optional)
Small diagram: local machine → router (NAT) → Internet. Or local machine → ngrok → public URL.
A sample systemd service file, nginx block, and certbot command snippet ready to paste.
A short script to create a DDNS update (or ddclient configuration).
Final summary (what I would do)
For a quick demo: bind to 0.0.0.0, open firewall, run ngrok http <port>. Share ngrok URL.
For short-term public hosting: use a cheap VPS + reverse proxy + Let’s Encrypt + systemd/docker + monitoring.
For production: use cloud hosting/managed services, TLS, CDN, autoscaling, proper secrets and monitoring.
Always secure: firewall, do not expose internal services, keep software current.
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
•
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Aadarsh Nagrath
Follow
I code and shit <post/> 💻
Connect me on https://twitter.com/aadarsh_nagrath
Location
India
Education
Chandigarh University
Pronouns
Man 🗿
Joined
Nov 2, 2022
More from Aadarsh Nagrath
Understanding AWS EKS: A Deep Dive into Elastic Kubernetes Service
#kubernetes
#devops
#aws
#programming
TOP 10 TYPES OF DOCKER COMMANDS
#docker
#devops
#development
#containers
Building a Simple Python-Django CRUD Application from Scratch
#python
#django
#webdev
#tutorial
💎 DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community — A space to discuss and keep up software development and manage your software career
Página Inicial
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
Sobre
Contato
Free Postgres Database
Software comparisons
Forem Shop
Código de Conduta
Política de Privacidade
Termos de Uso
Built on Forem — the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community © 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account