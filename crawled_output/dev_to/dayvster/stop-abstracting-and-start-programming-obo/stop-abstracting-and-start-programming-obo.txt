Stop Abstracting and Start Programming - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE‚Äîthe hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project ‚Äî features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto‚Äîfrom Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Dayvster üåä
Posted on Sep 11
‚Ä¢ Originally published at dayvster.com
Stop Abstracting and Start Programming
#softwaredevelopment
#software
#career
#discuss
How often do you find yourself writing code with a clear goal in mind when suddenly this annoying urge at the back of your mind tells you
Oh man this is so repetitive and single use, you really should abstract this, oh and this function up there man that function could be way more generic, oh you should totally use generics here, heck you know what make it all modular, do it now, abandon your task and do it now, you will thank me later.
That voice is an asshole, ignore it do not listen, it is trying to lead you down a path of pain and misery.
Why Over-Abstraction Hurts ?
As programmers we have this idea in our mind that eventually this code you are writing right now will be reused by yourself or someone else in the future and obviously you'll want to make it as reusable and as generic as possible. So that when the time comes you can just plug and play it into something else with minimal effort and complete whatever task you have at hand with relative ease.
The problem with this mindset is that it's mostly true but can easily be overdone to annoying extremes. You can easily end up in a situation where you have a codebase that is so abstracted and generic that it becomes impossible to understand what the code is actually doing. You end up with layers upon layers of indirection, making it hard to trace the flow of data and logic. This can lead to increased complexity, making it difficult for new developers (or even yourself) to understand and maintain the code.
I've worked on countless codebases in the past where just changing something as simple as a label required me to dig through 5-7 levels of files. This is not ideal and it's really hard to build a mental model of the codebase when you have to jump through so many hoops just to understand what a piece of code is doing.
In fact...
Anecdote
I once worked on a project where I had to change the text on a single button. Should‚Äôve been a two-minute job. Instead, it turned into a nightmare. The label wasn‚Äôt in the component. It wasn‚Äôt in the props. It wasn‚Äôt even in the constants file. Nope. It was hidden behind a ‚ÄúUIContextProvider‚Äù that wrapped another ‚ÄúGenericLabelRenderer‚Äù that passed down to a ‚ÄúLocalizedStringFactory.‚Äù By the time I finally found the damn string, I had clicked through six different files and completely lost track of what I was even trying to do.
That‚Äôs the cost of over-abstraction. Something dead simple became a multi-hour scavenger hunt because someone thought they were being clever by making the text system ‚Äúflexible‚Äù and ‚Äúreusable.‚Äù Spoiler: nobody ever reused it.
When to Abstract your Code ?
This is a tricky question and the answer as always is well it depends. But there are some general rules and guidelines that personally help me be productive and avoid over-abstraction.
Write it First, Abstract Later:
Start by writing the code in a straightforward manner. Focus on getting the functionality working first. Once you have a working solution, you can then look for opportunities to abstract and refactor.
YAGNI You Ain't Gonna Need It:
Avoid adding abstractions for features or use cases that you don't currently need. It's easy to fall into the trap of over-engineering for hypothetical future scenarios. Only abstract when you have a clear and present need for it.
Keep it Simple:
Strive for simplicity in your code. If an abstraction adds unnecessary complexity without a clear benefit, it's probably not worth it. Simple code is often easier to understand and maintain.
Limit the Levels of Indirection:
Try to keep the number of layers of abstraction to a minimum. If you find yourself needing to jump through multiple files or layers to understand a piece of code, it might be a sign that the abstraction is too deep.
Use Descriptive Names:
When you do create abstractions, use clear and descriptive names. This can help make the purpose of the abstraction more apparent and reduce the cognitive load when reading the code.
I especially find the most value in the first point, usually if you just make it work first even if it's a quick and dirty implementation that just proves it works. You can really easily find which parts require refactoring and abstraction once you are done with the initial implementation, and from what little experimentation I've done with this technique I found that I end up finishing my work a lot faster than if I had tried to abstract everything from the get go. Mostly because this way I avoid the dreaded analysis paralysis where you just keep thinking about how to make something generic and reusable instead of just getting the job done.
And that last part is really crucial I know I am repeating myself over here but it's really easy to find yourself spiraling into a rabbit hole of generic functions and complex what if scenarios that drive your architecture into a direction that is not really useful for the task at hand.
Conclusion
Abstraction is a powerful tool in software development, but like any tool, it can be misused. By focusing on simplicity, writing code that works first, and being mindful of when and how to abstract, you can avoid the pitfalls of over-abstraction and create code that is both maintainable and understandable. Remember, the goal is to write code that solves problems effectively, not to create the most generic and reusable code possible. So next time you feel that urge to abstract everything away, take a step back, breathe, and ask yourself if it's really necessary for the task at hand.
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
‚Ä¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Dayvster üåä
Follow
Dayvi Schuster
Freelance web developer | software consultant | mobile developer
I make dope shit with code and stuff.
Location
Slovenia ‚õ∞
Work
Software developer
Joined
Nov 19, 2019
More from Dayvster üåä
Are We Chasing Language Hype Over Solving Real Problems?
#software
#programming
#discuss
#productivity
Dev Culture Is Dying The Curious Developer Is Gone
#programming
#productivity
#discuss
#career
Why I Still Reach for C for Certain Projects
#c
#programming
#softwaredevelopment
üíé DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community ‚Äî A space to discuss and keep up software development and manage your software career
Home
Welcome Thread
Reading List
Tags
About
Contact
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community ¬© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account