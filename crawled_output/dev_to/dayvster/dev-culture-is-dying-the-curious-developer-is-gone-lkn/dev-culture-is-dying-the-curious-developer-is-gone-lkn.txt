Dev Culture Is Dying The Curious Developer Is Gone - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE—the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project — features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto—from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Dayvster 🌊
Posted on Sep 18
• Originally published at dayvster.com
Dev Culture Is Dying The Curious Developer Is Gone
#programming
#productivity
#discuss
#career
When Curiosity Lead the Way
If you have been in software development for a while, you might remember a time when developers were launching unique and innovative products and projects just for the sake of curiosity, learning or even just because they had a particular interest in a specific topic.
This curiosity and problem solving mindset gave us some of the best tools that we still use today such as VLC, Linux, Git, Apache HTTP Server, Docker(arguably), and many many more.
These tools were not created by large corporations or solopreneurs looking to increase their MMR or ARR. They were created by curious developers who wanted to solve a unique problem they had or even just wanted to learn something new.
Nights Spend Chasing ideas and Tinkering
I still remember back in the 2000s (2003-2009) the nights I spent tinkering with new technologies, frameworks, and programming languages. I would often find myself staying up late into the night, fueled by curiosity and a desire to learn more about the craft of software development. I would make the dumbest of projects and the strangest of shortcuts just because I could and just to see if it would work. Even if it would only serve me and no one else, I would still make it because it was simply fun.
Learning Without a Purpose
There is something to be said about learning without a clear purpose, goal or even a expected reward at the end of your journey. It allows you to explore new ideas and concepts without the pressure of having to deliver a specific outcome. It allows you to be creative and even tinker with suboptimal implementations and solutions or even some that are flat out insane or idiotic.
Because at the end of your journey, you will not be met with disappointment that you did not create a new product or service that will generate passive income or be used by hundreds of thousands of people. No, that was never your expectation going into it in the first place, you started the journey simply because you were curious and you wanted to create something even if your target demographic was just yourself.
This in many ways leads to a better learning journey and a more fulfilling experience as you are not bound by the constraints of having to deliver a specific outcome or meet certain expectations. You can simply explore and learn at your own pace and in your own way. Don't get me wrong this does not apply only to new comers to the field or junior software developers, this applies to every single developer out there even the most experienced ones.
Personally I'd consider myself fairly experienced in the field of software development, I started learning C++ back in 2003 and my first job as a software developer was in 2008. I've been in the field for a while now. In fact the longer I am in the field the more I realize that I know nothing. There is always something new to learn and explore and I find myself constantly tinkering with technologies be they new or old. Learning is not only about new and shiny tech, sometimes it's assembly or system design, microcontrollers, embedded etc.
This is plain and simply the tinkerers mindset and I believe that this mindset is slowly dying out in the field of software development. I find less and less like-minded people and I encounter more and more push back along the lines of "Why are you wasting your time with that? You should be focusing on X, Y or Z instead." or "That is not going to help you in your career." or even "You should be focusing on building products that will generate passive income or be used by hundreds of thousands of people."
The Era of Metrics and Shiny Things
I find that there has been a strong shift in developer culture over the past decade or so. A very strong and worrying shift towards metrics, revenue optimization, delivering "value" and "building for the masses". I'm not sure this is a good shift but it is one that is happening nonetheless.
It seems to me that the focus has shifted from curiosity, learning and a joy for creating cool things to a focus on metrics, observables, problem solving for your niche audience.
I see countless developers spending their free time using their free time using technologies they do not enjoy building products they do not care about for an audience they do not understand, simply because they believe that this is what they should be doing in order to be successful as a software developer or to be taken seriously in the field.
Many who I talk to believe that this will set them apart from the rest of the pack or that they are a temporarily embarrassed startup CTO/founder or that they are building the next big thing that will paint their name in the stars and grant them the fame and respect of their fellow developers.
But how can you ever hope to build something that huge if you do not even care about it? If the problem you are solving is not even a problem you yourself have or worse yet care about?
This is where a deeper issue shows itself, When you don't care about what you are building you start looking elsewhere for that sense of progress, accomplishment or even identity. You become a Next.js developer, a React developer, a Rust developer etc... You start to identify yourself by the tools you use rather than the problems you solve or the things you create.
Chasing Every new Framework or Idea
If you've identified with anything in this article so far, then take a moment and answer this to yourself honestly. How often did you find yourself working on your product or project only get think oh but this new framework/library/module/plugin is so much better, I should be using that instead of what I am doing right now, I need to improve my stack, I need to be using the latest and greatest. Because I am building something that will eventually be used by hundreds of thousands of people, so why stunt my growth, why risk being left behind?
Naturally your webapp has to use the latest version of React or Next.js with it's latest features and optimizations, a year or so back (2023-2024) that was React server components.
Or maybe you just had to switch to the newest version of Vue.js or Angular because they have some new feature that will make your life easier or your app faster or more scalable.
Or perhaps your utilities or backend are written in Go or Node or C# and really you should be using Rust because it's just so damn fast and memory efficient. You can't pass that up can you?
So you title yourself after whatever language, framework or library you are currently using. You are no longer a software developer, you are a Next.js developer, a specialist in your field.
you chase every new shiny thing and you write a product or service in that shiny thing optimizing for MMR, ARR, DAU, MAU, SEO rankings, conversion rates and all that jazz. Wondering why your product or service is not taking off, why no one is using it, why you are not getting any traction.
Weird... you used all the right things, you've used the technology that you should have used you've optimized for all the right metrics, you've done everything by the book. So why is it not working?
What we Lost Along the Way
Constantly adopting the latest and greatest thing, not because it inspires you or because you care about it, but simply because you think you should be using it in order to be successful is a recipe for disaster. Not just for you for out entire developer culture as a whole.
I don't want to sound overly dramatic but I do lament the loss of the curious developer, the tinkerer, the obsessed creative that just wants to build something cool even if nobody cares about it, even if it only solves their own problem.
I think we are slowly killing this mindset, it's slowly disappearing from our culture wether that will be good or bad only time will tell. If you were to ask me I'd say it's a very bad thing.
Don't get me wrong we have occasional bright sparks of innovation and creativity HTMX, Bun, Astro, Zig and many other come to mind. But these are few and far between but they show that there are still curious developers out there, they are just harder to find and shrinking in numbers and being drowned out by the noise of metric seeking and revenue optimizations.
The World Moves On, But Some of Us Remember
I don't want to sound too much like a middle aged man lamenting a world that is changing around him. I understand the world moves on, you get more and more jaded and cynical as you get older. But I assure you this is not that. This is a pattern I've been noticing for a while and it worries me. The tools the projects that were built by curious developers are still around and still in use but compared to before we get relatively few new ones that are truly build out of curiosity and passion.
There are occasional sparks but not like before.
Think of all the amazing software you use today, think which ones were made by insanely curious developers and think of how old that software is or when it came out and then think of more modern software and how many of those were made by massive corporations or solopreneurs or even just flat bought out or sold out.
I think we are losing something very important in our culture and I hope we can find it again before it's too late. Before the curious developer is gone for good and we are left with a sea of software built with no privacy concerns, horrible monetization strategies, bloated frameworks and libraries and no ownership mindset, not for you the consumer and not by the creator.
The Death of Ownership is not Just for the Consumer
We've all seen the shifting tide, consumers no longer own their software, you may buy the newest Adobe suite, or JetBrains IDE, latest iPhone or Android or even the latest Windows, but you do not own it. It can be taken away from you at any time, you simply rent it, you pay a monthly fee to use it. You do not own it, you simply have a license to use it.
But do we ever take time to consider the loss of ownership for the creators? The developers, the curious tinkerers, the obsessed creatives that build these tools and software. Do they own it? Or do they simply rent it out to the highest bidder or sell it off to the largest corporation? Do people still want to build something that is uniquely their or do they simply want to build the latest and greatest SASS that they can rent out to the masses?
Do they care about the software they build or do they simply care about the metrics, the revenue, the growth?
You can argue that Linus Torvalds owns Linux and cares about Linux the kernel, you can argue that Jean Baptiste Kempf owns VLC and cares about VLC. Does Solomon Hykes own Docker and care about Docker? Does Daniel Ek own Spotify and care about Spotify? Does Mark Zuckerberg own Facebook and care about Facebook?
Are they owners, true owners of the product they built or did they simply become renters of their own creation, a slave to the metrics and revenue optimization?
Again I don't want to be overly dramatic but this is an important question we all should be asking ourselves. I know I am asking myself this question more and more often as I see the world around me change and the developer culture shift towards metrics and revenue optimization.
Carving Space for Curiosity and Innovation
I implore you to find time in your life to be curious and creative to tinker and build something just for the sake of building it. Even if no one else cares about it, even if it only solves your own problem. Make something cool, something unique don't care about others build it for yourself, built it because you want to and can.
Don't let the world tell you what you should be doing, what you should be building, what you should be using, no matter how ambitious or dumb or idiotic it may seem to others, make it because you want to, because it makes you happy, because it makes you feel alive.
Software development is a unique craft, it's equal parts creative and equal parts engineering, two opposing forces that when combined can create something truly amazing. Fight the temptation to add marketing into the mix and dilute the craft with it.
Build what you Can't Ship
Have a project in mind that you've always wanted to tackle but it never made sense to you to do it because it would never be used by anyone else or it would never make you any money? Do it anyway, build it, tinker with it, learn from it. Who cares if you can't ship it to the masses, who cares if it's useless. Make it, create something from nothing, just because you can.
Share the Spark
You might think this goes against my previous point, but it really does not. Share your work, share your creations, bring others into your world, if nobody responds who cares, you made it, you created something from nothing, maybe the value is in the journey and not the destination. Maybe the value is in the learning and not the outcome. Maybe the value is in the process and not the product.
And who knows maybe your unique problem will be shared by others, maybe your unique solution will inspire others to create something new, something unique. Maybe your curiosity will spark a fire in someone else and they will go on to create something truly amazing.
It's not impossible it happened for Linux, it happened for VLC heck it happened for Git.
Just try to conceptualize what an insane idea Git was even when SVN was a well established and widely used version control system. Who in their right mind would think that a distributed version control system would be a good idea? Yet here we are, Git is the de facto standard for version control in software development.
Conclusion
I wrote this article to lament the loss of the curious spark in our developer culture, not to criticize or judge anyone. I understand the world moves on, I understand that we all have to make a living and that we all have to pay the bills. But I also believe that we should not lose sight of what makes software development such a unique and special craft.
If you've made it this far, thank you, sincerely thank you. It's one of my longer articles and I appreciate you taking the time to read it. I hope it has sparked something in you, I hope it has made you think about your own journey as a software developer and I hope it has inspired you to be curious and creative again.
Top comments (9)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Collapse
Expand
fern_d3v
fern_d3v
fern_d3v
Follow
33 | code/my ritual | terminal/my shrine | js weaves spells | openSourcerer | sprenName = null_ | join the quest
Location
Colorado, USA
Education
Codecademy
Pronouns
they/them
Work
openSourcerer
Joined
Jul 6, 2025
•
Sep 20
Dropdown menu
Copy link
Hide
This was an amazing read! Thank you so much for putting the emotional labor it took to bring this point to us! As a fledgling dev, it is nice to hear that there are others out there who have been doing this for a while who think this way still. I used to be a video editor and my favorite thing to do then was tinker and make weird fun things, and so far as a developer that has been the same!
Like comment:
Like comment:
3 likes
Like
Comment button
Reply
Collapse
Expand
Dayvster 🌊
Dayvster 🌊
Dayvster 🌊
Follow
Dayvi Schuster
Freelance web developer | software consultant | mobile developer
I make dope shit with code and stuff.
Location
Slovenia ⛰
Work
Software developer
Joined
Nov 19, 2019
•
Sep 21
Dropdown menu
Copy link
Hide
create stuff and share stuff, would love to see what you come up with.
Like comment:
Like comment:
2 likes
Like
Comment button
Reply
Collapse
Expand
fern_d3v
fern_d3v
fern_d3v
Follow
33 | code/my ritual | terminal/my shrine | js weaves spells | openSourcerer | sprenName = null_ | join the quest
Location
Colorado, USA
Education
Codecademy
Pronouns
they/them
Work
openSourcerer
Joined
Jul 6, 2025
•
Sep 21
Dropdown menu
Copy link
Hide
I'm currently working on a warmup cli tool to help me get in the zone daily. I'll be writing an article on it soon! Stay tuned.
Like comment:
Like comment:
3 likes
Like
Comment button
Reply
Collapse
Expand
Guy
Guy
Guy
Follow
CEO and CTO at https://scrumbuddy.com/
Expert in AI orchestration and software delivery. Building something great for solo developers. Register now to test it out for free!
Email
hello@pinavida.co.uk
Location
Isle of Man
Work
CEO and CTO at ScrumBuddy
Joined
Sep 1, 2025
•
Sep 23
Dropdown menu
Copy link
Hide
This piece really hit something real. I see that tension between curiosity-for-curiosity’s-sake and the “optimize for metrics → optimize for revenue → rinse repeat” mindset in so many projects now. Having built orchestration with Claude and shaping real workflows in my dev work, I’ve come to believe that curiosity is the seed of innovation but metrics are how things ship and survive. The danger is when metrics become all you care about, and curiosity and craftsmanship get trimmed away.
Strong opinion: the “curious developer” isn’t dying, but they're being squeezed out unless they fight for space. When you start every feature with “What am I curious about in this?” and build in non-deliverable tinkering, you keep the creative edge alive. For example, when I build something in my stack, I’ll often prototype just to explore an idea, even if it stays deleted, because those prototypes inform what becomes stable architecture or code review pattern. That willingness to tinker, to experiment, to ask dumb questions is what makes good engineers into great ones.
I also think we need to resurrect more tooling and practices that embed curiosity: modular architectures, version control that encourages branching, internal PR reviews that include “why this path” not just “how this implements feature,” retrospective pauses, not just delivery sprints. Without those guardrails, ship-fast turns into break-fast.
Thanks for this reminder. If more devs held tight to curiosity like this, even amid pressure to grow fast, we’d see a lot more tools & systems that feel alive, rather than just polished veneers.
Like comment:
Like comment:
2 likes
Like
Comment button
Reply
Collapse
Expand
Spot2
Spot2
Spot2
Follow
Software craftsman
Location
Mexico City
Work
CTO at Spot2
Joined
Aug 28, 2025
•
Sep 22
Dropdown menu
Copy link
Hide
This really hits home, especially the part about "learning without a purpose." I've been guilty of falling into the metrics trap myself - constantly asking "will this scale?" or "what's the ROI?" before even understanding if the problem is worth solving.
I'm curious though - do you think this shift is partly driven by the current economic climate? When junior devs are facing layoffs and seniors are worried about AI replacing their jobs, it's natural to gravitate toward "safe" choices and proven revenue models. But maybe that's exactly when we need more experimental, curiosity-driven projects?
Thanks for sharing!
Like comment:
Like comment:
2 likes
Like
Comment button
Reply
Collapse
Expand
Nicholas Fane
Nicholas Fane
Nicholas Fane
Follow
Software Engineer | Javascript & .NET | Brisbane Au
Location
Brisbane, Australia
Joined
Sep 21, 2025
•
Sep 21
Dropdown menu
Copy link
Hide
Good stuff, a lot of this can relate to the obsession of a side-hustle and to monetise everything you do. Many developers will fear working on something if it doesn't have inherent value, rather than the value of learning and self-challenge.
Like comment:
Like comment:
3 likes
Like
Comment button
Reply
Collapse
Expand
DavidArtifacts
DavidArtifacts
DavidArtifacts
Follow
Joined
Aug 4, 2025
•
Sep 22
• Edited on Sep 22
• Edited
Dropdown menu
Copy link
Hide
This is a great reminder of why we started learning and building software. Many of us grew up using OSS and wanted to contribute, whether to solve small or big problems, even if only a handful of people faced them, or simply for fun and creative expression.
I've seen this in both young and not-so-young developers who see software development as a gold mine. As you said, they don’t really care about the learning and creating process, they just want to chase the “latest” and “most popular” frameworks to build a service and make money, instead of enjoying the journey of being a software maker.
Maybe it’s a reflection of today’s struggling global economy... I don’t know. But I’m glad there are still people who promotes curiosity and creativity—just like in the old days 😉.
Like comment:
Like comment:
1 like
Like
Comment button
Reply
Collapse
Expand
Kyle Logue
Kyle Logue
Kyle Logue
Follow
Frontend dev tired of waiting 4+ days for APIs. Researching why contract-first development fails in practice. Building CLI experiments to solve API coordination workflow problems.
Location
Willow Spring, NC
Work
Frontend Developer
Joined
Sep 19, 2025
•
Sep 22
Dropdown menu
Copy link
Hide
This article definitely resonates with me. I still consider myself a tinkerer and build things to learn even after working full time as a dev for over 10 years. The world has somewhat evolved into a "Throw this idea at AI" way of thinking where learning how things work doesn't matter anymore. I will continue to build things that solve my own problems though and maybe they'll somehow be interesting to others and solve their problems too. Thanks for sharing! I'm glad to know there are still others like me.
Like comment:
Like comment:
1 like
Like
Comment button
Reply
Collapse
Expand
Shipyard DevRel
Shipyard DevRel
Shipyard DevRel
Follow
The Shipyard team is here to chat and learn about all things DevOps!
Location
Brooklyn, NY
Joined
Aug 17, 2021
•
Sep 22
Dropdown menu
Copy link
Hide
Beautifully written! So important to remember what made us fall in love with programming in the first place
Like comment:
Like comment:
2 likes
Like
Comment button
Reply
Code of Conduct
•
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Dayvster 🌊
Follow
Dayvi Schuster
Freelance web developer | software consultant | mobile developer
I make dope shit with code and stuff.
Location
Slovenia ⛰
Work
Software developer
Joined
Nov 19, 2019
More from Dayvster 🌊
Are We Chasing Language Hype Over Solving Real Problems?
#software
#programming
#discuss
#productivity
Why I Still Reach for C for Certain Projects
#c
#programming
#softwaredevelopment
Stop Abstracting and Start Programming
#softwaredevelopment
#software
#career
#discuss
💎 DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community — A space to discuss and keep up software development and manage your software career
Página Inicial
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
Sobre
Contato
Free Postgres Database
Software comparisons
Forem Shop
Código de Conduta
Política de Privacidade
Termos de Uso
Built on Forem — the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community © 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account