Built a LinkedIn Automation Tool and Survived 206 Commits Later ü´† - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE‚Äîthe hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project ‚Äî features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto‚Äîfrom Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Md Kaif Ansari
Posted on Sep 12
Built a LinkedIn Automation Tool and Survived 206 Commits Later ü´†
#architecture
#showdev
#startup
yo devs! üëã
so we just launched our first product (post0 - a LinkedIn automation tool) and honestly, the technical journey has been absolutely WILD. thought i'd share how we went from "let's just build a simple app" to accidentally creating a distributed nightmare that somehow actually works now lol
the "simple" beginning
started with what every student does - a good old monolith. one repo, one deployment, one massive headache waiting to happen. we were young, naive, and thought "microservices are just corporate overengineering" ü§°
post0-app/
‚îú‚îÄ‚îÄ frontend/
‚îú‚îÄ‚îÄ backend/
‚îú‚îÄ‚îÄ workers/
‚îî‚îÄ‚îÄ database/
Enter fullscreen mode
Exit fullscreen mode
seemed simple enough right? WRONG.
when everything went to sh*t
about 3 months in, our CI/CD started taking 20+ minutes. deployments were breaking constantly. one bug in the posting logic would take down the entire frontend. classic monolith problems hitting us like a truck.
the breaking point was when i pushed a "small fix" to the posting service and accidentally broke user authentication for 2 hours üíÄ
the great migration (aka going full microservices)
said f*ck it and decided to split everything up:
current architecture:
posting-service (24 commits) - handles all the LinkedIn API magic
notification-service (7 commits) - push notifications and email stuff
frontend (162 commits) - next.js app that looks decent
prisma-service (13 commits) - shared database schemas
event-driven with pub-sub model:
// when user schedules a post
await pubsub.publish('post.scheduled', {
userId,
postContent,
scheduledTime,
platform: 'linkedin'
});
// posting service picks it up
pubsub.subscribe('post.scheduled', async (data) => {
await scheduleLinkedInPost(data);
await pubsub.publish('post.status.updated', { ... });
});
Enter fullscreen mode
Exit fullscreen mode
the pain points (aka where we cried)
prisma schema syncing nightmare
sharing prisma schemas across services is... interesting. we tried:
git submodules (hell no)
npm packages (version hell)
monorepo (back where we started?)
ended up with a separate prisma-service repo that publishes schema updates. not perfect but works.
vercel + github orgs = üí∏
vercel doesn't deploy org repos on free tier. had to setup github actions to build and deploy:
name: Deploy Frontend
on:
push:
branches: [main]
jobs:
deploy:
runs-on: ubuntu-latest
steps:
- uses: actions/checkout@v2
- name: Deploy to Vercel
uses: amondnet/vercel-action@v20
with:
vercel-token: ${{ secrets.VERCEL_TOKEN }}
vercel-org-id: ${{ secrets.ORG_ID }}
Enter fullscreen mode
Exit fullscreen mode
azure deployment chaos
deploying 4 separate services to azure container instances while maintaining secrets, environment variables, and not going broke as students = pure chaos
what we learned (the hard way)
start simple, split when it hurts - monolith wasn't wrong initially, we just grew out of it
event-driven architecture is beautiful but debugging async flows at 3am is not
shared schemas are hard - there's no perfect solution, pick your poison
free tiers have limits but github actions + some creativity goes far
commit often - 162 commits in frontend repo saved our ass multiple times
current status: somehow working ‚ú®
all services deployed on azure
frontend on vercel (through our CI/CD hack)
pub-sub events flowing smoothly
users actually scheduling LinkedIn posts without everything exploding
the real talk
was it overengineered for a student project? probably.
did we learn a ton about distributed systems, event-driven architecture, and deployment hell? absolutely.
would we do it again? honestly... yeah, but with better planning üòÖ
if you're building something similar, my advice: start with the monolith, split when you feel the pain, and don't be afraid to make mistakes. that's literally how you learn this stuff.
anyway, we're live on product hunt today if you want to check out what came out of this beautiful disaster: [link]
what's your biggest architecture fail? drop it in the comments, let's suffer together ü´°
tech stack for the curious:
next.js + typescript (frontend)
node.js + express (services)
prisma + postgresql
azure pub/sub + container instances
github actions (CI/CD)
vercel (frontend hosting)
Post0
ps: if you're also a student dealing with deployment nightmares, my dms are open. let's cry together üò≠
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
‚Ä¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Md Kaif Ansari
Follow
üöÄ Full Stack Developer | AI and Microservices Maven | Crafting Seamless Experiences with Next.js, TypeScript, and Tailwind CSS üõ†Ô∏è #TechInnovator
Location
India
Pronouns
He / Him
Work
Fullstack developer At Catalyst Group
Joined
Jan 12, 2024
Trending on DEV Community
Hot
Meme Monday
#discuss
#watercooler
#jokes
"Your Profile Doesn't Match the Role" and Other Interview Horror Stories
#watercooler
#career
#interview
#discuss
What was your win this week?!
#weeklyretro
#discuss
üíé DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community ‚Äî A space to discuss and keep up software development and manage your software career
Home
Welcome Thread
Tags
About
Contact
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community ¬© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account