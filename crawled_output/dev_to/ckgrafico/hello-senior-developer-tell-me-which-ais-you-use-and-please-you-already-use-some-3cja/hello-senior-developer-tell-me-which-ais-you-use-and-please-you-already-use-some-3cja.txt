Hello senior developer: tell me which AIs you use (and please, you already use some) - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE—the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project — features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto—from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Quique Fdez Guerra
Posted on Sep 16
Hello senior developer: tell me which AIs you use (and please, you already use some)
#programming
#ai
#discuss
#productivity
My experience using LLMs in day-to-day work and how they are changing programming.
A necessary introduction
In recent months, the noise around "programming with AI" and "the end of programmers" has multiplied.\
What's curious is that most of these claims come from people who don't program. It's like to say "we don't need lawyers anymore" having knowledge of how a trial works: it wouldn't make sense or have any rigor.
What is clear is that AIs already act as super accelerators in technical work. What many thought would arrive in one or two years is already happening today. And far from being something to fear, what senior profiles need to do is adopt them now and learn how to integrate them into daily work.
In my case, I code much less than before because my role is now more about management and strategy. However, when I do program, the change has been radical: I'm faster, more efficient, I focus on complex parts and delegate the repetitive work to AI. Form validation, wiring, scaffolding, utility generation... all the things that used to consume time are now solved in seconds.
AI does not eliminate the need for a senior developer. It reconfigures the role: less time writing mechanical lines of code and more time applying judgment, designing architectures, and ensuring quality.
My setup and how I work with LLMs
Before getting into backlogs and code, I start with a key file in my projects: **Agents.md**.
The Agents.md file
This document contains the rules and practices I want the AI to always follow when working with me. It's my "contract" with the machine.\
I base it on previous versions I've tested, but I always update it with the help of AIs like ChatGPT.
Some of the practices I include there:
Don't add comments to the code. The code should be self-explanatory.
Write at least one small test for each new block of code.
Always check against the backlog before closing a task.
Update documentation (README, agents.md) whenever something relevant changes.
Keep style, dependencies, and patterns consistent.
Thanks to this file, every project starts with a solid foundation and with clear expectations of how the AI should work with me.
Backlogs and specification
Afterwards, I use AI to work on backlogs. First I think them through and draft them myself, because that's where human input adds the most value. Then I run them through AIs like ChatGPT or CheckInAI to polish: making them clearer, more consistent, and easier for everyone to understand. This saves a lot of time lost in misinterpretations.
Programming with AI
On the technical side, my setup is simple:
I use a lightweight editor, such as VS Code, without excessive configuration.
I always keep an assistant AI agent running (for example, GitHub Copilot).
This has taken me from coding 100% of the time to coding barely 1--3% in small projects.
When I tackle large tasks with these AIs, it's not as simple as saying "create this infrastructure" and being done. I work with AI as if it were another person: I question what it suggests, give feedback, ask for changes, and push for improvements until I get the result I want. Although they're still not very good at complex refactoring, I do encourage them to refactor very specific small parts. That constant interaction is what makes the difference.
How I distribute tasks by size
Large and small.\
Here AI is very useful:
Large → infrastructure, initial structures, module skeletons.
Small → minor design changes, visual tweaks, button or icon modifications.\
In both cases, I clearly define the task and closely supervise the result.
Medium.\
This is where AI shines the most today.\
I use agents like Codex or Devin AI, which work synchronously and are often described as "junior developers." In my experience, they handle these tasks very well:
Creating a new page based on another.
Adding a simple editor with data import/export.
Maintaining consistent design with the rest of the system.
The most relevant advantage is that I can use these AIs not only while sitting at my computer, but also by leaving them tasks in the background.
I assign a task, go to a meeting, and when I return the branch is ready for review.
I can even leave something running overnight and check it fresh the next morning.
This has brought a profound change in how I manage my time: it allows me to progress in parallel without extending my workdays or accumulating pending tasks.
How I think this will evolve
Although I've said several times that I don't think AIs will replace us, I do believe their evolution will broaden the spectrum of medium tasks.
We can already see that what used to be complex (like validating a form or setting up an importer/exporter) is now considered a "medium" task. And I think this trend will continue:
Very small tasks (especially in Frontend and design) will still need people with great aesthetic sensitivity and user experience skills.
Very large tasks (in Backend, Frontend, QA, data, architectures...) will still require human teams capable of making decisions, integrating systems, and handling growing complexity.
But the range of medium tasks will expand more and more. What we currently see as "difficult" will become "medium," and that's where AIs will play a bigger role.
This means there will be less repetitive or routine programming work, and more human focus on tasks that truly define quality, experience, and the long-term vision of a project.
And if you're not senior?
If you're a junior developer (or don't know how to program at all), the message is different.\
First of all: don't get carried away by the hype. The internet is full of messages whose only goal is your clicks or your money.
What I do consider essential is learning the technical foundations. Just like in math not everyone solves integrals, but everyone knows how to add, subtract, or solve a simple equation, in programming you should learn the basics: logic, data structures, simple patterns.
Today it's much easier to learn than 10 years ago: you have AIs that teach, compare approaches, and correct mistakes. But it's also harder, because technology has become much broader and more complex. That will be one of the biggest challenges in the coming years: learning enough to be productive without getting lost in the flood of tools.
There's also a deeper issue: without junior developers, there will be no seniors in 10 years. AIs are reducing many of the entry-level tasks that used to serve as training. That was the school where future seniors were formed. If it disappears, how will we train the next generation of professionals?
Companies will need to solve this challenge. Training, mentoring, and creating real practice spaces will be key. Because AI can accelerate, but it cannot replace the learning curve that turns someone into a complete professional.
What I think about all this
If you're senior, you should already be using AI in your day-to-day work. Not doing so means missing out on an accelerator that's already here.
If you're junior (or just starting out), learn the fundamentals first and use AI to practice and understand better, not to skip steps.
The future poses a huge challenge: how to train the next generation of developers in a context where entry-level tasks are increasingly automated.
The answer will not be choosing between humans or machines, but learning how to integrate both worlds to keep building together.
Top comments (3)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Collapse
Expand
Quique Fdez Guerra
Quique Fdez Guerra
Quique Fdez Guerra
Follow
My first mistake was giving up coding as a hobby and turning it into a career. Over the past decade, I've made thousands of mistakes and now I write in the hope that others can learn from them. ✍🏻
Location
Europe
Work
Director of Engineering at Plain Concepts
Joined
Feb 22, 2017
•
Sep 16
Dropdown menu
Copy link
Hide
Spanish version: linkedin.com/pulse/hola-programado...
Like comment:
Like comment:
1 like
Like
Comment button
Reply
Collapse
Expand
The Arkitekt
The Arkitekt
The Arkitekt
Follow
Joined
Jul 30, 2025
•
Sep 18
Dropdown menu
Copy link
Hide
If you were genuinely interested in learning from a senior dev, this isn't the question you would be asking.
Like comment:
Like comment:
2 likes
Like
Comment button
Reply
Some comments may only be visible to logged-in visitors. Sign in to view all comments.
Code of Conduct
•
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Quique Fdez Guerra
Follow
My first mistake was giving up coding as a hobby and turning it into a career. Over the past decade, I've made thousands of mistakes and now I write in the hope that others can learn from them. ✍🏻
Location
Europe
Work
Director of Engineering at Plain Concepts
Joined
Feb 22, 2017
More from Quique Fdez Guerra
My first mistake as a dev - F&L #1
#react
#discuss
#programming
💎 DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community — A space to discuss and keep up software development and manage your software career
Home
Welcome Thread
Reading List
Tags
About
Contact
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem — the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community © 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account