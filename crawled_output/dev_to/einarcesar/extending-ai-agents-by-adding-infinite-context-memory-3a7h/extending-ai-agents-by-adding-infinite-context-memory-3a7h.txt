Extending AI Agents by Adding Infinite Context Memory - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SREâ€”the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project â€” features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Cryptoâ€”from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Einar CÃ©sar
Posted on Sep 17
Extending AI Agents by Adding Infinite Context Memory
#ai
#llm
#rag
Introduction
AI Agents help tremendously when dealing with high workloads. They perform research, solve complex problems, automate tasks, write various content (from reviews to complete articles like this one! ðŸ˜„), and generate images, videos, audio, and more. Give a good AI Agent a decent tool, and you'll have a capable assistant at your service.
However, as nothing is perfect, AI still doesn't support everything we'd like. Most limitations stem from LLMs having restricted context memory (or context window). In practice, when an LLM exceeds its context window size, the agent starts losing information about previous interactions, limiting its effectiveness in long-term tasks.
Method
The tool of choice here is graph databases. Generally speaking, they're more independent since they don't rely directly on AI, unlike vector storage which needs embedding models to transform and find information via semantic search. They're also faster and, in many cases, easier to manage.
Neo4j Graph Database
Neo4j is a popular graph database management system that stores data as nodes (entities) and edges (relationships), rather than in tables like traditional databases.
It offers several powerful features:
Uses Cypher query language for intuitive pattern matching
Stores properties on both nodes and relationships
Excels at traversing connected data with high performance
Some of its best use cases include:
Social networks and recommendation systems
Fraud detection and knowledge graphs
Network infrastructure and logistics optimization
Any scenario where relationships are as important as the data itself
Neo4j also provides enterprise features like clustering, security, and cloud deployment options.
Most importantly, Neo4j is extremely fast for queries involving multiple relationship levels, which would require expensive JOINs in relational databases. Since the graph model naturally represents real-world networks and connections, it's particularly suitable for storing LLM information as both short and long-term memory.
Running the Graph Database
First, you'll need to get a Neo4j instance running on your machine. The quickest approach is using Docker:
docker run -d -p 7474:7474 -p 7687:7687 -e NEO4J_AUTH=neo4j/password --name neo4j-instance neo4j
Enter fullscreen mode
Exit fullscreen mode
If Docker pulls the image successfully without errors, after a few seconds you should be able to access your instance through the web dashboard at:
http://localhost:7474
Enter fullscreen mode
Exit fullscreen mode
Neo4j Agent Memory MCP Server
Recently, I discovered this repository on GitHub, which I believe is highly underrated at the time of writing. It's like attaching a graph database to an agent with industrial-strength adhesive! It's easy to use, transparent, and requires minimal setup.
https://github.com/knowall-ai/mcp-neo4j-agent-memory
Setup
While the neo4j-agent-memory MCP is an excellent tool for any assistant or project globally, I prefer configuring it locally for specific projects. Since I'm using it with Claude Code, the crucial step is properly configuring the .mcp.json file:
{
"mcpServers": {
"neo4j-memory": {
"command": "npx",
"args": ["@knowall-ai/mcp-neo4j-agent-memory"],
"env": {
"NEO4J_URI": "bolt://localhost:7687",
"NEO4J_USERNAME": "neo4j",
"NEO4J_PASSWORD": "password",
"NEO4J_DATABASE": "neo4j"
}
}
}
}
Enter fullscreen mode
Exit fullscreen mode
After configuration, verify everything is working with:
claude mcp list
Enter fullscreen mode
Exit fullscreen mode
You should see:
Checking MCP server health...
neo4j-memory: npx @knowall-ai/mcp-neo4j-agent-memory - âœ“ Connected
Enter fullscreen mode
Exit fullscreen mode
System Prompt
With everything in place, the final step is providing a system prompt for your agent. This prompt should reference your MCP and ensure tool calls use the correct parameters. The system prompt essentially teaches your agent how to interact with its new memory system, enabling it to store and retrieve information across conversations seamlessly.
Conclusion
By integrating Neo4j with AI agents through MCP servers, we effectively break through the context window limitations that constrain most LLM applications. This approach provides agents with persistent, queryable memory that can scale infinitely while maintaining fast access to relevant information.
The combination of graph databases' natural relationship modeling and AI agents' processing capabilities opens new possibilities for building truly stateful, long-term AI assistants. Whether you're developing a personal knowledge management system or enterprise-scale AI applications, this architecture provides a solid foundation for agents that remember and learn over time.
Start experimenting with this setup, and you'll quickly discover how much more capable your AI agents become when they're no longer limited by ephemeral context windows!
Top comments (6)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Collapse
Expand
Jay
Jay
Jay
Follow
Self taught AI enthusiast. First year university student pursueing a degree in Computer science.
Email
jay@ghotet.com
Location
Canada
Education
Trillium College + University of Fredericton
Joined
Jun 9, 2025
â€¢
Sep 19
Dropdown menu
Copy link
Hide
I had never considered this approach but it would solve a long running issue I have had even with some of my local models. If I can combine this with a method of condensing the context length on certain models it would be a game changer for my local stack.
Thank you very much for this insight!
Like comment:
Like comment:
2Â likes
Like
Comment button
Reply
Some comments may only be visible to logged-in visitors. Sign in to view all comments.
Code of Conduct
â€¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Einar CÃ©sar
Follow
Tech professional specialized in Machine Learning, Blockchain, and AI. Holds a PhD in Electrical Engineering, and founded the Web3 platform TIME Token Finance
Joined
Aug 27, 2024
More from Einar CÃ©sar
Design Patterns MCP Server: Give Your Project a Professional Touch
#designpatterns
#mcp
#ai
#software
Opencode + Grok Code Fast 1: A Powerful Free Combo for Terminal-Based AI Coding
#ai
#coding
#opensource
#terminal
Breaking Through Creative Blocks: Building an AI-Powered Brainstorming Workflow with n8n
#tooling
#tutorial
#ai
#productivity
ðŸ’Ž DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community â€” A space to discuss and keep up software development and manage your software career
Home
Welcome Thread
Reading List
Tags
About
Contact
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem â€” the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community Â© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account