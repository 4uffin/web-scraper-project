Dependency Gaps in Compose Multiplatform (and how I solved them) - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SREâ€”the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project â€” features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Cryptoâ€”from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Isaac Akakpo
Posted on Sep 18
Dependency Gaps in Compose Multiplatform (and how I solved them)
#revenuecat
#shipaton
#composemultiplatform
Intro
JetBrains' flagship framework for mobile platforms, Kotlin Multiplatform, has come a long way, evolving to offer the promise of "write once, run everywhere." The framework allows you to share business logic across platforms, which required native UI implementations for each platform. With the advent of Compose Multiplatform, JetBrains has taken this concept even further, enabling a true "write once, run everywhere" experience. Built on top of Kotlin Multiplatform, Compose Multiplatform allows developers to share both UI and business logic across all supported platforms, including Android, iOS, Web (via Wasm), and Desktop (via JVM).
While this is a major leap forward, itâ€™s important to acknowledge that Compose Multiplatform doesn't fully solve the challenge of a one-codebase approach for all platforms. There are still some gaps that developers need to address. JetBrains has done a commendable job in creating a unified experience, but platform-specific adjustments are often necessary.
One of the key tools in achieving this is the expect/actual mechanism. Simply put, this approach allows developers to define common logic in the "expect" block, while providing platform-specific implementations in the "actual" block. This means that if Compose Multiplatform doesnâ€™t meet the needs of a particular platform, developers can define platform-specific functionality with the actual keyword.
As a result, itâ€™s mandatory to have an actual function for each platform in your Compose Multiplatform project to fill these gaps. This ensures that your application can fully leverage platform-specific features while maintaining the core benefits of code sharing
The Gap?
You may have to write expect/actual functions for each platform. For instance,the Google's androidx-libraries made for KMP are usually made to support just the mobile platforms (and maybe for JVM) however the Wasm targets lack. Hence having duplicate actuals for iOS, Android, & Desktop just doesn't comply to standard coding practices and can result in code repition.
An example, showing the RevenueCat SDK used in commomMain results in a Could not resolve error for Wasm and Desktop targets
Gradle module to the Rescue
To address this issue, we can create simple, dedicated modules and designate the root directory as a source root. This structure will house all the common code shared across specific platforms, providing a clean and effective solution. Letâ€™s use the Room Database library as an example, which works across iOS, Android, and Desktop (JVM) platforms
We create a nonWasmModule. While the name may seem unusual, it serves its purpose. This module contains just one actual function for the expect method (defined in commonMain), and for Wasm, we can use the webâ€™s local storage as an alternative. This approach solves the problem.
Similarly, for the mobile platforms (iOS and Android), we create a mobileModule, set it as the source root, and include the actual functions, objects, or classes specific to mobile.
Finally, we update the Gradle file at the app level to ensure the new modules depend on the common module, inheriting all shared dependencies between platforms.
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
â€¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Isaac Akakpo
Follow
Joined
Dec 5, 2021
Trending on DEV Community
Hot
Orchestrating Real-World Agent Workflows with MCP
#ai
#beginners
#tutorial
#discuss
Top 7 Featured DEV Posts of the Week
#top7
#discuss
Why Are You Not Reading My Post?
#tutorial
#discuss
#productivity
#career
ðŸ’Ž DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community â€” A space to discuss and keep up software development and manage your software career
Home
Welcome Thread
Reading List
Tags
About
Contact
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem â€” the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community Â© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account