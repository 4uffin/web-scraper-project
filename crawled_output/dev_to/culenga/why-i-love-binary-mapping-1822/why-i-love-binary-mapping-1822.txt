Why I Love Binary Mapping - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE—the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project — features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto—from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Dias Culenga Daniel
Posted on Sep 22
Why I Love Binary Mapping
#programming
#bitmap
#sudokusolver
While developing a Sudoku solver, when dealing with the question of how to represent the board internally in an efficient way, my brain quickly clicked and my eyes lit up, spotting yet another opportunity to use good old binary mapping.
For us humans, it’s natural to see a grid as a string of characters with “.” for empty and “1”–“9” for digits. But for the machine, directly manipulating these symbols is more expensive than working with integers.
So, using the idea of binary mapping, the solution was to apply a mapping:
ASCII = ".123456789"
BIN
= "\000\001\002\003\004\005\006\007\010\011"
Enter fullscreen mode
Exit fullscreen mode
In the initialize method, the line:
s.tr!(ASCII, BIN)
@grid = s.unpack('c*')
Enter fullscreen mode
Exit fullscreen mode
transforms "53..7...." into [5, 3, 0, 0, 7, 0, 0, 0, 0]. Each Sudoku cell becomes a simple integer (0 for empty, 1–9 for digits). In the to_s method, the reverse path is applied:
(0..8).collect{|r| @grid[r*9,9].pack('c9')}.join("\n").tr(BIN, ASCII)
Enter fullscreen mode
Exit fullscreen mode
Thus, the representation goes back to being human-readable.
This design is not only elegant, it's efficient:
• it allows checking duplicates in rows, columns, and blocks using integer operations or bitmasks;
• it reduces string comparisons to simple numeric comparisons;
• it guarantees perfect reversibility between internal and external forms.
Enter fullscreen mode
Exit fullscreen mode
The idea is broader. Many systems — language parsers, compilers, compression engines — use similar tricks. A compiler doesn’t manipulate the word “while”; it maps it to a numeric token, usually through a tokenizer (I’ll probably explore this more when I’m working on my parser — https://github.com/diasculengadaniel/parser — or on my C interpreter, not uploaded to GitHub yet hahaha!). A compressor like Huffman reduces symbols to short binary codes, speeding up manipulation and storage.
The same reasoning was also applied in a higher-level project: rendering event room layouts in JavaScript. The initial approach might be to represent each cell of the room as an object, for example:
let layout = [
{ occupied: false, color: "red", type: "seat" },
{ occupied: true,
color: "blue", type: "stage" }
];
Enter fullscreen mode
Exit fullscreen mode
It works, but it’s heavy. Instead, I represented each cell as an integer with reserved bits:
// Compact version with bitmask
// bit 0
= occupied/empty
// bits 1–3 = color
// bits 4–5 = type
let layout = [
0b00010, // empty, red color
0b10101
// occupied, blue color, stage type
];
Enter fullscreen mode
Exit fullscreen mode
With this, it was enough to use bitwise operations (&, >>) to extract information:
function isOccupied(cell) { return (cell & 0b1) !== 0; }
function color(cell) { return (cell >> 1) & 0b111; }
function type(cell) { return (cell >> 4) & 0b11; }
Enter fullscreen mode
Exit fullscreen mode
This model was not only more compact, but also much faster to process.
The principle is always the same: convert human-friendly symbols into machine-compact numbers, while keeping the ability to revert when needed. I hope that, even if only superficially, I was able to show the utility and beauty of this old representation trick — and perhaps encourage its use.
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
•
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Dias Culenga Daniel
Follow
A curious explorer of the space between mathematical logic and computational magic. Living among numbers, algorithms, and the stories they tell.
Education
Computer Engineer
Joined
Aug 18, 2024
Trending on DEV Community
Hot
Stop Falling for the ‘How I Made $$$ in 10 Days’ Trap
#career
#programming
#beginners
#productivity
Why Are You Not Reading My Post?
#tutorial
#discuss
#productivity
#career
AI for Developers: 5 Workflows That Cut Coding Time in Half
#ai
#webdev
#programming
#coding
💎 DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community — A space to discuss and keep up software development and manage your software career
Home
DEV++
Welcome Thread
Reading List
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Free Postgres Database
Software comparisons
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem — the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community © 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account