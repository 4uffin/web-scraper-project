Constant Folding in .NET 10: Turning Dead Weight Into Pure Throughput - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE‚Äîthe hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project ‚Äî features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto‚Äîfrom Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Sukhpinder Singh
Posted on Sep 19
Constant Folding in .NET 10: Turning Dead Weight Into Pure Throughput
#dotnet
#csharp
#programming
#webdev
I still remember the first time I looked at JIT-generated assembly and thought, Why on earth is the processor adding six and two inside a hot loop? It turned out the compiler hadn‚Äôt spotted the constants in my code. That one oversight ballooned into cache misses, battery drain, and eventually an expensive post-mortem. Since then I‚Äôve had a standing rule: always check what your compiler can fold, and celebrate when it folds more.
.NET 10 gives us a lot to celebrate.
What constant folding really means
At its core, constant folding is nothing more than the compiler saying, ‚ÄúI‚Äôm smarter than doing this math a billion times; let me do it once now.‚Äù When you write:
int Add(int i) => i + 2 * 3;
Enter fullscreen mode
Exit fullscreen mode
the C# compiler rewrites the IL so the multiplication happens at build time, not at run time. The generated method is effectively i + 6.
But compile time is a moving target:
C# compiler stage ‚Äì Only literals the source code can see.
JIT stage ‚Äì Can fold static readonly values, Environment.ProcessorCount, and anything exposed by inlining.
Link-time trimming / AOT ‚Äì May know even more, especially if dead code is removed.
Each step lets the runtime shave off more instructions, unlock dead-code elimination, and free up registers for the stuff that really matters‚Äîyour business logic.
The classic math fold: beyond the C# compiler
Take the pair of methods below:
int M1(int i) => i + M2(2 * 3);
int M2(int j) => j * Environment.ProcessorCount;
Enter fullscreen mode
Exit fullscreen mode
The C# compiler folds 2 * 3 into 6. Nice, but the bigger win is inlining. The JIT in .NET 9 can inline M2, notice that Environment.ProcessorCount is a constant on this machine (say 16), and produce:
lea eax, [rsi + 60h] ; i + 96
(0x60 = 96)
ret
Enter fullscreen mode
Exit fullscreen mode
Four bytes of machine code, zero multiplications, zero memory loads.
Null-check folding: a practical win
Null checks are cheap‚Äîuntil you have two in a row inside every string.AsSpan() call:
s ??= "";
return s.AsSpan();
Enter fullscreen mode
Exit fullscreen mode
.NET 9 emitted two test rsi, rsi instructions. .NET 10 folds the second away, dropping method size from 41 to 25 bytes. For a one-off call you‚Äôd never notice; inside a UTF-8 parser that runs millions of times a second, the branches and T-front-end pressure disappear.
Folding conditional expressions
Consider:
string tmp = condition ? GetOne() : GetTwo();
return tmp is not null;
Enter fullscreen mode
Exit fullscreen mode
Because both helpers return hard-coded strings, the nullness is guaranteed. .NET 9 still materialized the variable and tested it. .NET 10 punts directly to mov eax, 1; ret‚Äîsix bytes. The engine knew the answer before your code ran.
SIMD comparison folding
Vector logic is a performance superpower‚Äîright up until the JIT refuses to pre-compute obvious comparisons. Two PRs (#117099 and #117572) teach .NET 10‚Äôs JIT to fold more vector relations:
Vector128<int> mask = vec == Vector128<int>.Zero; // constant result? Fold it!
Enter fullscreen mode
Exit fullscreen mode
That cuts register pressure, frees up cache bandwidth, and‚Äîcounter-intuitively‚Äîmakes auto-vectorization easier because the IR is simpler.
Why you should care (even if you never open a disassembler)
Higher hot-path throughput ‚Äì Fewer instructions means better IPC and lower power draw.
Unlocks other optimizations ‚Äì When bounds checks fold away, the JIT can unroll loops it previously skipped.
Safer refactors ‚Äì Move code into helper methods without fearing that a constant will ‚Äúescape‚Äù and become runtime overhead.
Cleaner APIs ‚Äì You can write expressive guard clauses (value ?? throw) knowing the JIT often erases them.
Guidelines for ‚Äúfold-friendly‚Äù code
Prefer static readonly over lazy singletons when the value is immutable; the JIT treats them as constants.
Keep helpers small and stateless‚Äîbetter inline odds equal better folding odds.
Mark trivial wrappers with [MethodImpl(MethodImplOptions.AggressiveInlining)] only when measurements prove it helps.
Use pattern matching (is null, is not null) freely; modern JITs see through them.
Rely on Vector128<T>.Count, IntPtr.Size, and similar ‚Äúconfiguration constants‚Äù; .NET will fold them.
A dev-ops anecdote
Our logging pipeline builds interpolated strings in a tight loop. After moving to .NET 10 RC1, CPU usage on the ingestion service dropped by 8% without a single code change. Root cause? Null-check folding inside string.Create and the SIMD tweaks in IndexOfAny. The dev team got to brag, but the real hero was the JIT‚Äôs constant-prop engine.
Takeaways
Constant folding isn‚Äôt new, but the scope keeps expanding. .NET 10 folds more math, more null checks, and more vector ops than any release before it‚Äîwhile generating smaller, tighter machine code.
Next time your profiler shows an unexpected bump in a supposedly trivial method, peek at the assembly. If you spot a multiply by sixteen or a redundant null test, upgrade the runtime‚Äîor file an issue and watch the .NET team fold your constant in the next preview.
Top comments (3)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Collapse
Expand
Om Shree
Om Shree
Om Shree
Follow
Open-Source Contributor Shinzo Labs | MCP Blog Author Glama AI | Full-Stack Developer
Email
omshree0709@gmail.com
Location
India
Education
Jaypee University Of Information Technology
Pronouns
He/Him
Joined
Feb 27, 2025
‚Ä¢
Sep 20
Dropdown menu
Copy link
Hide
Nice Article Sir!
Like comment:
Like comment:
2¬†likes
Like
Comment button
Reply
Collapse
Expand
Sukhpinder Singh
Sukhpinder Singh
Sukhpinder Singh
Follow
A questionable humor from a developer who‚Äôs convinced his bugs are funnier than yours.
Email
sukhpinder.s.dhanjal@gmail.com
Location
Surrey, Canada
Education
M.Tech & B.Tech Computer Science
Pronouns
he/him
Work
Technical Lead at SourceFuse
Joined
May 8, 2021
‚Ä¢
Sep 21
Dropdown menu
Copy link
Hide
Thanks a lot
Like comment:
Like comment:
1¬†like
Like
Comment button
Reply
Some comments may only be visible to logged-in visitors. Sign in to view all comments.
Code of Conduct
‚Ä¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Sukhpinder Singh
Follow
A questionable humor from a developer who‚Äôs convinced his bugs are funnier than yours.
Location
Surrey, Canada
Education
M.Tech & B.Tech Computer Science
Pronouns
he/him
Work
Technical Lead at SourceFuse
Joined
May 8, 2021
More from Sukhpinder Singh
[Boost]
#csharp
#dotnet
#programming
#beginners
Mastering Collections in C#
#csharp
#dotnet
#programming
#beginners
Edition 5: Funniest Monday Memes You Can‚Äôt Miss!
#watercooler
#discuss
#laugh
#programming
üíé DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community ‚Äî Your community HQ
Home
Welcome Thread
Tags
About
Contact
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community ¬© 2016 - 2025.
We're a blogging-forward open source social network where we learn from one another
Log in
Create account