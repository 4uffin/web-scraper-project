Types vs Interfaces in TypeScript: A Clear Guide for Developers - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE‚Äîthe hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project ‚Äî features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto‚Äîfrom Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Rijul Rajesh
Posted on Sep 11
Types vs Interfaces in TypeScript: A Clear Guide for Developers
#webdev
#tutorial
#dev
If you have been working with TypeScript for a while, you have probably come across both types and interfaces. At first glance, they look very similar. Both let you define the shape of objects and give structure to your code. But when should you use one over the other? Let‚Äôs break it down in a way that is simple and practical.
What is a Type?
A type in TypeScript is like a label you attach to a value. It tells the compiler what kind of data to expect. With type, you can describe:
Objects
Primitives like string, number, boolean
Unions
Intersections
Functions
Here is an example:
type User = {
id: number
name: string
}
type Status = "active" | "inactive" | "suspended"
Enter fullscreen mode
Exit fullscreen mode
In the above code, User describes an object structure while Status is a union of string literals.
Types are very flexible because they allow combinations. You can use unions, intersections, and mapped types to express complex structures.
What is an Interface?
An interface also defines the shape of an object. It is most commonly used to describe objects and classes.
Example:
interface User {
id: number
name: string
}
Enter fullscreen mode
Exit fullscreen mode
This looks almost identical to the earlier type example. Where interfaces shine is in extending and merging.
Key Differences
Extension
Interfaces can extend other interfaces.
Types can extend other types using intersections.
interface Person {
id: number
}
interface Employee extends Person {
role: string
}
type Animal = { species: string }
type Dog = Animal & { breed: string }
Enter fullscreen mode
Exit fullscreen mode
Both achieve the same outcome, but the syntax differs.
Declaration Merging
Interfaces support something called declaration merging. If you declare the same interface twice, TypeScript combines them.
interface Car {
brand: string
}
interface Car {
model: string
}
const myCar: Car = {
brand: "Toyota",
model: "Corolla"
}
Enter fullscreen mode
Exit fullscreen mode
With type, this is not possible.
Use Cases
Use type when you need unions, intersections, or more advanced type expressions.
Use interface when you are working with objects, classes, or want to take advantage of declaration merging.
Which One Should You Use?
In practice, both types and interfaces are valid choices. The TypeScript team itself has said that you should not stress too much about which to use. If you are modeling complex combinations of data, types might feel more natural. If you are designing the shape of objects or classes, interfaces might make more sense.
A good rule of thumb is:
Start with an interface when describing objects.
Reach for types when you need more flexibility.
Final Thoughts
Types and interfaces in TypeScript are not rivals. They are tools that overlap in many areas but also have unique strengths. The more you work with them, the more natural it becomes to decide which one to use in a given situation.
So next time you are writing TypeScript, do not overthink it. Choose the one that feels right for the problem you are solving, and remember that both are first class citizens in the language.
Tired of dealing with repetitive tasks, confusing commands, or endless debugging? This platform is built to make things simpler. It is free, open source, and created with developers in mind.
üëâ Check out the tools: FreeDevTools
üëâ Support the repo: freedevtools
Top comments (1)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Collapse
Expand
Saribeg
Saribeg
Saribeg
Follow
Full-Stack JavaScript Developer
Joined
Sep 9, 2025
‚Ä¢
Sep 12
Dropdown menu
Copy link
Hide
Great article, thanks for the clear breakdown!
I also noticed a couple of interesting details when trying out TypeScript:
You can extend a type with an interface, but not the other way around.
If you merge interfaces with the same property name but different types (for example, when they live in different files), you‚Äôll get an error:
interface Car { id: string }
interface Car { id: number } // ‚ùå Error
Enter fullscreen mode
Exit fullscreen mode
With type intersections, the same situation works differently (silently produces never on same props):
type Car = { id: string } & { id: number } // id is inferred as `never`
Enter fullscreen mode
Exit fullscreen mode
Interfaces are great for describing object shapes and can be extended/merged, classes can implement them, but when you need unions, type aliases are the way to go, since interfaces don‚Äôt support them.
type Result =
| { success: true; data: string }
| { success: false; error: Error }
const ok: Result = { success: true, data: "Hello" }
// ‚úÖ
const fail: Result = { success: false, error: new Error() } // ‚úÖ
const bad: Result = { success: true, error: new Error() }
// ‚ùå Type error
Enter fullscreen mode
Exit fullscreen mode
Like comment:
Like comment:
1¬†like
Like
Comment button
Reply
Code of Conduct
‚Ä¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Rijul Rajesh
Follow
Dev | Technical Writer | Learner | Powered by ‚òï and üêß
Building https://hexmos.com/livereview
Joined
Nov 12, 2023
More from Rijul Rajesh
Essential SEO Metadata Tags Every Developer Should Know
#seo
#webdev
How npm run dev Updates Your Site Instantly (and How It Differs from Build)
#javascript
#webdev
#programming
Getting Started with Meilisearch: Fast Search for Your Apps
#search
#tools
#dev
#webdev
üíé DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community ‚Äî A space to discuss and keep up software development and manage your software career
Home
Welcome Thread
Reading List
Tags
About
Contact
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community ¬© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account