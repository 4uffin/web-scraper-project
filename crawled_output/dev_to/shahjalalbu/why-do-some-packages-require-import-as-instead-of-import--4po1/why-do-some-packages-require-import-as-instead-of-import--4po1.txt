Why Do Some Packages Require `import * as ‚Ä¶` Instead of `import ‚Ä¶`? - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE‚Äîthe hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project ‚Äî features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto‚Äîfrom Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Md Shahjalal
Posted on Sep 15
Why Do Some Packages Require `import * as ‚Ä¶` Instead of `import ‚Ä¶`?
#javascript
#node
#typescript
When you start working with JavaScript or TypeScript, you‚Äôll notice two different styles of importing libraries:
// Style 1
import * as moment from "moment";
// Style 2
import moment from "moment";
Enter fullscreen mode
Exit fullscreen mode
At first glance, these two look similar. But depending on the project, one may work while the other gives you an error.
So why do some packages ‚Äúrequire‚Äù import * as? And when can you use the cleaner import ‚Ä¶ style?
The answer lies in module systems and TypeScript compiler settings.
Module Systems: CommonJS vs ES Modules
There are two main ways JavaScript code is packaged:
1. CommonJS (CJS)
The original Node.js system. Uses require and module.exports.
// moment/index.js
module.exports = moment;
Enter fullscreen mode
Exit fullscreen mode
// Using require
const moment = require("moment");
Enter fullscreen mode
Exit fullscreen mode
2. ES Modules (ESM)
The modern JavaScript standard. Uses import and export.
// modern-style module
export default PDFDocument;
// Using import
import PDFDocument from "pdfkit";
Enter fullscreen mode
Exit fullscreen mode
üëâ Most older libraries like Moment.js, PDFKit, and Lodash were written in CommonJS, not ESM.
What import * as ‚Ä¶ Does
When you write:
import * as moment from "moment";
Enter fullscreen mode
Exit fullscreen mode
This means:
‚ÄúImport the entire module object and assign it to the variable moment.‚Äù
If the module only exports one thing (like Moment.js does), you‚Äôll still get the whole object under that name.
‚úÖ This always works with CommonJS libraries.
‚ùå It feels a little verbose.
What import ‚Ä¶ Does
When you write:
import moment from "moment";
Enter fullscreen mode
Exit fullscreen mode
This means:
‚ÄúImport the default export from the module.‚Äù
But here‚Äôs the catch: CommonJS libraries don‚Äôt technically have a default export.
That‚Äôs why in TypeScript you need to enable some flags in your tsconfig.json:
{
"compilerOptions": {
"esModuleInterop": true,
"allowSyntheticDefaultImports": true
}
}
Enter fullscreen mode
Exit fullscreen mode
These options tell TypeScript:
üëâ ‚ÄúPretend that CommonJS modules export a default object so we can use import x from "y";.‚Äù
Examples in Action
Let‚Äôs see how this plays out with a few popular libraries.
Example 1: Moment.js
// Works everywhere
import * as moment from "moment";
console.log(moment().format("YYYY-MM-DD"));
Enter fullscreen mode
Exit fullscreen mode
// Cleaner, but requires esModuleInterop
import moment from "moment";
console.log(moment().format("YYYY-MM-DD"));
Enter fullscreen mode
Exit fullscreen mode
Example 2: PDFKit
// Namespace import
import * as PDFDocument from "pdfkit";
const doc = new PDFDocument();
doc.text("Hello, PDFKit!");
doc.end();
Enter fullscreen mode
Exit fullscreen mode
// Default import (needs esModuleInterop)
import PDFDocument from "pdfkit";
const doc = new PDFDocument();
doc.text("Hello, PDFKit with default import!");
doc.end();
Enter fullscreen mode
Exit fullscreen mode
Example 3: Lodash
// Namespace import
import * as _ from "lodash";
console.log(_.capitalize("hello world"));
Enter fullscreen mode
Exit fullscreen mode
// Default import (needs esModuleInterop)
import _ from "lodash";
console.log(_.capitalize("hello world"));
Enter fullscreen mode
Exit fullscreen mode
Why Some Projects Use * as ‚Ä¶
They have strict TypeScript settings (esModuleInterop: false).
They want to stay compatible with pure CommonJS modules.
Older codebases often stick with this style.
Why Some Projects Use Default Imports
They enabled esModuleInterop: true.
They prefer the cleaner syntax:
import moment from "moment";
import PDFDocument from "pdfkit";
import _ from "lodash";
Enter fullscreen mode
Exit fullscreen mode
It matches modern ESM conventions.
Which One Should You Use?
‚úÖ For new projects: enable esModuleInterop in tsconfig.json and use import x from "package".
‚úÖ For legacy or strict projects: use import * as x from "package".
‚úÖ For modern libraries (like Luxon, Axios, etc.): always use import x from "package" ‚Äî they‚Äôre written as ES Modules.
The difference isn‚Äôt about Moment.js, PDFKit, or Lodash themselves.
It‚Äôs about how TypeScript bridges the gap between CommonJS and ES Modules.
import * as X ‚Üí Import the entire module object (safe for all CommonJS packages).
import X ‚Üí Import the default export (only works if you enable esModuleInterop).
üëâ So, if a package seems to ‚Äúrequire‚Äù * as, it‚Äôs not the package‚Äôs fault ‚Äî it‚Äôs just your project‚Äôs module configuration.
Top comments (2)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Collapse
Expand
Yahaya Oyinkansola
Yahaya Oyinkansola
Yahaya Oyinkansola
Follow
I build web apps with React, explaining concepts and code logic to help you understand React better.
Location
Uyo, Nigeria
Education
University of Uyo
Joined
Aug 19, 2019
‚Ä¢
Sep 16
Dropdown menu
Copy link
Hide
I have always wondered why this was the case, thanks for explaining
Like comment:
Like comment:
2¬†likes
Like
Comment button
Reply
Collapse
Expand
Md Shahjalal
Md Shahjalal
Md Shahjalal
Follow
Email
mdshahjalal.bu@gmail.com
Location
Dhaka, Bangladesh
Joined
Dec 31, 2022
‚Ä¢
Sep 17
Dropdown menu
Copy link
Hide
Welcome
Like comment:
Like comment:
2¬†likes
Like
Comment button
Reply
Code of Conduct
‚Ä¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Md Shahjalal
Follow
Location
Dhaka, Bangladesh
Joined
Dec 31, 2022
Trending on DEV Community
Hot
Why Are You Not Reading My Post?
#tutorial
#discuss
#productivity
#career
Top 7 Featured DEV Posts of the Week
#top7
#discuss
Meow Mountain - postmortem of a 13KB game
#js13kgames
#gamedev
#typescript
#javascript
üíé DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community ‚Äî A space to discuss and keep up software development and manage your software career
P√°gina Inicial
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
Sobre
Contato
Free Postgres Database
Software comparisons
Forem Shop
C√≥digo de Conduta
Pol√≠tica de Privacidade
Termos de Uso
Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community ¬© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account