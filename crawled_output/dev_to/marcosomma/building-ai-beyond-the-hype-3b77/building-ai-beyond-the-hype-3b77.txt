🧠Building AI Beyond the Hype - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE—the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project — features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto—from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Mak Sò
Posted on Sep 25
🧠Building AI Beyond the Hype
#ai
#opensource
#machinelearning
#deeplearning
Orka (26 Part Series)
1
🧠 Orka: A Manifesto for transparent Intelligence
2
🧠 OrKa run locally
...
22 more parts...
3
🧠 OrKa Diaries: The Origin of a Reasoning Engine (Episode 1)
4
🧠 I Couldn't Take It Anymore. So I Built OrKa.
5
🧠 My First Rosetta Stone: When OrKa Proved AI Can Think Structurally
6
🧠 Real-Time Cognition: Building an Observable TUI for AI Memory in OrKa
7
🧠 Emergent Thought Through Looped Conflict
8
🧠 Beyond Structured Chaos
9
🧠 OrKa Cognitive Iteration Benchmark. Full Technical Report
10
🧠 LoopNode: How OrKa Orchestrates Iterated Thought Until Agreement Emerges
11
🧠 How AI Agents Learned to Agree Through Structured Debate
12
🧠 How DeepSeek-R1 Transformed AI Reasoning Economics
13
🧠OrKa-ui show what is the benefit of having TTL at memory level in orka-reasoning
14
🧠 orka-reasoning TUI show TTL and memory storage.
15
🧠 Why LangGraph Loops Stall Thought and OrKa Doesn't
16
🧠 When a System Notices Itself
17
🧠 Local, Trustable and Explainable AI. Not a dream!
18
🧠 I Didn't Know Where It Was Going. I Just Kept Going.
19
🧠OrKa onboarding: example suite, guided tour, and trace replay
20
🧠Can AI Learn to Care?
21
🧠OrKA-Reasoning: How Workflow Execution Really Works
22
🧠From 77% to 92%: How Orka-Reasoning Turns GPT-oss:20B Into a Math Reasoning Powerhouse
23
🧠Loop of Truth: From Loose Tricks to Structured Reasoning
24
🧠Minsky’s six memory types as Orka preset memory.
25
🧠GraphScout: Self-Discovering Paths in OrKA
26
🧠Building AI Beyond the Hype
Introduction
Believing in a theory that runs against the dominant paradigm is never easy. Even with strong evidence, proving it often feels like swimming upstream. This challenge is especially visible in a field as noisy and fast-moving as AI, where marketing cycles often drown out deeper questions of architecture and rigor.
Right now, the dominant story is simple: Large Language Models can do everything. They can plan, reason, remember, and execute, all through clever prompting. It’s a story that sells, but it’s also fragile. For prototypes, LLMs and prompts are fantastic. For systems that need to scale, integrate, and be trusted, they fall short.
That’s not a radical claim. It’s the same lesson software learned two decades ago. Monolithic architectures eventually collapsed under their own weight, giving rise to microservices. AI is heading toward the same inflection point.
The Pattern We’ve Seen Before
Two decades back, most software was built as monoliths. Everything lived in one codebase: business logic, data pipelines, user flows. It worked until it didn’t.
Small bugs toppled whole systems.
Teams slowed down because of code collisions.
Scaling was impossible without massive rewrites.
The shift to microservices wasn’t born out of brilliance or vision. It was simply the natural response to complexity. Split large systems into smaller ones, orchestrate them, and suddenly scale and resilience became achievable.
The same logic applies to AI.
The Monolith Problem in AI
Today’s AI landscape is dominated by single-model thinking. An entire system gets built around one LLM:
Need reasoning? Prompt it.
Need memory? Prompt it.
Need planning or tool-use? Prompt it again.
It’s clever in the short term, brittle in the long term. Black-box systems can’t explain themselves. They can’t be trusted to behave deterministically across thousands of executions. They can’t be traced when something goes wrong.
The result is AI monoliths all over again, impressive until they collapse under real-world demands.
Toward Modular Cognition
If the monolith is the problem, modularity is the path forward. That means building AI systems that look less like giant opaque models and more like orchestrated networks of smaller, specialized parts:
Agents with specific, testable roles.
Orchestrators that decide which agent acts next.
Memory layers with scope, decay, and retrieval logic.
Fork/Join structures for parallel exploration and reconvergence.
Traceability embedded at every step.
This isn’t revolutionary. It’s simply the extension of patterns software already solved. The difference is applying them to reasoning and cognition.
Why Proof Doesn’t Land
Here’s the paradox: even when modular approaches can be demonstrated — with reasoning traces, confidence scores, and memory logs — they often fail to attract attention.
The reason is simple: the industry is addicted to spectacle. Demos that “feel magical” outshine proofs that “work reliably.” Marketing dominates over engineering.
That tension isn’t unique to AI, but in a field moving this quickly, it’s amplified.
A Field Flooded with Noise
For those who worked in AI before the LLM explosion, this new wave is disorienting. Overnight, the space became crowded with newcomers chasing hype cycles. A thousand startups wrap prompts around proprietary APIs, claiming breakthroughs that dissolve under scrutiny.
Meanwhile, old problems remain unsolved:
Traceability: Why did the system produce this output?
Determinism: Will it produce the same tomorrow?
Scalability: Can it run across thousands of users without drift?
Integration: Can it meet the standards real businesses require?
Prompts can’t answer these questions. Architectures can.
The Quiet Work That Lasts
History suggests the noise will fade. The architectures that survive won’t be the loudest or flashiest. They’ll be the ones that deliver traceable, deterministic, and explainable performance at scale.
That shift may feel slow, but it’s inevitable. Just as monoliths gave way to microservices, AI monoliths will give way to modular cognition.
The path forward isn’t glamorous. It’s not about clever hacks or viral demos. It’s about the unglamorous work of building systems that can be trusted.
Closing
AI is at the same point software was two decades ago. The demos look magical, but the cracks are visible. Complexity always wins. When it does, the industry will rediscover what engineers already know: modularity beats monoliths, every time.
This is exactly the philosophy behind OrKa, a framework for orchestrating modular, explainable reasoning across agents and memory layers. It’s not about chasing hype — it’s about building the infrastructure that will still be standing when the dust settles.
OrKA-reasoning
Orka (26 Part Series)
1
🧠 Orka: A Manifesto for transparent Intelligence
2
🧠 OrKa run locally
...
22 more parts...
3
🧠 OrKa Diaries: The Origin of a Reasoning Engine (Episode 1)
4
🧠 I Couldn't Take It Anymore. So I Built OrKa.
5
🧠 My First Rosetta Stone: When OrKa Proved AI Can Think Structurally
6
🧠 Real-Time Cognition: Building an Observable TUI for AI Memory in OrKa
7
🧠 Emergent Thought Through Looped Conflict
8
🧠 Beyond Structured Chaos
9
🧠 OrKa Cognitive Iteration Benchmark. Full Technical Report
10
🧠 LoopNode: How OrKa Orchestrates Iterated Thought Until Agreement Emerges
11
🧠 How AI Agents Learned to Agree Through Structured Debate
12
🧠 How DeepSeek-R1 Transformed AI Reasoning Economics
13
🧠OrKa-ui show what is the benefit of having TTL at memory level in orka-reasoning
14
🧠 orka-reasoning TUI show TTL and memory storage.
15
🧠 Why LangGraph Loops Stall Thought and OrKa Doesn't
16
🧠 When a System Notices Itself
17
🧠 Local, Trustable and Explainable AI. Not a dream!
18
🧠 I Didn't Know Where It Was Going. I Just Kept Going.
19
🧠OrKa onboarding: example suite, guided tour, and trace replay
20
🧠Can AI Learn to Care?
21
🧠OrKA-Reasoning: How Workflow Execution Really Works
22
🧠From 77% to 92%: How Orka-Reasoning Turns GPT-oss:20B Into a Math Reasoning Powerhouse
23
🧠Loop of Truth: From Loose Tricks to Structured Reasoning
24
🧠Minsky’s six memory types as Orka preset memory.
25
🧠GraphScout: Self-Discovering Paths in OrKA
26
🧠Building AI Beyond the Hype
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
•
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Mak Sò
Follow
I'm Marco Somma, a cognitive systems architect, technologist, and builder of modular reasoning tools. I’m the creator of OrKa – an open framework for orchestrating explainable AI agents.
Location
Barcelona, Spain
Education
Not at all
Work
AI Engineer
Joined
Apr 18, 2025
More from Mak Sò
🧠GraphScout: Self-Discovering Paths in OrKA
#systemdesign
#architecture
#algorithms
#ai
🧠Minsky’s six memory types as Orka preset memory.
#ai
#opensource
#rag
#llm
🧠Loop of Truth: From Loose Tricks to Structured Reasoning
#ai
#redis
#opensource
#machinelearning
💎 DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community — A space to discuss and keep up software development and manage your software career
Home
DEV++
Welcome Thread
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem — the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community © 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account