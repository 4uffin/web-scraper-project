Setting Up Kubernetes on Windows with Minikube (Step-by-Step Guide) - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
DUMB DEV Community
Follow
Memes and software development shitposting
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SRE‚Äîthe hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project ‚Äî features, bugs, performance, self-hosting.
Security Forem
Follow
Your central hub for all things security. From ethical hacking and CTFs to GRC and career development, for beginners and pros alike
Open Forem
Follow
A general discussion space for the Forem community. If it doesn't have a home elsewhere, it belongs here
Crypto Forem
Follow
A collaborative community for all things Crypto‚Äîfrom Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
Abhishek Korde
Posted on Sep 20
Setting Up Kubernetes on Windows with Minikube (Step-by-Step Guide)
#kubernetes
#docker
#containers
#cloud
üåÄ Prerequisites: Kubernetes, Docker, Containers, Cloud
There are many tools for managing the cluster in kubernetes:
Minikube ‚Üí Local dev cluster (single-node).
Kind (Kubernetes in Docker) ‚Üí Lightweight, fast local clusters in Docker containers.
k3s ‚Üí Lightweight Kubernetes distribution for edge/IoT.
Kops ‚Üí Production cluster provisioning (mostly AWS).
Kubadm ‚Üí Official tool to bootstrap a Kubernetes cluster (often used for bare-metal or custom setup).
Rancher ‚Üí GUI and management for multiple Kubernetes clusters.
OpenShift ‚Üí Red Hat‚Äôs enterprise Kubernetes platform.
Managed services ‚Üí EKS (AWS), GKE (Google Cloud), AKS (Azure).
Some of them are used for production, while others are mainly for local development.
Today, we are using minikub(obviously) for our local development.
Step 1: Install Minikube
The first step is to install Minikube using the link below, or by searching ‚ÄúMinikube install‚Äù in your browser.
link of installing the minikube:Minikube Install
Step 2: Install kubectl
The next step is to install kubectl. kubectl is the command-line tool for Kubernetes, and it allows us to interact directly with the cluster.
To install kubectl you can use below link or directly search in browser as kubectl install.
link for installing the kubectl:Kubectl Install
Choose the installation instructions for your platform (Linux, macOS, or Windows).
Step 3: Install Docker Desktop
Minikube runs the Kubernetes cluster inside a Docker container (when you use the --driver=docker).
You can install Docker Desktop either from the official website (browser download) or from the Microsoft Store.
Docker Desktop is a free platform (but not fully open source).
If your system does not support Hyper-V, you can use WSL2 as the backend for Docker.
In Docker Desktop ‚Üí Settings ‚Üí Resources ‚Üí WSL Integration ‚Üí Clicking ‚ÄúRefetch distros‚Äù helps Docker detect available Linux distributions.
If no distro is listed, you need to install a Linux distro like Ubuntu from the Microsoft Store (or manually).
Step 4: Start Minikube
Now that the basic setup is complete, we can create the Kubernetes cluster using the command below:
minikube start
Enter fullscreen mode
Exit fullscreen mode
This creates a single-node Kubernetes cluster.
On Windows, instead of VirtualBox/Hyper-V, it runs inside Docker containers.
‚ö†Ô∏è Sometimes, Minikube fails because it pulls images from registry.k8s.io. Use a faster mirror:
In this case, use the following command:
minikube start --driver=docker --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers
Enter fullscreen mode
Exit fullscreen mode
This flag tells Minikube to use the Alibaba Cloud mirror instead, which is often faster and more reliable.
Step 5: Verify the Cluster
To list all Pods in the cluster (including system Pods), use the command:
kubectl get pods -A
Enter fullscreen mode
Exit fullscreen mode
It will show like this.
These are the default system pods that Minikube runs inside the kube-system namespace:
coredns ‚Üí Handles DNS (service discovery inside the cluster).
etcd-minikube ‚Üí Key-value database that stores the entire Kubernetes cluster state.
kube-apiserver-minikube ‚Üí The main API server; all kubectl commands talk to this.
kube-controller-manager-minikube ‚Üí Ensures desired state (like creating pods if one fails).
kube-proxy ‚Üí Manages networking rules for pod-to-pod and pod-to-service communication.
kube-scheduler ‚Üí Assigns new pods to nodes.
storage-provisioner ‚Üí Automatically provisions storage volumes when needed.
‚úÖ All are in Running status ‚Üí means your Minikube cluster is healthy and ready to run workloads.
To get all the nodes in your cluster and their status using below command:
kubectl get nodes
Enter fullscreen mode
Exit fullscreen mode
The output of the above command looks like this:
NAME ‚Üí minikube ‚Üí This is your Kubernetes node (a VM/Container created by Minikube).
STATUS ‚Üí Ready ‚Üí The node is healthy and can run pods.
ROLES ‚Üí control-plane ‚Üí This node acts as the master/control plane (manages the cluster).
AGE ‚Üí 5m3s ‚Üí Node has been running for about 5 minutes.
VERSION ‚Üí v1.34.0 ‚Üí The Kubernetes version running on this node.
‚úÖ In short ‚Üí Your Minikube cluster has 1 control-plane node, it‚Äôs healthy, and ready to schedule pods.
After confirming that our nodes are up and running.
Step 6: What is a Pod?
Now we have to install pod. Inside that pod our application will run.
First, let‚Äôs understand what a Pod is.?
A Pod is the smallest deployable unit in Kubernetes.
A Pod is essentially a definition of how to run one or more containers.
The specification is written in a YAML manifest (like pod.yml), similar to how you give instructions in docker run.
Most Pods contain a single container, but sometimes Pods have:
Sidecar containers (for logging, monitoring, etc.).
Init containers (run before the main container).
Kubernetes assigns an IP address to the Pod, not to each individual container. All containers in the Pod share the same Pod IP and network namespace.
Step 7: Deploy Your First Application (Nginx)
We will now deploy our first Nginx application. The first step is to create a Pod by writing a pod.yml file.
As I told earlier pod is basically yaml file so we will write first basic yaml file that will help to understand the structure.
If you are on Windows, use the following command and paste the given YAML script:
notepad pod.yml
Enter fullscreen mode
Exit fullscreen mode
because vi does not work on Windows (it is available only on Linux systems).
apiVersion: v1
kind: Pod
metadata:
name: nginx
spec:
containers:
- name: nginx
image: nginx:1.14.2
ports:
- containerPort: 80
Enter fullscreen mode
Exit fullscreen mode
üîé In short:
You‚Äôre creating a Pod called nginx.
Inside it, you run 1 container using the image nginx:1.14.2.
That container exposes port 80 (default HTTP port).
‚úÖ This YAML defines the smallest deployable unit in Kubernetes (a Pod) running Nginx.
After writing yml file we have to create application on pod using give command:
kubectl create -f pod.yml
Enter fullscreen mode
Exit fullscreen mode
After creating the application, check whether it is running using the following command:
kubectl get pods
Enter fullscreen mode
Exit fullscreen mode
and If we want to get entire details of pods with IP address of pod then use below command:
kubectl get pods -o wide
Enter fullscreen mode
Exit fullscreen mode
Step 8: Access the Minikube Cluster
If you want to log in to the cluster where the application is running, use the command:
minikube ssh
Enter fullscreen mode
Exit fullscreen mode
It opens an SSH session into the VM / Docker container that Minikube created to run your Kubernetes cluster.
This lets you log in directly inside the Minikube node (the machine acting as your Kubernetes cluster).
üõ† What you can do inside:
Run Linux commands (because Minikube runs on a Linux environment).
Check processes, logs, or system info.
Use tools like docker ps (to see the containers Kubernetes is running internally).
Troubleshoot networking or storage inside the cluster.
After that, test if the Pod‚Äôs internal IP is reachable and serving traffic by using curl .
curl <POD_IP>
Enter fullscreen mode
Exit fullscreen mode
This ip address of pod where your application is running.
If you see the Nginx welcome page, üéâ congratulations‚Äîyour app is running successfully!
‚úÖ Conclusion
You now have:
Minikube installed locally.
kubectl configured to interact with your cluster.
A working Nginx Pod running in Kubernetes.
This setup is perfect for learning and local development before moving on to production tools like Kops, EKS, GKE, or AKS.
‚ú® Polished version:
To explore all commonly used kubectl commands, refer to the official Kubernetes cheatsheet:
Kubectl sheet sheet
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
‚Ä¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
Abhishek Korde
Follow
eager to learn devops
Location
Bangalore
Work
Devops engineer
Joined
Mar 17, 2025
More from Abhishek Korde
üîé Kubernetes Architecture Demystified: A Beginner-Friendly Guide
#kubernetes
#devops
#cloud
#architecture
Getting Started with AWS IAM: Managing Users, Groups, and Policies for Secure Access Control.
#devops
#aws
#cloud
#linux
what is jenkins and How to configure docker as agent on Jenkins.
#jenkins
#devops
#cloud
#docker
üíé DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community ‚Äî A space to discuss and keep up software development and manage your software career
Home
Welcome Thread
Reading List
Tags
About
Contact
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community ¬© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account