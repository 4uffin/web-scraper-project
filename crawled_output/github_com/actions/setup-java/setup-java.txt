GitHub - actions/setup-java: Set up your GitHub Actions workflow with a specific version of Java
Skip to content
Navigation Menu
Toggle navigation
Sign in
Appearance settings
Platform
GitHub Copilot
Write better code with AI
GitHub Spark
New
Build and deploy intelligent apps
GitHub Models
New
Manage and compare prompts
GitHub Advanced Security
Find and fix vulnerabilities
Actions
Automate any workflow
Codespaces
Instant dev environments
Issues
Plan and track work
Code Review
Manage code changes
Discussions
Collaborate outside of code
Code Search
Find more, search less
Explore
Why GitHub
Documentation
GitHub Skills
Blog
Integrations
GitHub Marketplace
MCP Registry
View all features
Solutions
By company size
Enterprises
Small and medium teams
Startups
Nonprofits
By use case
DevSecOps
DevOps
CI/CD
View all use cases
By industry
Healthcare
Financial services
Manufacturing
Government
View all industries
View all solutions
Resources
Topics
AI
DevOps
Security
Software Development
View all
Explore
Learning Pathways
Events & Webinars
Ebooks & Whitepapers
Customer Stories
Partners
Executive Insights
Open Source
GitHub Sponsors
Fund open source developers
The ReadME Project
GitHub community articles
Repositories
Topics
Trending
Collections
Enterprise
Enterprise platform
AI-powered developer platform
Available add-ons
GitHub Advanced Security
Enterprise-grade security features
Copilot for business
Enterprise-grade AI features
Premium Support
Enterprise-grade 24/7 support
Pricing
Search or jump to...
Search code, repositories, users, issues, pull requests...
Search
Clear
Search syntax tips
Provide feedback
We read every piece of feedback, and take your input very seriously.
Include my email address so I can be contacted
Cancel
Submit feedback
Saved searches
Use saved searches to filter your results more quickly
Name
Query
To see all available qualifiers, see our documentation.
Cancel
Create saved search
Sign in
Sign up
Appearance settings
Resetting focus
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
actions
/
setup-java
Public
Notifications
You must be signed in to change notification settings
Fork
804
Star
1.8k
Set up your GitHub Actions workflow with a specific version of Java
License
MIT license
1.8k
stars
804
forks
Branches
Tags
Activity
Star
Notifications
You must be signed in to change notification settings
Code
Issues
48
Pull requests
38
Actions
Projects
0
Security
Uh oh!
There was an error while loading. Please reload this page.
Insights
Additional navigation options
Code
Issues
Pull requests
Actions
Projects
Security
Insights
actions/setup-java
Use this GitHub action with your projectAdd this Action to an existing workflow or create a new oneView on Marketplace mainBranchesTagsGo to fileCodeOpen more actions menuFolders and filesNameNameLast commit messageLast commit dateLatest commit History440 Commits.github.github  .licenses/npm.licenses/npm  __tests____tests__  distdist  docsdocs  srcsrc  .eslintignore.eslintignore  .eslintrc.js.eslintrc.js  .gitattributes.gitattributes  .gitignore.gitignore  .licensed.yml.licensed.yml  .prettierignore.prettierignore  .prettierrc.js.prettierrc.js  CODE_OF_CONDUCT.mdCODE_OF_CONDUCT.md  LICENSELICENSE  README.mdREADME.md  action.ymlaction.yml  jest.config.jsjest.config.js  package-lock.jsonpackage-lock.json  package.jsonpackage.json  tsconfig.jsontsconfig.json  View all filesRepository files navigationREADMECode of conductMIT licenseSecuritySetup Java
The setup-java action provides the following functionality for GitHub Actions runners:
Downloading and setting up a requested version of Java. See Usage for a list of supported distributions.
Extracting and caching custom version of Java from a local file.
Configuring runner for publishing using Apache Maven.
Configuring runner for publishing using Gradle.
Configuring runner for using GPG private key.
Registering problem matchers for error output.
Caching dependencies managed by Apache Maven.
Caching dependencies managed by Gradle.
Caching dependencies managed by sbt.
Maven Toolchains declaration for specified JDK versions.
This action allows you to work with Java and Scala projects.
Breaking changes in V5
Upgraded action from node20 to node24
Make sure your runner is on version v2.327.1 or later to ensure compatibility with this release Release Notes
For more details,
see the full release notes on the releases page
V2 vs V1
V2 supports custom distributions and provides support for Azul Zulu OpenJDK, Eclipse Temurin and AdoptOpenJDK
out of the box. V1 supports only Azul Zulu OpenJDK.
V2 requires you to specify distribution along with the version. V1 defaults to Azul Zulu OpenJDK, only version input is required. Follow the migration guide to switch from V1 to V2.
For information about the latest releases, recent updates, and newly supported distributions, please refer to the setup-java Releases.
Usage
java-version: The Java version that is going to be set up. Takes a whole or semver Java version. If not specified, the action will expect java-version-file input to be specified.
java-version-file: The path to a file containing java version. Supported file types are .java-version and .tool-versions. See more details in about .java-version-file.
distribution: (required) Java distribution.
java-package: The packaging variant of the chosen distribution. Possible values: jdk, jre, jdk+fx, jre+fx. Default value: jdk.
architecture: The target architecture of the package. Possible values: x86, x64, armv7, aarch64, ppc64le. Default value: Derived from the runner machine.
jdkFile: If a use-case requires a custom distribution setup-java uses the compressed JDK from the location pointed by this input and will take care of the installation and caching on the VM.
check-latest: Setting this option makes the action to check for the latest available version for the version spec.
cache: Quick setup caching for the dependencies managed through one of the predefined package managers. It can be one of "maven", "gradle" or "sbt".
cache-dependency-path: The path to a dependency file: pom.xml, build.gradle, build.sbt, etc. This option can be used with the cache option. If this option is omitted, the action searches for the dependency file in the entire repository. This option supports wildcards and a list of file names for caching multiple dependencies.
Maven options
The action has a bunch of inputs to generate maven's settings.xml on the fly and pass the values to Apache Maven GPG Plugin as well as Apache Maven Toolchains. See advanced usage for more.
overwrite-settings: By default action overwrites the settings.xml. In order to skip generation of file if it exists, set this to false.
server-id: ID of the distributionManagement repository in the pom.xml file. Default is github.
server-username: Environment variable name for the username for authentication to the Apache Maven repository. Default is GITHUB_ACTOR.
server-password: Environment variable name for password or token for authentication to the Apache Maven repository. Default is GITHUB_TOKEN.
settings-path: Maven related setting to point to the directory where the settings.xml file will be written. Default is ~/.m2.
gpg-private-key: GPG private key to import. Default is empty string.
gpg-passphrase: Environment variable name for the GPG private key passphrase. Default is GPG_PASSPHRASE.
mvn-toolchain-id: Name of Maven Toolchain ID if the default name of ${distribution}_${java-version} is not wanted.
mvn-toolchain-vendor: Name of Maven Toolchain Vendor if the default name of ${distribution} is not wanted.
Basic Configuration
Eclipse Temurin
steps:
- uses: actions/checkout@v5
- uses: actions/setup-java@v5
with:
distribution: 'temurin' # See 'Supported distributions' for available options
java-version: '21'
- run: java HelloWorldApp.java
Azul Zulu OpenJDK
steps:
- uses: actions/checkout@v5
- uses: actions/setup-java@v5
with:
distribution: 'zulu' # See 'Supported distributions' for available options
java-version: '21'
- run: java HelloWorldApp.java
Supported version syntax
The java-version input supports an exact version or a version range using SemVer notation:
major versions: 8, 11, 16, 17, 21
more specific versions: 8.0.282+8, 8.0.232, 11.0, 11.0.4, 17.0
early access (EA) versions: 15-ea, 15.0.0-ea
Supported distributions
Currently, the following distributions are supported:
Keyword
Distribution
Official site
License
temurin
Eclipse Temurin
Link
Link
zulu
Azul Zulu OpenJDK
Link
Link
adopt or adopt-hotspot
AdoptOpenJDK Hotspot
Link
Link
adopt-openj9
AdoptOpenJDK OpenJ9
Link
Link
liberica
Liberica JDK
Link
Link
microsoft
Microsoft Build of OpenJDK
Link
Link
corretto
Amazon Corretto Build of OpenJDK
Link
Link
semeru
IBM Semeru Runtime Open Edition
Link
Link
oracle
Oracle JDK
Link
Link
dragonwell
Alibaba Dragonwell JDK
Link
Link
sapmachine
SAP SapMachine JDK/JRE
Link
Link
graalvm
Oracle GraalVM
Link
Link
jetbrains
JetBrains Runtime
Link
Link
NOTE: The different distributors can provide discrepant list of available versions / supported configurations. Please refer to the official documentation to see the list of supported versions.
NOTE: AdoptOpenJDK got moved to Eclipse Temurin and won't be updated anymore. It is highly recommended to migrate workflows from adopt and adopt-openj9, to temurin and semeru respectively, to keep receiving software and security updates. See more details in the Good-bye AdoptOpenJDK post.
NOTE: For Azul Zulu OpenJDK architectures x64 and arm64 are mapped to x86 / arm with proper hw_bitness.
NOTE: To comply with the GraalVM Free Terms and Conditions (GFTC) license, it is recommended to use GraalVM JDK 17 version 17.0.12, as this is the only version of GraalVM JDK 17 available under the GFTC license. Additionally, it is encouraged to consider upgrading to GraalVM JDK 21, which offers the latest features and improvements.
Caching packages dependencies
The action has a built-in functionality for caching and restoring dependencies. It uses toolkit/cache under hood for caching dependencies but requires less configuration settings. Supported package managers are gradle, maven and sbt. The format of the used cache key is setup-java-${{ platform }}-${{ packageManager }}-${{ fileHash }}, where the hash is based on the following files:
gradle: **/*.gradle*, **/gradle-wrapper.properties, buildSrc/**/Versions.kt, buildSrc/**/Dependencies.kt, gradle/*.versions.toml, and **/versions.properties
maven: **/pom.xml
sbt: all sbt build definition files **/*.sbt, **/project/build.properties, **/project/**.scala, **/project/**.sbt
When the option cache-dependency-path is specified, the hash is based on the matching file. This option supports wildcards and a list of file names, and is especially useful for monorepos.
The workflow output cache-hit is set to indicate if an exact match was found for the key as actions/cache does.
The cache input is optional, and caching is turned off by default.
Caching gradle dependencies
steps:
- uses: actions/checkout@v5
- uses: actions/setup-java@v5
with:
distribution: 'temurin'
java-version: '21'
cache: 'gradle'
cache-dependency-path: | # optional
sub-project/*.gradle*
sub-project/**/gradle-wrapper.properties
- run: ./gradlew build --no-daemon
Caching maven dependencies
steps:
- uses: actions/checkout@v5
- uses: actions/setup-java@v5
with:
distribution: 'temurin'
java-version: '21'
cache: 'maven'
cache-dependency-path: 'sub-project/pom.xml' # optional
- name: Build with Maven
run: mvn -B package --file pom.xml
Caching sbt dependencies
steps:
- uses: actions/checkout@v5
- uses: actions/setup-java@v5
with:
distribution: 'temurin'
java-version: '21'
cache: 'sbt'
cache-dependency-path: | # optional
sub-project/build.sbt
sub-project/project/build.properties
- name: Build with SBT
run: sbt package
Cache segment restore timeout
Usually, cache gets downloaded in multiple segments of fixed sizes. Sometimes, a segment download gets stuck, which causes the workflow job to be stuck. The cache segment download timeout was introduced to solve this issue as it allows the segment download to get aborted and hence allows the job to proceed with a cache miss. The default value of the cache segment download timeout is set to 10 minutes and can be customized by specifying an environment variable named SEGMENT_DOWNLOAD_TIMEOUT_MINS with a timeout value in minutes.
env:
SEGMENT_DOWNLOAD_TIMEOUT_MINS: '5'
steps:
- uses: actions/checkout@v5
- uses: actions/setup-java@v5
with:
distribution: 'temurin'
java-version: '21'
cache: 'gradle'
- run: ./gradlew build --no-daemon
Check latest
In the basic examples above, the check-latest flag defaults to false. When set to false, the action tries to first resolve a version of Java from the local tool cache on the runner. If unable to find a specific version in the cache, the action will download a version of Java. Use the default or set check-latest to false if you prefer a faster more consistent setup experience that prioritizes trying to use the cached versions at the expense of newer versions sometimes being available for download.
If check-latest is set to true, the action first checks if the cached version is the latest one. If the locally cached version is not the most up-to-date, the latest version of Java will be downloaded. Set check-latest to true if you want the most up-to-date version of Java to always be used. Setting check-latest to true has performance implications as downloading versions of Java is slower than using cached versions.
For Java distributions that are not cached on Hosted images, check-latest always behaves as true and downloads Java on-flight. Check out Hosted Tool Cache for more details about pre-cached Java versions.
steps:
- uses: actions/checkout@v5
- uses: actions/setup-java@v5
with:
distribution: 'temurin'
java-version: '21'
check-latest: true
- run: java HelloWorldApp.java
Testing against different Java versions
jobs:
build:
runs-on: ubuntu-20.04
strategy:
matrix:
java: [ '8', '11', '17', '21' ]
name: Java ${{ matrix.Java }} sample
steps:
- uses: actions/checkout@v5
- name: Setup java
uses: actions/setup-java@v5
with:
distribution: '<distribution>'
java-version: ${{ matrix.java }}
- run: java HelloWorldApp.java
Install multiple JDKs
All configured Java versions are added to the PATH. The last one added to the PATH (i.e., the last JDK set up by this action) will be used as the default and available globally. Other Java versions can be accessed through environment variables such as 'JAVA_HOME_{{ MAJOR_VERSION }}_{{ ARCHITECTURE }}'. To use a specific Java version, set the JAVA_HOME environment variable accordingly and prepend its bin directory to the PATH to ensure it takes priority during execution.
steps:
- uses: actions/setup-java@v5
with:
distribution: '<distribution>'
java-version: |
8
11
15
Using Maven Toolchains
In the example above multiple JDKs are installed for the same job. The result after the last JDK is installed is a Maven Toolchains declaration containing references to all three JDKs. The values for id, version, and vendor of the individual Toolchain entries are the given input values for distribution and java-version (vendor being the combination of ${distribution}_${java-version}) by default.
Advanced Configuration
Selecting a Java distribution
Eclipse Temurin
Adopt
Zulu
Liberica
Microsoft
Amazon Corretto
Oracle
Alibaba Dragonwell
SapMachine
GraalVM
Installing custom Java package type
Installing custom Java architecture
Installing custom Java distribution from local file
Testing against different Java distributions
Testing against different platforms
Publishing using Apache Maven
Publishing using Gradle
Hosted Tool Cache
Modifying Maven Toolchains
Java Version File
Recommended permissions
When using the setup-java action in your GitHub Actions workflow, it is recommended to set the following permissions to ensure proper functionality:
permissions:
contents: read # access to check out code and install dependencies
License
The scripts and documentation in this project are released under the MIT License.
Contributions
Contributions are welcome! See Contributor's Guide
About
Set up your GitHub Actions workflow with a specific version of Java
Resources
Readme
License
MIT license
Code of conduct
Code of conduct
Security policy
Security policy
Uh oh!
There was an error while loading. Please reload this page.
Activity
Custom properties
Stars
1.8k
stars
Watchers
83
watching
Forks
804
forks
Report repository
Releases
48
v5.0.0
Latest
Aug 21, 2025
+ 47 releases
Packages
0
Uh oh!
There was an error while loading. Please reload this page.
Used by 983k
+ 982,859
Contributors
105
Uh oh!
There was an error while loading. Please reload this page.
+ 91 contributors
Languages
TypeScript
99.0%
Other
1.0%
Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Community
Docs
Contact
Manage cookies
Do not share my personal information
You can’t perform that action at this time.