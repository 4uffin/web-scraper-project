GitHub - actions/typescript-action: Create a TypeScript Action with tests, linting, workflow, publishing, and versioning
Skip to content
Navigation Menu
Toggle navigation
Sign in
Appearance settings
Platform
GitHub Copilot
Write better code with AI
GitHub Spark
New
Build and deploy intelligent apps
GitHub Models
New
Manage and compare prompts
GitHub Advanced Security
Find and fix vulnerabilities
Actions
Automate any workflow
Codespaces
Instant dev environments
Issues
Plan and track work
Code Review
Manage code changes
Discussions
Collaborate outside of code
Code Search
Find more, search less
Explore
Why GitHub
Documentation
GitHub Skills
Blog
Integrations
GitHub Marketplace
MCP Registry
View all features
Solutions
By company size
Enterprises
Small and medium teams
Startups
Nonprofits
By use case
DevSecOps
DevOps
CI/CD
View all use cases
By industry
Healthcare
Financial services
Manufacturing
Government
View all industries
View all solutions
Resources
Topics
AI
DevOps
Security
Software Development
View all
Explore
Learning Pathways
Events & Webinars
Ebooks & Whitepapers
Customer Stories
Partners
Executive Insights
Open Source
GitHub Sponsors
Fund open source developers
The ReadME Project
GitHub community articles
Repositories
Topics
Trending
Collections
Enterprise
Enterprise platform
AI-powered developer platform
Available add-ons
GitHub Advanced Security
Enterprise-grade security features
Copilot for business
Enterprise-grade AI features
Premium Support
Enterprise-grade 24/7 support
Pricing
Search or jump to...
Search code, repositories, users, issues, pull requests...
Search
Clear
Search syntax tips
Provide feedback
We read every piece of feedback, and take your input very seriously.
Include my email address so I can be contacted
Cancel
Submit feedback
Saved searches
Use saved searches to filter your results more quickly
Name
Query
To see all available qualifiers, see our documentation.
Cancel
Create saved search
Sign in
Sign up
Appearance settings
Resetting focus
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
actions
/
typescript-action
Public template
Notifications
You must be signed in to change notification settings
Fork
552
Star
2.3k
Create a TypeScript Action with tests, linting, workflow, publishing, and versioning
github.com/actions
License
MIT license
2.3k
stars
552
forks
Branches
Tags
Activity
Star
Notifications
You must be signed in to change notification settings
Code
Issues
3
Pull requests
2
Actions
Projects
0
Security
Uh oh!
There was an error while loading. Please reload this page.
Insights
Additional navigation options
Code
Issues
Pull requests
Actions
Projects
Security
Insights
actions/typescript-action
mainBranchesTagsGo to fileCodeOpen more actions menuFolders and filesNameNameLast commit messageLast commit dateLatest commit History914 Commits.devcontainer.devcontainer  .github.github  .licenses/npm.licenses/npm  .vscode.vscode  __fixtures____fixtures__  __tests____tests__  badgesbadges  distdist  scriptscript  srcsrc  .env.example.env.example  .gitattributes.gitattributes  .gitignore.gitignore  .licensed.yml.licensed.yml  .markdown-lint.yml.markdown-lint.yml  .node-version.node-version  .prettierignore.prettierignore  .prettierrc.yml.prettierrc.yml  .yaml-lint.yml.yaml-lint.yml  CODEOWNERSCODEOWNERS  LICENSELICENSE  README.mdREADME.md  action.ymlaction.yml  actionlint.ymlactionlint.yml  eslint.config.mjseslint.config.mjs  jest.config.jsjest.config.js  package-lock.jsonpackage-lock.json  package.jsonpackage.json  rollup.config.tsrollup.config.ts  tsconfig.base.jsontsconfig.base.json  tsconfig.eslint.jsontsconfig.eslint.json  tsconfig.jsontsconfig.json  View all filesRepository files navigationREADMECode of conductMIT licenseSecurityCreate a GitHub Action Using TypeScript
Use this template to bootstrap the creation of a TypeScript action. 🚀
This template includes compilation support, tests, a validation workflow,
publishing, and versioning guidance.
If you are new, there's also a simpler introduction in the
Hello world JavaScript action repository.
Create Your Own Action
To create your own action, you can use this repository as a template! Just
follow the below instructions:
Click the Use this template button at the top of the repository
Select Create a new repository
Select an owner and name for your new repository
Click Create repository
Clone your new repository
Important
Make sure to remove or update the CODEOWNERS file! For
details on how to use this file, see
About code owners.
Initial Setup
After you've cloned the repository to your local machine or codespace, you'll
need to perform some initial setup steps before you can develop your action.
Note
You'll need to have a reasonably modern version of
Node.js handy (20.x or later should work!). If you are
using a version manager like nodenv or
fnm, this template has a .node-version
file at the root of the repository that can be used to automatically switch to
the correct version when you cd into the repository. Additionally, this
.node-version file is used by GitHub Actions in any actions/setup-node
actions.
🛠️ Install the dependencies
npm install
🏗️ Package the TypeScript for distribution
npm run bundle
✅ Run the tests
$ npm test
PASS
./index.test.js
✓ throws invalid number (3ms)
✓ wait 500 ms (504ms)
✓ test runs (95ms)
...
Update the Action Metadata
The action.yml file defines metadata about your action, such as
input(s) and output(s). For details about this file, see
Metadata syntax for GitHub Actions.
When you copy this repository, update action.yml with the name, description,
inputs, and outputs for your action.
Update the Action Code
The src/ directory is the heart of your action! This contains the
source code that will be run when your action is invoked. You can replace the
contents of this directory with your own code.
There are a few things to keep in mind when writing your action code:
Most GitHub Actions toolkit and CI/CD operations are processed asynchronously.
In main.ts, you will see that the action is run in an async function.
import * as core from '@actions/core'
//...
async function run() {
try {
//...
} catch (error) {
core.setFailed(error.message)
}
}
For more information about the GitHub Actions toolkit, see the
documentation.
So, what are you waiting for? Go ahead and start customizing your action!
Create a new branch
git checkout -b releases/v1
Replace the contents of src/ with your action code
Add tests to __tests__/ for your source code
Format, test, and build the action
npm run all
This step is important! It will run rollup to
build the final JavaScript action code with all dependencies included. If
you do not run this step, your action will not work correctly when it is
used in a workflow.
(Optional) Test your action locally
The @github/local-action utility
can be used to test your action locally. It is a simple command-line tool
that "stubs" (or simulates) the GitHub Actions Toolkit. This way, you can run
your TypeScript action locally without having to commit and push your changes
to a repository.
The local-action utility can be run in the following ways:
Visual Studio Code Debugger
Make sure to review and, if needed, update
.vscode/launch.json
Terminal/Command Prompt
# npx @github/local action <action-yaml-path> <entrypoint> <dotenv-file>
npx @github/local-action . src/main.ts .env
You can provide a .env file to the local-action CLI to set environment
variables used by the GitHub Actions Toolkit. For example, setting inputs and
event payload data used by your action. For more information, see the example
file, .env.example, and the
GitHub Actions Documentation.
Commit your changes
git add .
git commit -m "My first action is ready!"
Push them to your repository
git push -u origin releases/v1
Create a pull request and get feedback on your action
Merge the pull request into the main branch
Your action is now published! 🚀
For information about versioning your action, see
Versioning
in the GitHub Actions toolkit.
Validate the Action
You can now validate the action by referencing it in a workflow file. For
example, ci.yml demonstrates how to reference an
action in the same repository.
steps:
- name: Checkout
id: checkout
uses: actions/checkout@v4
- name: Test Local Action
id: test-action
uses: ./
with:
milliseconds: 1000
- name: Print Output
id: output
run: echo "${{ steps.test-action.outputs.time }}"
For example workflow runs, check out the
Actions tab! 🚀
Usage
After testing, you can create version tag(s) that developers can use to
reference different stable versions of your action. For more information, see
Versioning
in the GitHub Actions toolkit.
To include the action in a workflow in another repository, you can use the
uses syntax with the @ symbol to reference a specific branch, tag, or commit
hash.
steps:
- name: Checkout
id: checkout
uses: actions/checkout@v4
- name: Test Local Action
id: test-action
uses: actions/typescript-action@v1 # Commit with the `v1` tag
with:
milliseconds: 1000
- name: Print Output
id: output
run: echo "${{ steps.test-action.outputs.time }}"
Publishing a New Release
This project includes a helper script, script/release
designed to streamline the process of tagging and pushing new releases for
GitHub Actions.
GitHub Actions allows users to select a specific version of the action to use,
based on release tags. This script simplifies this process by performing the
following steps:
Retrieving the latest release tag: The script starts by fetching the most
recent SemVer release tag of the current branch, by looking at the local data
available in your repository.
Prompting for a new release tag: The user is then prompted to enter a new
release tag. To assist with this, the script displays the tag retrieved in
the previous step, and validates the format of the inputted tag (vX.X.X). The
user is also reminded to update the version field in package.json.
Tagging the new release: The script then tags a new release and syncs the
separate major tag (e.g. v1, v2) with the new release tag (e.g. v1.0.0,
v2.1.2). When the user is creating a new major release, the script
auto-detects this and creates a releases/v# branch for the previous major
version.
Pushing changes to remote: Finally, the script pushes the necessary
commits, tags and branches to the remote repository. From here, you will need
to create a new release in GitHub so users can easily reference the new tags
in their workflows.
Dependency License Management
This template includes a GitHub Actions workflow,
licensed.yml, that uses
Licensed to check for dependencies with
missing or non-compliant licenses. This workflow is initially disabled. To
enable the workflow, follow the below steps.
Open licensed.yml
Uncomment the following lines:
# pull_request:
#
branches:
#
- main
# push:
#
branches:
#
- main
Save and commit the changes
Once complete, this workflow will run any time a pull request is created or
changes pushed directly to main. If the workflow detects any dependencies with
missing or non-compliant licenses, it will fail the workflow and provide details
on the issue(s) found.
Updating Licenses
Whenever you install or update dependencies, you can use the Licensed CLI to
update the licenses database. To install Licensed, see the project's
Readme.
To update the cached licenses, run the following command:
licensed cache
To check the status of cached licenses, run the following command:
licensed status
About
Create a TypeScript Action with tests, linting, workflow, publishing, and versioning
github.com/actions
Topics
template
typescript
github-actions
Resources
Readme
License
MIT license
Code of conduct
Code of conduct
Security policy
Security policy
Uh oh!
There was an error while loading. Please reload this page.
Activity
Custom properties
Stars
2.3k
stars
Watchers
44
watching
Forks
552
forks
Report repository
Uh oh!
There was an error while loading. Please reload this page.
Contributors
76
+ 62 contributors
Languages
TypeScript
38.1%
Shell
37.3%
JavaScript
24.6%
Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Community
Docs
Contact
Manage cookies
Do not share my personal information
You can’t perform that action at this time.