GitHub - actions/container-toolkit-action: Template repo for creating container actions using https://github.com/actions/toolkit/
Skip to content
Navigation Menu
Toggle navigation
Sign in
Appearance settings
Platform
GitHub Copilot
Write better code with AI
GitHub Spark
New
Build and deploy intelligent apps
GitHub Models
New
Manage and compare prompts
GitHub Advanced Security
Find and fix vulnerabilities
Actions
Automate any workflow
Codespaces
Instant dev environments
Issues
Plan and track work
Code Review
Manage code changes
Discussions
Collaborate outside of code
Code Search
Find more, search less
Explore
Why GitHub
Documentation
GitHub Skills
Blog
Integrations
GitHub Marketplace
MCP Registry
View all features
Solutions
By company size
Enterprises
Small and medium teams
Startups
Nonprofits
By use case
DevSecOps
DevOps
CI/CD
View all use cases
By industry
Healthcare
Financial services
Manufacturing
Government
View all industries
View all solutions
Resources
Topics
AI
DevOps
Security
Software Development
View all
Explore
Learning Pathways
Events & Webinars
Ebooks & Whitepapers
Customer Stories
Partners
Executive Insights
Open Source
GitHub Sponsors
Fund open source developers
The ReadME Project
GitHub community articles
Repositories
Topics
Trending
Collections
Enterprise
Enterprise platform
AI-powered developer platform
Available add-ons
GitHub Advanced Security
Enterprise-grade security features
Copilot for business
Enterprise-grade AI features
Premium Support
Enterprise-grade 24/7 support
Pricing
Search or jump to...
Search code, repositories, users, issues, pull requests...
Search
Clear
Search syntax tips
Provide feedback
We read every piece of feedback, and take your input very seriously.
Include my email address so I can be contacted
Cancel
Submit feedback
Saved searches
Use saved searches to filter your results more quickly
Name
Query
To see all available qualifiers, see our documentation.
Cancel
Create saved search
Sign in
Sign up
Appearance settings
Resetting focus
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
actions
/
container-toolkit-action
Public template
generated from actions/container-action
Notifications
You must be signed in to change notification settings
Fork
28
Star
145
Template repo for creating container actions using https://github.com/actions/toolkit/
License
MIT license
145
stars
28
forks
Branches
Tags
Activity
Star
Notifications
You must be signed in to change notification settings
Code
Issues
0
Pull requests
0
Actions
Projects
0
Security
Uh oh!
There was an error while loading. Please reload this page.
Insights
Additional navigation options
Code
Issues
Pull requests
Actions
Projects
Security
Insights
actions/container-toolkit-action
mainBranchesTagsGo to fileCodeOpen more actions menuFolders and filesNameNameLast commit messageLast commit dateLatest commit History357 Commits.devcontainer.devcontainer  .github.github  .vscode.vscode  __fixtures____fixtures__  __tests____tests__  badgesbadges  distdist  srcsrc  .checkov.yaml.checkov.yaml  .gitattributes.gitattributes  .gitignore.gitignore  .licensed.yml.licensed.yml  .markdown-lint.yml.markdown-lint.yml  .node-version.node-version  .prettierignore.prettierignore  .prettierrc.yml.prettierrc.yml  .yaml-lint.yml.yaml-lint.yml  CODEOWNERSCODEOWNERS  DockerfileDockerfile  LICENSELICENSE  README.mdREADME.md  action.ymlaction.yml  eslint.config.mjseslint.config.mjs  jest.config.jsjest.config.js  package-lock.jsonpackage-lock.json  package.jsonpackage.json  rollup.config.tsrollup.config.ts  tsconfig.base.jsontsconfig.base.json  tsconfig.eslint.jsontsconfig.eslint.json  tsconfig.jsontsconfig.json  View all filesRepository files navigationREADMECode of conductMIT licenseSecurityCreate a Container Action with the GitHub Actions Toolkit
Use this template to bootstrap the creation of a container action with the
GitHub Actions toolkit. 🚀
This template includes compilation support, tests, a validation workflow,
publishing, and versioning guidance.
For more information on the GitHub Actions toolkit, see the
actions/toolkit repository
Create Your Own Action
To create your own action, you can use this repository as a template! Just
follow the below instructions:
Click the Use this template button at the top of the repository
Select Create a new repository
Select an owner and name for your new repository
Click Create repository
Clone your new repository
Important
Make sure to remove or update the CODEOWNERS file! For
details on how to use this file, see
About code owners.
Initial Setup
After you've cloned the repository to your local machine or codespace, you'll
need to perform some initial setup steps before you can develop your action.
Note
You'll need to have a reasonably modern version of
Node.js and
Docker handy (Node.js v20.x or later
and Docker engine v20+ or later should work!). If you are using a version
manager like nodenv or
fnm, this template has a .node-version
file at the root of the repository that can be used to automatically switch to
the correct version when you cd into the repository. Additionally, this
.node-version file is used by GitHub Actions in any actions/setup-node
actions.
🛠️ Install the dependencies
npm install
🏗️ Package the TypeScript for distribution
npm run bundle
✅ Run the tests
$ npm test
PASS
./index.test.js
✓ throws invalid number (3ms)
✓ wait 500 ms (504ms)
✓ test runs (95ms)
...
🛠️ Build the container
Make sure to replace actions/container-toolkit-action with an appropriate
label for your container.
docker build -t actions/container-toolkit-action .
✅ Test the container
You can pass individual environment variables using the --env or -e flag.
$ docker run --env INPUT_MILLISECONDS=2000 actions/container-toolkit-action
::debug::The event payload: {}
16:19:19 GMT+0000 (Coordinated Universal Time)
16:19:21 GMT+0000 (Coordinated Universal Time)
::set-output name=time::16:19:21 GMT+0000 (Coordinated Universal Time)
Or you can pass a file with environment variables using --env-file.
$ echo "INPUT_MILLISECONDS=2000" > ./.env.test
$ docker run --env-file ./.env.test actions/container-toolkit-action
::debug::The event payload: {}
16:19:19 GMT+0000 (Coordinated Universal Time)
16:19:21 GMT+0000 (Coordinated Universal Time)
::set-output name=time::16:19:21 GMT+0000 (Coordinated Universal Time)
Update the Action Metadata
The action.yml file defines metadata about your action, such as
input(s) and output(s). For details about this file, see
Metadata syntax for GitHub Actions.
When you copy this repository, update action.yml with the name, description,
inputs, and outputs for your action.
Update the Action Code
Update the TypeScript Source
The src/ directory is the heart of your action! This contains the
source code that will be run when your action is invoked. You can replace the
contents of this directory with your own code.
There are a few things to keep in mind when writing your action code:
Most GitHub Actions toolkit and CI/CD operations are processed asynchronously.
In main.ts, you will see that the action is run in an async function.
import * as core from '@actions/core'
//...
export async function run(): Promise<void> {
try {
//...
} catch (error) {
core.setFailed(error.message)
}
}
For more information about the GitHub Actions toolkit, see the
documentation.
Update the Container
In this template, the container action runs a Node.js script,
node /dist/index.js, when the container is launched. Since you can choose any
base Docker image and language you like, you can change this to suite your
needs. There are a few main things to remember when writing code for container
actions:
Inputs are accessed using argument identifiers or environment variables
(depending on what you set in your action.yml). For example, the first input
to this action, milliseconds, can be accessed in the Node.js script using
the process.env.INPUT_MILLISECONDS environment variable or the
getInput('milliseconds') function from the @actions/core library.
// Use an action input
const ms: number = parseInt(core.getInput('milliseconds'), 10)
// Use an environment variable
const ms: number = parseInt(process.env.INPUT_MILLISECONDS, 10)
GitHub Actions supports a number of different workflow commands such as
creating outputs, setting environment variables, and more. These are
accomplished by writing to different GITHUB_* environment variables. For
more information, see
Commands.
Scenario
Example
Set environment vars
core.exportVariable('MY_VAR', 'my-value')
Set outputs
core.setOutput('time', new Date().toTimeString())
Set secrets
core.setSecret('mySecret')
Prepend to PATH
core.addPath('/usr/local/bin')
Publish the Action
So, what are you waiting for? Go ahead and start customizing your action!
Create a new branch
git checkout -b releases/v1
Replace the contents of src/ with your action code
Add tests to __tests__/ for your source code
Format, test, and build the action
npm run all
This step is important! It will run rollup to
build the final JavaScript action code with all dependencies included. If
you do not run this step, your action will not work correctly when it is
used in a workflow.
Commit your changes
git add .
git commit -m "My first action is ready!"
Push them to your repository
git push -u origin releases/v1
Create a pull request and get feedback on your action
Merge the pull request into the main branch
Your action is now published! 🚀
For information about versioning your action, see
Versioning
in the GitHub Actions toolkit.
Validate the Action
You can now validate the action by referencing it in a workflow file. For
example, ci.yml demonstrates how to reference an
action in the same repository.
steps:
- name: Checkout
id: checkout
uses: actions/checkout@v4
- name: Test Local Action
id: test-action
uses: ./
with:
milliseconds: 1000
- name: Print Output
id: output
run: echo "${{ steps.test-action.outputs.time }}"
For example workflow runs, check out the
Actions tab!
:rocket:
Usage
After testing, you can create version tag(s) that developers can use to
reference different stable versions of your action. For more information, see
Versioning
in the GitHub Actions toolkit.
To include the action in a workflow in another repository, you can use the
uses syntax with the @ symbol to reference a specific branch, tag, or commit
hash.
steps:
- name: Checkout
id: checkout
uses: actions/checkout@v4
- name: Test Local Action
id: test-action
uses: actions/container-toolkit-action@v1 # Commit with the `v1` tag
with:
milliseconds: 1000
- name: Print Output
id: output
run: echo "${{ steps.test-action.outputs.time }}"
Dependency License Management
This template includes a GitHub Actions workflow,
licensed.yml, that uses
Licensed to check for dependencies with
missing or non-compliant licenses. This workflow is initially disabled. To
enable the workflow, follow the below steps.
Open licensed.yml
Uncomment the following lines:
# pull_request:
#
branches:
#
- main
# push:
#
branches:
#
- main
Save and commit the changes
Once complete, this workflow will run any time a pull request is created or
changes pushed directly to main. If the workflow detects any dependencies with
missing or non-compliant licenses, it will fail the workflow and provide details
on the issue(s) found.
Updating Licenses
Whenever you install or update dependencies, you can use the Licensed CLI to
update the licenses database. To install Licensed, see the project's
Readme.
To update the cached licenses, run the following command:
licensed cache
To check the status of cached licenses, run the following command:
licensed status
About
Template repo for creating container actions using https://github.com/actions/toolkit/
Resources
Readme
License
MIT license
Code of conduct
Code of conduct
Security policy
Security policy
Uh oh!
There was an error while loading. Please reload this page.
Activity
Custom properties
Stars
145
stars
Watchers
8
watching
Forks
28
forks
Report repository
Releases
No releases published
Packages
0
No packages published
Uh oh!
There was an error while loading. Please reload this page.
Contributors
7
Uh oh!
There was an error while loading. Please reload this page.
Languages
TypeScript
58.3%
JavaScript
37.3%
Dockerfile
4.4%
Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Community
Docs
Contact
Manage cookies
Do not share my personal information
You can’t perform that action at this time.