GitHub - actions/setup-python: Set up your GitHub Actions workflow with a specific version of Python
Skip to content
Navigation Menu
Toggle navigation
Sign in
Appearance settings
Platform
GitHub Copilot
Write better code with AI
GitHub Spark
New
Build and deploy intelligent apps
GitHub Models
New
Manage and compare prompts
GitHub Advanced Security
Find and fix vulnerabilities
Actions
Automate any workflow
Codespaces
Instant dev environments
Issues
Plan and track work
Code Review
Manage code changes
Discussions
Collaborate outside of code
Code Search
Find more, search less
Explore
Why GitHub
Documentation
GitHub Skills
Blog
Integrations
GitHub Marketplace
MCP Registry
View all features
Solutions
By company size
Enterprises
Small and medium teams
Startups
Nonprofits
By use case
DevSecOps
DevOps
CI/CD
View all use cases
By industry
Healthcare
Financial services
Manufacturing
Government
View all industries
View all solutions
Resources
Topics
AI
DevOps
Security
Software Development
View all
Explore
Learning Pathways
Events & Webinars
Ebooks & Whitepapers
Customer Stories
Partners
Executive Insights
Open Source
GitHub Sponsors
Fund open source developers
The ReadME Project
GitHub community articles
Repositories
Topics
Trending
Collections
Enterprise
Enterprise platform
AI-powered developer platform
Available add-ons
GitHub Advanced Security
Enterprise-grade security features
Copilot for business
Enterprise-grade AI features
Premium Support
Enterprise-grade 24/7 support
Pricing
Search or jump to...
Search code, repositories, users, issues, pull requests...
Search
Clear
Search syntax tips
Provide feedback
We read every piece of feedback, and take your input very seriously.
Include my email address so I can be contacted
Cancel
Submit feedback
Saved searches
Use saved searches to filter your results more quickly
Name
Query
To see all available qualifiers, see our documentation.
Cancel
Create saved search
Sign in
Sign up
Appearance settings
Resetting focus
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
actions
/
setup-python
Public
Notifications
You must be signed in to change notification settings
Fork
652
Star
2k
Set up your GitHub Actions workflow with a specific version of Python
License
MIT license
2k
stars
652
forks
Branches
Tags
Activity
Star
Notifications
You must be signed in to change notification settings
Code
Issues
38
Pull requests
37
Actions
Projects
0
Security
Uh oh!
There was an error while loading. Please reload this page.
Insights
Additional navigation options
Code
Issues
Pull requests
Actions
Projects
Security
Insights
actions/setup-python
Use this GitHub action with your projectAdd this Action to an existing workflow or create a new oneView on Marketplace mainBranchesTagsGo to fileCodeOpen more actions menuFolders and filesNameNameLast commit messageLast commit dateLatest commit History484 Commits.github.github  .licenses/npm.licenses/npm  __tests____tests__  distdist  docsdocs  srcsrc  .eslintignore.eslintignore  .eslintrc.js.eslintrc.js  .gitattributes.gitattributes  .gitignore.gitignore  .licensed.yml.licensed.yml  .prettierignore.prettierignore  .prettierrc.js.prettierrc.js  CODE_OF_CONDUCT.mdCODE_OF_CONDUCT.md  LICENSELICENSE  README.mdREADME.md  action.ymlaction.yml  jest.config.jsjest.config.js  package-lock.jsonpackage-lock.json  package.jsonpackage.json  tsconfig.jsontsconfig.json  View all filesRepository files navigationREADMECode of conductMIT licenseSecuritysetup-python
This action provides the following functionality for GitHub Actions users:
Installing a version of Python or PyPy and (by default) adding it to the PATH
Optionally caching dependencies for pip, pipenv and poetry
Registering problem matchers for error output
Breaking changes in V6
Upgraded action from node20 to node24
Make sure your runner is on version v2.327.1 or later to ensure compatibility with this release. See Release Notes
For more details,
see the full release notes on the releases page
Basic usage
See action.yml
Python
steps:
- uses: actions/checkout@v5
- uses: actions/setup-python@v6
with:
python-version: '3.13'
- run: python my_script.py
PyPy
steps:
- uses: actions/checkout@v5
- uses: actions/setup-python@v6
with:
python-version: 'pypy3.10'
- run: python my_script.py
GraalPy
steps:
- uses: actions/checkout@v5
- uses: actions/setup-python@v6
with:
python-version: 'graalpy-24.0'
- run: python my_script.py
Free threaded Python
steps:
- uses: actions/checkout@v5
- uses: actions/setup-python@v6
with:
python-version: '3.13t'
- run: python my_script.py
The python-version input is optional. If not supplied, the action will try to resolve the version from the default .python-version file. If the .python-version file doesn't exist Python or PyPy version from the PATH will be used. The default version of Python or PyPy in PATH varies between runners and can be changed unexpectedly so we recommend always setting Python version explicitly using the python-version or python-version-file inputs.
The action will first check the local tool cache for a semver match. If unable to find a specific version in the tool cache, the action will attempt to download a version of Python from GitHub Releases and for PyPy from the official PyPy's dist.
For information regarding locally cached versions of Python or PyPy on GitHub hosted runners, check out GitHub Actions Runner Images.
Supported version syntax
The python-version input supports the Semantic Versioning Specification and some special version notations (e.g. semver ranges, x.y-dev syntax, etc.), for detailed examples please refer to the section: Using python-version input of the Advanced usage guide.
Supported architectures
Using the architecture input, it is possible to specify the required Python or PyPy interpreter architecture: x86, x64, or arm64. If the input is not specified, the architecture defaults to the host OS architecture.
Caching packages dependencies
The action has built-in functionality for caching and restoring dependencies. It uses toolkit/cache under the hood for caching dependencies but requires less configuration settings. Supported package managers are pip, pipenv and poetry. The cache input is optional, and caching is turned off by default.
The action defaults to searching for a dependency file (requirements.txt or pyproject.toml for pip, Pipfile.lock for pipenv or poetry.lock for poetry) in the repository, and uses its hash as a part of the cache key. Input cache-dependency-path is used for cases when multiple dependency files are used, they are located in different subdirectories or different files for the hash that want to be used.
For pip, the action will cache the global cache directory
For pipenv, the action will cache virtualenv directory
For poetry, the action will cache virtualenv directories -- one for each poetry project found
Caching pip dependencies:
steps:
- uses: actions/checkout@v5
- uses: actions/setup-python@v6
with:
python-version: '3.13'
cache: 'pip' # caching pip dependencies
- run: pip install -r requirements.txt
Note: Restored cache will not be used if the requirements.txt file is not updated for a long time and a newer version of the dependency is available which can lead to an increase in total build time.
The requirements file format allows for specifying dependency versions using logical operators (for example chardet>=3.0.4) or specifying dependencies without any versions. In this case the pip install -r requirements.txt command will always try to install the latest available package version. To be sure that the cache will be used, please stick to a specific dependency version and update it manually if necessary.
The setup-python action does not handle authentication for pip when installing packages from private repositories. For help, refer pip’s VCS support documentation or visit the pip repository.
See examples of using cache and cache-dependency-path for pipenv and poetry in the section: Caching packages of the Advanced usage guide.
Advanced usage
Using the python-version input
Using the python-version-file input
Check latest version
Caching packages
Outputs and environment variables
Available versions of Python, PyPy and GraalPy
Hosted tool cache
Using setup-python with a self-hosted runner
Using setup-python on GHES
Allow pre-releases
Using the pip-version input
Recommended permissions
When using the setup-python action in your GitHub Actions workflow, it is recommended to set the following permissions to ensure proper functionality:
permissions:
contents: read # access to check out code and install dependencies
License
The scripts and documentation in this project are released under the MIT License.
Contributions
Contributions are welcome! See our Contributor's Guide.
About
Set up your GitHub Actions workflow with a specific version of Python
Resources
Readme
License
MIT license
Code of conduct
Code of conduct
Security policy
Security policy
Uh oh!
There was an error while loading. Please reload this page.
Activity
Custom properties
Stars
2k
stars
Watchers
44
watching
Forks
652
forks
Report repository
Releases
50
v6.0.0
Latest
Sep 4, 2025
+ 49 releases
Packages
0
Uh oh!
There was an error while loading. Please reload this page.
Used by 1.5m
+ 1,533,937
Contributors
99
+ 85 contributors
Languages
TypeScript
97.7%
JavaScript
1.3%
Other
1.0%
Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Community
Docs
Contact
Manage cookies
Do not share my personal information
You can’t perform that action at this time.