GitHub - actions/cache: Cache dependencies and build outputs in GitHub Actions
Skip to content
Navigation Menu
Toggle navigation
Sign in
Appearance settings
Platform
GitHub Copilot
Write better code with AI
GitHub Spark
New
Build and deploy intelligent apps
GitHub Models
New
Manage and compare prompts
GitHub Advanced Security
Find and fix vulnerabilities
Actions
Automate any workflow
Codespaces
Instant dev environments
Issues
Plan and track work
Code Review
Manage code changes
Discussions
Collaborate outside of code
Code Search
Find more, search less
Explore
Why GitHub
Documentation
GitHub Skills
Blog
Integrations
GitHub Marketplace
MCP Registry
View all features
Solutions
By company size
Enterprises
Small and medium teams
Startups
Nonprofits
By use case
App Modernization
DevSecOps
DevOps
CI/CD
View all use cases
By industry
Healthcare
Financial services
Manufacturing
Government
View all industries
View all solutions
Resources
Topics
AI
DevOps
Security
Software Development
View all
Explore
Learning Pathways
Events & Webinars
Ebooks & Whitepapers
Customer Stories
Partners
Executive Insights
Open Source
GitHub Sponsors
Fund open source developers
The ReadME Project
GitHub community articles
Repositories
Topics
Trending
Collections
Enterprise
Enterprise platform
AI-powered developer platform
Available add-ons
GitHub Advanced Security
Enterprise-grade security features
Copilot for business
Enterprise-grade AI features
Premium Support
Enterprise-grade 24/7 support
Pricing
Search or jump to...
Search code, repositories, users, issues, pull requests...
Search
Clear
Search syntax tips
Provide feedback
We read every piece of feedback, and take your input very seriously.
Include my email address so I can be contacted
Cancel
Submit feedback
Saved searches
Use saved searches to filter your results more quickly
Name
Query
To see all available qualifiers, see our documentation.
Cancel
Create saved search
Sign in
Sign up
Appearance settings
Resetting focus
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
actions
/
cache
Public
Notifications
You must be signed in to change notification settings
Fork
1.4k
Star
5k
Cache dependencies and build outputs in GitHub Actions
License
MIT license
5k
stars
1.4k
forks
Branches
Tags
Activity
Star
Notifications
You must be signed in to change notification settings
Code
Issues
123
Pull requests
55
Discussions
Actions
Security
Uh oh!
There was an error while loading. Please reload this page.
Insights
Additional navigation options
Code
Issues
Pull requests
Discussions
Actions
Security
Insights
actions/cache
Use this GitHub action with your projectAdd this Action to an existing workflow or create a new oneView on Marketplace mainBranchesTagsGo to fileCodeOpen more actions menuFolders and filesNameNameLast commit messageLast commit dateLatest commit History671 Commits.devcontainer.devcontainer  .github.github  .licenses.licenses  .vscode.vscode  __tests____tests__  distdist  restorerestore  savesave  srcsrc  .eslintrc.json.eslintrc.json  .gitattributes.gitattributes  .gitignore.gitignore  .licensed.yml.licensed.yml  .prettierrc.json.prettierrc.json  CODE_OF_CONDUCT.mdCODE_OF_CONDUCT.md  CONTRIBUTING.mdCONTRIBUTING.md  LICENSELICENSE  README.mdREADME.md  RELEASES.mdRELEASES.md  action.ymlaction.yml  caching-strategies.mdcaching-strategies.md  examples.mdexamples.md  jest.config.jsjest.config.js  package-lock.jsonpackage-lock.json  package.jsonpackage.json  tips-and-workarounds.mdtips-and-workarounds.md  tsconfig.jsontsconfig.json  View all filesRepository files navigationREADMECode of conductContributingMIT licenseSecurityCache action
This action allows caching dependencies and build outputs to improve workflow execution time.
Two other actions are available in addition to the primary cache action:
Restore action
Save action
Documentation
See "Caching dependencies to speed up workflows".
What's New
⚠️ Important changes
The cache backend service has been rewritten from the ground up for improved performance and reliability. actions/cache now integrates with the new cache service (v2) APIs.
The new service will gradually roll out as of February 1st, 2025. The legacy service will also be sunset on the same date. Changes in these releases are fully backward compatible.
We are deprecating some versions of this action. We recommend upgrading to version v4 or v3 as soon as possible before February 1st, 2025. (Upgrade instructions below).
If you are using pinned SHAs, please use the SHAs of versions v4.2.0 or v3.4.0.
If you do not upgrade, all workflow runs using any of the deprecated actions/cache will fail.
Upgrading to the recommended versions will not break your workflows.
Additionally, if you are managing your own GitHub runners, you must update your runner version to 2.231.0 or newer to ensure compatibility with the new cache service.
Failure to update both the action version and your runner version may result in workflow failures after the migration date.
Read more about the change & access the migration guide: reference to the announcement.
v4
Integrated with the new cache service (v2) APIs.
Updated to node 20
v3
Integrated with the new cache service (v2) APIs.
Added support for caching in GHES 3.5+.
Fixed download issue for files > 2GB during restore.
Updated the minimum runner version support from node 12 -> node 16.
Fixed avoiding empty cache save when no files are available for caching.
Fixed tar creation error while trying to create tar with path as ~/ home folder on ubuntu-latest.
Fixed zstd failing on amazon linux 2.0 runners.
Fixed cache not working with github workspace directory or current directory.
Fixed the download stuck problem by introducing a timeout of 1 hour for cache downloads.
Fix zstd not working for windows on gnu tar in issues.
Allowing users to provide a custom timeout as input for aborting download of a cache segment using an environment variable SEGMENT_DOWNLOAD_TIMEOUT_MINS. Default is 10 minutes.
New actions are available for granular control over caches - restore and save.
Support cross-os caching as an opt-in feature. See Cross OS caching for more info.
Added option to fail job on cache miss. See Exit workflow on cache miss for more info.
Fix zstd not being used after zstd version upgrade to 1.5.4 on hosted runners
Added option to lookup cache without downloading it.
Reduced segment size to 128MB and segment timeout to 10 minutes to fail fast in case the cache download is stuck.
See the v2 README.md for older updates.
Usage
Pre-requisites
Create a workflow .yml file in your repository's .github/workflows directory. An example workflow is available below. For more information, see the GitHub Help Documentation for Creating a workflow file.
If you are using this inside a container, a POSIX-compliant tar needs to be included and accessible from the execution path.
If you are using a self-hosted Windows runner, GNU tar and zstd are required for Cross-OS caching to work. They are also recommended to be installed in general so the performance is on par with hosted Windows runners.
Inputs
key - An explicit key for a cache entry. See creating a cache key.
path - A list of files, directories, and wildcard patterns to cache and restore. See @actions/glob for supported patterns.
restore-keys - An ordered multiline string listing the prefix-matched keys, that are used for restoring stale cache if no cache hit occurred for key.
enableCrossOsArchive - An optional boolean when enabled, allows Windows runners to save or restore caches that can be restored or saved respectively on other platforms. Default: false
fail-on-cache-miss - Fail the workflow if cache entry is not found. Default: false
lookup-only - If true, only checks if cache entry exists and skips download. Does not change save cache behavior. Default: false
Environment Variables
SEGMENT_DOWNLOAD_TIMEOUT_MINS - Segment download timeout (in minutes, default 10) to abort download of the segment if not completed in the defined number of minutes. Read more
Outputs
cache-hit - A string value to indicate an exact match was found for the key.
If there's a cache hit, this will be 'true' or 'false' to indicate if there's an exact match for key.
If there's a cache miss, this will be an empty string.
See Skipping steps based on cache-hit for info on using this output
Cache scopes
The cache is scoped to the key, version, and branch. The default branch cache is available to other branches.
See Matching a cache key for more info.
Example cache workflow
Restoring and saving cache using a single action
name: Caching Primes
on: push
jobs:
build:
runs-on: ubuntu-latest
steps:
- uses: actions/checkout@v4
- name: Cache Primes
id: cache-primes
uses: actions/cache@v4
with:
path: prime-numbers
key: ${{ runner.os }}-primes
- name: Generate Prime Numbers
if: steps.cache-primes.outputs.cache-hit != 'true'
run: /generate-primes.sh -d prime-numbers
- name: Use Prime Numbers
run: /primes.sh -d prime-numbers
The cache action provides a cache-hit output which is set to true when the cache is restored using the primary key and false when the cache is restored using restore-keys or no cache is restored.
Using a combination of restore and save actions
name: Caching Primes
on: push
jobs:
build:
runs-on: ubuntu-latest
steps:
- uses: actions/checkout@v4
- name: Restore cached Primes
id: cache-primes-restore
uses: actions/cache/restore@v4
with:
path: |
path/to/dependencies
some/other/dependencies
key: ${{ runner.os }}-primes
.
. //intermediate workflow steps
.
- name: Save Primes
id: cache-primes-save
uses: actions/cache/save@v4
with:
path: |
path/to/dependencies
some/other/dependencies
key: ${{ steps.cache-primes-restore.outputs.cache-primary-key }}
Note
You must use the cache or restore action in your workflow before you need to use the files that might be restored from the cache. If the provided key matches an existing cache, a new cache is not created and if the provided key doesn't match an existing cache, a new cache is automatically created provided the job completes successfully.
Caching Strategies
With the introduction of the restore and save actions, a lot of caching use cases can now be achieved. Please see the caching strategies document for understanding how you can use the actions strategically to achieve the desired goal.
Implementation Examples
Every programming language and framework has its own way of caching.
See Examples for a list of actions/cache implementations for use with:
Bun
C# - NuGet
Clojure - Lein Deps
D - DUB
Deno
Elixir - Mix
Go - Modules
Haskell - Cabal
Haskell - Stack
Java - Gradle
Java - Maven
Node - npm
Node - Lerna
Node - Yarn
OCaml/Reason - esy
PHP - Composer
Python - pip
Python - pipenv
R - renv
Ruby - Bundler
Rust - Cargo
Scala - SBT
Swift, Objective-C - Carthage
Swift, Objective-C - CocoaPods
Swift - Swift Package Manager
Swift - Mint
Creating a cache key
A cache key can include any of the contexts, functions, literals, and operators supported by GitHub Actions.
For example, using the hashFiles function allows you to create a new cache when dependencies change.
- uses: actions/cache@v4
with:
path: |
path/to/dependencies
some/other/dependencies
key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
Additionally, you can use arbitrary command output in a cache key, such as a date or software version:
# http://man7.org/linux/man-pages/man1/date.1.html
- name: Get Date
id: get-date
run: |
echo "date=$(/bin/date -u "+%Y%m%d")" >> $GITHUB_OUTPUT
shell: bash
- uses: actions/cache@v4
with:
path: path/to/dependencies
key: ${{ runner.os }}-${{ steps.get-date.outputs.date }}-${{ hashFiles('**/lockfiles') }}
See Using contexts to create cache keys
Cache Limits
A repository can have up to 10GB of caches. Once the 10GB limit is reached, older caches will be evicted based on when the cache was last accessed.
Caches that are not accessed within the last week will also be evicted.
Skipping steps based on cache-hit
Using the cache-hit output, subsequent steps (such as install or build) can be skipped when a cache hit occurs on the key.
It is recommended to install missing/updated dependencies in case of a partial key match when the key is dependent on the hash of the package file.
Example:
steps:
- uses: actions/checkout@v4
- uses: actions/cache@v4
id: cache
with:
path: path/to/dependencies
key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
- name: Install Dependencies
if: steps.cache.outputs.cache-hit != 'true'
run: /install.sh
Note The id defined in actions/cache must match the id in the if statement (i.e. steps.[ID].outputs.cache-hit)
Cache Version
Cache version is a hash generated for a combination of compression tool used (Gzip, Zstd, etc. based on the runner OS) and the path of directories being cached. If two caches have different versions, they are identified as unique caches while matching. This, for example, means that a cache created on a windows-latest runner can't be restored on ubuntu-latest as cache Versions are different.
Pro tip: The list caches API can be used to get the version of a cache. This can be helpful to troubleshoot cache miss due to version.
Example
The workflow will create 3 unique caches with same keys. Ubuntu and windows runners will use different compression technique and hence create two different caches. And `build-linux` will create two different caches as the `paths` are different.
jobs:
build-linux:
runs-on: ubuntu-latest
steps:
- uses: actions/checkout@v4
- name: Cache Primes
id: cache-primes
uses: actions/cache@v4
with:
path: prime-numbers
key: primes
- name: Generate Prime Numbers
if: steps.cache-primes.outputs.cache-hit != 'true'
run: ./generate-primes.sh -d prime-numbers
- name: Cache Numbers
id: cache-numbers
uses: actions/cache@v4
with:
path: numbers
key: primes
- name: Generate Numbers
if: steps.cache-numbers.outputs.cache-hit != 'true'
run: ./generate-primes.sh -d numbers
build-windows:
runs-on: windows-latest
steps:
- uses: actions/checkout@v4
- name: Cache Primes
id: cache-primes
uses: actions/cache@v4
with:
path: prime-numbers
key: primes
- name: Generate Prime Numbers
if: steps.cache-primes.outputs.cache-hit != 'true'
run: ./generate-primes -d prime-numbers
Known practices and workarounds
There are a number of community practices/workarounds to fulfill specific requirements. You may choose to use them if they suit your use case. Note these are not necessarily the only solution or even a recommended solution.
Cache segment restore timeout
Update a cache
Use cache across feature branches
Cross OS cache
Force deletion of caches overriding default cache eviction policy
Windows environment variables
Please note that Windows environment variables (like %LocalAppData%) will NOT be expanded by this action. Instead, prefer using ~ in your paths which will expand to the HOME directory. For example, instead of %LocalAppData%, use ~\AppData\Local. For a list of supported default environment variables, see the Learn GitHub Actions: Variables page.
Note
Thank you for your interest in this GitHub repo, however, right now we are not taking contributions.
We continue to focus our resources on strategic areas that help our customers be successful while making developers' lives easier. While GitHub Actions remains a key part of this vision, we are allocating resources towards other areas of Actions and are not taking contributions to this repository at this time. The GitHub public roadmap is the best place to follow along for any updates on features we’re working on and what stage they’re in.
We are taking the following steps to better direct requests related to GitHub Actions, including:
We will be directing questions and support requests to our Community Discussions area
High Priority bugs can be reported through Community Discussions or you can report these to our support team https://support.github.com/contact/bug-report.
Security Issues should be handled as per our security.md.
We will still provide security updates for this project and fix major breaking changes during this time.
You are welcome to still raise bugs in this repo.
License
The scripts and documentation in this project are released under the MIT License
About
Cache dependencies and build outputs in GitHub Actions
Resources
Readme
License
MIT license
Code of conduct
Code of conduct
Contributing
Contributing
Security policy
Security policy
Uh oh!
There was an error while loading. Please reload this page.
Activity
Custom properties
Stars
5k
stars
Watchers
107
watching
Forks
1.4k
forks
Report repository
Releases
65
v4.3.0
Latest
Sep 24, 2025
+ 64 releases
Packages
0
Uh oh!
There was an error while loading. Please reload this page.
Uh oh!
There was an error while loading. Please reload this page.
Contributors
147
+ 133 contributors
Languages
TypeScript
98.0%
Shell
1.1%
JavaScript
0.9%
Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Community
Docs
Contact
Manage cookies
Do not share my personal information
You can’t perform that action at this time.