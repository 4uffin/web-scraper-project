GitHub - simdjson/simdjson: Parsing gigabytes of JSON per second : used by Facebook/Meta Velox, the Node.js runtime, ClickHouse, WatermelonDB, Apache Doris, Milvus, StarRocks
Skip to content
Navigation Menu
Toggle navigation
Sign in
Appearance settings
Platform
GitHub Copilot
Write better code with AI
GitHub Spark
New
Build and deploy intelligent apps
GitHub Models
New
Manage and compare prompts
GitHub Advanced Security
Find and fix vulnerabilities
Actions
Automate any workflow
Codespaces
Instant dev environments
Issues
Plan and track work
Code Review
Manage code changes
Discussions
Collaborate outside of code
Code Search
Find more, search less
Explore
Why GitHub
Documentation
GitHub Skills
Blog
Integrations
GitHub Marketplace
MCP Registry
View all features
Solutions
By company size
Enterprises
Small and medium teams
Startups
Nonprofits
By use case
App Modernization
DevSecOps
DevOps
CI/CD
View all use cases
By industry
Healthcare
Financial services
Manufacturing
Government
View all industries
View all solutions
Resources
Topics
AI
DevOps
Security
Software Development
View all
Explore
Learning Pathways
Events & Webinars
Ebooks & Whitepapers
Customer Stories
Partners
Executive Insights
Open Source
GitHub Sponsors
Fund open source developers
The ReadME Project
GitHub community articles
Repositories
Topics
Trending
Collections
Enterprise
Enterprise platform
AI-powered developer platform
Available add-ons
GitHub Advanced Security
Enterprise-grade security features
Copilot for business
Enterprise-grade AI features
Premium Support
Enterprise-grade 24/7 support
Pricing
Search or jump to...
Search code, repositories, users, issues, pull requests...
Search
Clear
Search syntax tips
Provide feedback
We read every piece of feedback, and take your input very seriously.
Include my email address so I can be contacted
Cancel
Submit feedback
Saved searches
Use saved searches to filter your results more quickly
Name
Query
To see all available qualifiers, see our documentation.
Cancel
Create saved search
Sign in
Sign up
Appearance settings
Resetting focus
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
simdjson
/
simdjson
Public
Notifications
You must be signed in to change notification settings
Fork
1.2k
Star
22.4k
Parsing gigabytes of JSON per second : used by Facebook/Meta Velox, the Node.js runtime, ClickHouse, WatermelonDB, Apache Doris, Milvus, StarRocks
simdjson.org
License
Apache-2.0, MIT licenses found
Licenses found
Apache-2.0
LICENSE
MIT
LICENSE-MIT
22.4k
stars
1.2k
forks
Branches
Tags
Activity
Star
Notifications
You must be signed in to change notification settings
Code
Issues
129
Pull requests
16
Discussions
Actions
Projects
0
Wiki
Security
Uh oh!
There was an error while loading. Please reload this page.
Insights
Additional navigation options
Code
Issues
Pull requests
Discussions
Actions
Projects
Wiki
Security
Insights
simdjson/simdjson
masterBranchesTagsGo to fileCodeOpen more actions menuFolders and filesNameNameLast commit messageLast commit dateLatest commit History3,023 Commits.circleci.circleci  .github.github  .vscode.vscode  benchmarkbenchmark  cmakecmake  dependenciesdependencies  docdoc  examplesexamples  extraextra  fuzzfuzz  imagesimages  includeinclude  jsonexamplesjsonexamples  p2996p2996  scriptsscripts  singleheadersingleheader  srcsrc  stylestyle  teststests  toolstools  windowswindows  .appveyor.yml.appveyor.yml  .cirrus.yml.cirrus.yml  .clang-format.clang-format  .clangd.clangd  .dockerignore.dockerignore  .drone.yml.drone.yml  .editorconfig.editorconfig  .gitattributes.gitattributes  .gitignore.gitignore  .travis.yml.travis.yml  AUTHORSAUTHORS  CMakeLists.txtCMakeLists.txt  CONTRIBUTING.mdCONTRIBUTING.md  CONTRIBUTORSCONTRIBUTORS  DoxyfileDoxyfile  HACKING.mdHACKING.md  LICENSELICENSE  LICENSE-MITLICENSE-MIT  README.mdREADME.md  SECURITY.mdSECURITY.md  simdjson.pc.insimdjson.pc.in  View all filesRepository files navigationREADMEContributingApache-2.0 licenseMIT licenseSecurity
simdjson : Parsing gigabytes of JSON per second
JSON is everywhere on the Internet. Servers spend a *lot* of time parsing it. We need a fresh
approach. The simdjson library uses commonly available SIMD instructions and microparallel algorithms
to parse JSON 4x
faster than RapidJSON and 25x faster than JSON for Modern C++.
Fast: Over 4x faster than commonly used production-grade JSON parsers.
Record Breaking Features: Minify JSON
at 6 GB/s, validate UTF-8
at 13 GB/s,
NDJSON at 3.5 GB/s.
Easy: First-class, easy to use and carefully documented APIs.
Strict: Full JSON and UTF-8 validation, lossless parsing. Performance with no compromises.
Automatic: Selects a CPU-tailored parser at runtime. No configuration needed.
Reliable: From memory allocation to error handling, simdjson's design avoids surprises.
Peer Reviewed: Our research appears in venues like VLDB Journal, Software: Practice and Experience.
This library is part of the Awesome Modern C++ list.
Table of Contents
Real-world usage
Quick Start
Documentation
Godbolt
Performance results
Packages
Bindings and Ports of simdjson
About simdjson
Funding
Contributing to simdjson
License
Real-world usage
Node.js
ClickHouse
Meta Velox
Google Pax
milvus
QuestDB
Clang Build Analyzer
Shopify HeapProfiler
StarRocks
Microsoft FishStore
Intel PCM
WatermelonDB
Apache Doris
Dgraph
UJRPC
fastgltf
vast
ada-url
fastgron
WasmEdge
RonDB
GreptimeDB
mamba
If you are planning to use simdjson in a product, please work from one of our releases.
Quick Start
The simdjson library is easily consumable with a single .h and .cpp file.
Prerequisites: g++ (version 7 or better) or clang++ (version 6 or better), and a 64-bit
system with a command-line shell (e.g., Linux, macOS, freeBSD). We also support programming
environments like Visual Studio and Xcode, but different steps are needed. Users of clang++ may need to specify the C++ version (e.g., c++ -std=c++17) since clang++ tends to default on C++98.
Pull simdjson.h and simdjson.cpp into a
directory, along with the sample file twitter.json. You can download them with the wget utility:
wget https://raw.githubusercontent.com/simdjson/simdjson/master/singleheader/simdjson.h https://raw.githubusercontent.com/simdjson/simdjson/master/singleheader/simdjson.cpp https://raw.githubusercontent.com/simdjson/simdjson/master/jsonexamples/twitter.json
Create quickstart.cpp:
#include <iostream>
#include "simdjson.h"
using namespace simdjson;
int main(void) {
ondemand::parser parser;
padded_string json = padded_string::load("twitter.json");
ondemand::document tweets = parser.iterate(json);
std::cout << uint64_t(tweets["search_metadata"]["count"]) << " results." << std::endl;
}
c++ -o quickstart quickstart.cpp simdjson.cpp
./quickstart
100 results.
Documentation
Usage documentation is available:
Basics is an overview of how to use simdjson and its APIs.
Builder is an overview of how to efficiently write JSON strings using simdjson.
Performance shows some more advanced scenarios and how to tune for them.
Implementation Selection describes runtime CPU detection and
how you can work with it.
API contains the automatically generated API documentation.
Godbolt
Some users may want to browse code along with the compiled assembly. You want to check out the following lists of examples:
C++26 reflection example
simdjson examples with errors handled through exceptions
simdjson examples with errors without exceptions
Performance results
The simdjson library uses three-quarters less instructions than state-of-the-art parser RapidJSON. To our knowledge, simdjson is the first fully-validating JSON parser
to run at gigabytes per second (GB/s) on commodity processors. It can parse millions of JSON documents per second on a single core.
The following figure represents parsing speed in GB/s for parsing various files
on an Intel Skylake processor (3.4 GHz) using the GNU GCC 10 compiler (with the -O3 flag).
We compare against the best and fastest C++ libraries on benchmarks that load and process the data.
The simdjson library offers full unicode (UTF-8) validation and exact
number parsing.
The simdjson library offers high speed whether it processes tiny files (e.g., 300 bytes)
or larger files (e.g., 3MB). The following plot presents parsing
speed for synthetic files over various sizes generated with a script on a 3.4 GHz Skylake processor (GNU GCC 9, -O3).
All our experiments are reproducible.
For NDJSON files, we can exceed 3 GB/s with our
multithreaded parsing functions.
Packages
Bindings and Ports of simdjson
We distinguish between "bindings" (which just wrap the C++ code) and a port to another programming language (which reimplements everything).
ZippyJSON: Swift bindings for the simdjson project.
libpy_simdjson: high-speed Python bindings for simdjson using libpy.
pysimdjson: Python bindings for the simdjson project.
cysimdjson: high-speed Python bindings for the simdjson project.
simdjson-rs: Rust port.
simdjson-rust: Rust wrapper (bindings).
SimdJsonSharp: C# version for .NET Core (bindings and full port).
simdjson_nodejs: Node.js bindings for the simdjson project.
simdjson_php: PHP bindings for the simdjson project.
simdjson_ruby: Ruby bindings for the simdjson project.
fast_jsonparser: Ruby bindings for the simdjson project.
simdjson-go: Go port using Golang assembly.
rcppsimdjson: R bindings.
simdjson_erlang: erlang bindings.
simdjsone: erlang bindings.
lua-simdjson: lua bindings.
hermes-json: haskell bindings.
zimdjson: Zig port.
simdjzon: Zig port.
JSON-Simd: Raku bindings.
JSON::SIMD: Perl bindings; fully-featured JSON module that uses simdjson for decoding.
gemmaJSON: Nim JSON parser based on simdjson bindings.
simdjson-java: Java port.
About simdjson
The simdjson library takes advantage of modern microarchitectures, parallelizing with SIMD vector
instructions, reducing branch misprediction, and reducing data dependency to take advantage of each
CPU's multiple execution cores.
Our default front-end is called On-Demand, and we wrote a paper about it:
John Keiser, Daniel Lemire, On-Demand JSON: A Better Way to Parse Documents?, Software: Practice and Experience 54 (6), 2024.
Some people enjoy reading the first (2019) simdjson paper: A description of the design
and implementation of simdjson is in our research article:
Geoff Langdale, Daniel Lemire, Parsing Gigabytes of JSON per Second, VLDB Journal 28 (6), 2019.
We have an in-depth paper focused on the UTF-8 validation:
John Keiser, Daniel Lemire, Validating UTF-8 In Less Than One Instruction Per Byte, Software: Practice & Experience 51 (5), 2021.
We also have an informal blog post providing some background and context.
For the video inclined,
(It was the best voted talk, we're kinda proud of it.)
Funding
The work is supported by the Natural Sciences and Engineering Research Council of Canada under grants
RGPIN-2017-03910 and RGPIN-2024-03787.
Contributing to simdjson
Head over to CONTRIBUTING.md for information on contributing to simdjson, and
HACKING.md for information on source, building, and architecture/design.
License
This code is made available under the Apache License 2.0 as well as under the MIT License. As a user, you can pick the license you prefer.
Under Windows, we build some tools using the windows/dirent_portable.h file (which is outside our library code): it is under the liberal (business-friendly) MIT license.
For compilers that do not support C++17, we bundle the string-view library which is published under the Boost license. Like the Apache license, the Boost license is a permissive license allowing commercial redistribution.
For efficient number serialization, we bundle Florian Loitsch's implementation of the Grisu2 algorithm for binary to decimal floating-point numbers. The implementation was slightly modified by JSON for Modern C++ library. Both Florian Loitsch's implementation and JSON for Modern C++ are provided under the MIT license.
For runtime dispatching, we use some code from the PyTorch project licensed under 3-clause BSD.
About
Parsing gigabytes of JSON per second : used by Facebook/Meta Velox, the Node.js runtime, ClickHouse, WatermelonDB, Apache Doris, Milvus, StarRocks
simdjson.org
Topics
c-plus-plus
json
arm
neon
x64
clang
cpp11
simd
json-parser
avx2
json-pointer
arm64
aarch64
avx512
gcc-compiler
sse42
vs2019
clang-cl
loongarch
Resources
Readme
License
Apache-2.0, MIT licenses found
Licenses found
Apache-2.0
LICENSE
MIT
LICENSE-MIT
Contributing
Contributing
Security policy
Security policy
Uh oh!
There was an error while loading. Please reload this page.
Activity
Custom properties
Stars
22.4k
stars
Watchers
244
watching
Forks
1.2k
forks
Report repository
Releases
92
Version 4.0.6
Latest
Sep 21, 2025
+ 91 releases
Packages
0
Uh oh!
There was an error while loading. Please reload this page.
Uh oh!
There was an error while loading. Please reload this page.
Contributors
155
Uh oh!
There was an error while loading. Please reload this page.
+ 141 contributors
Languages
C++
97.3%
C
1.0%
CMake
0.7%
Shell
0.5%
Python
0.4%
Rust
0.1%
Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Community
Docs
Contact
Manage cookies
Do not share my personal information
You can’t perform that action at this time.