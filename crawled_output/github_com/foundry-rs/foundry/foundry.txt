GitHub - foundry-rs/foundry: Foundry is a blazing fast, portable and modular toolkit for Ethereum application development written in Rust.
Skip to content
Navigation Menu
Toggle navigation
Sign in
Appearance settings
Platform
GitHub Copilot
Write better code with AI
GitHub Spark
New
Build and deploy intelligent apps
GitHub Models
New
Manage and compare prompts
GitHub Advanced Security
Find and fix vulnerabilities
Actions
Automate any workflow
Codespaces
Instant dev environments
Issues
Plan and track work
Code Review
Manage code changes
Discussions
Collaborate outside of code
Code Search
Find more, search less
Explore
Why GitHub
Documentation
GitHub Skills
Blog
Integrations
GitHub Marketplace
MCP Registry
View all features
Solutions
By company size
Enterprises
Small and medium teams
Startups
Nonprofits
By use case
App Modernization
DevSecOps
DevOps
CI/CD
View all use cases
By industry
Healthcare
Financial services
Manufacturing
Government
View all industries
View all solutions
Resources
Topics
AI
DevOps
Security
Software Development
View all
Explore
Learning Pathways
Events & Webinars
Ebooks & Whitepapers
Customer Stories
Partners
Executive Insights
Open Source
GitHub Sponsors
Fund open source developers
The ReadME Project
GitHub community articles
Repositories
Topics
Trending
Collections
Enterprise
Enterprise platform
AI-powered developer platform
Available add-ons
GitHub Advanced Security
Enterprise-grade security features
Copilot for business
Enterprise-grade AI features
Premium Support
Enterprise-grade 24/7 support
Pricing
Search or jump to...
Search code, repositories, users, issues, pull requests...
Search
Clear
Search syntax tips
Provide feedback
We read every piece of feedback, and take your input very seriously.
Include my email address so I can be contacted
Cancel
Submit feedback
Saved searches
Use saved searches to filter your results more quickly
Name
Query
To see all available qualifiers, see our documentation.
Cancel
Create saved search
Sign in
Sign up
Appearance settings
Resetting focus
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
foundry-rs
/
foundry
Public
Notifications
You must be signed in to change notification settings
Fork
2.2k
Star
9.6k
Foundry is a blazing fast, portable and modular toolkit for Ethereum application development written in Rust.
getfoundry.sh/
License
Apache-2.0, MIT licenses found
Licenses found
Apache-2.0
LICENSE-APACHE
MIT
LICENSE-MIT
9.6k
stars
2.2k
forks
Branches
Tags
Activity
Star
Notifications
You must be signed in to change notification settings
Code
Issues
447
Pull requests
41
Discussions
Actions
Security
Uh oh!
There was an error while loading. Please reload this page.
Insights
Additional navigation options
Code
Issues
Pull requests
Discussions
Actions
Security
Insights
foundry-rs/foundry
masterBranchesTagsGo to fileCodeOpen more actions menuFolders and filesNameNameLast commit messageLast commit dateLatest commitÂ History5,352 Commits.cargo.cargoÂ Â .config.configÂ Â .devcontainer.devcontainerÂ Â .github.githubÂ Â benchesbenchesÂ Â cratescratesÂ Â docs/devdocs/devÂ Â foundryupfoundryupÂ Â npmnpmÂ Â testdatatestdataÂ Â .dockerignore.dockerignoreÂ Â .git-blame-ignore-revs.git-blame-ignore-revsÂ Â .gitattributes.gitattributesÂ Â .gitignore.gitignoreÂ Â CONTRIBUTING.mdCONTRIBUTING.mdÂ Â Cargo.lockCargo.lockÂ Â Cargo.tomlCargo.tomlÂ Â DockerfileDockerfileÂ Â Dockerfile.crossDockerfile.crossÂ Â FUNDING.jsonFUNDING.jsonÂ Â LICENSE-APACHELICENSE-APACHEÂ Â LICENSE-MITLICENSE-MITÂ Â MakefileMakefileÂ Â README.mdREADME.mdÂ Â SECURITY.mdSECURITY.mdÂ Â clippy.tomlclippy.tomlÂ Â deny.tomldeny.tomlÂ Â dprint.jsondprint.jsonÂ Â env.shenv.shÂ Â flake.lockflake.lockÂ Â flake.nixflake.nixÂ Â rustfmt.tomlrustfmt.tomlÂ Â typos.tomltypos.tomlÂ Â View all filesRepository files navigationREADMEContributingApache-2.0 licenseMIT licenseSecurity
Install
| Docs
| Developer Guidelines
| Contributing
| Crate Docs
Foundry is a blazing fast, portable and modular toolkit for Ethereum application development written in Rust.
Foundry consists of:
Forge: Build, test, fuzz, debug and deploy Solidity contracts, like Hardhat, Brownie, Ape.
Cast: A Swiss Army knife for interacting with EVM smart contracts, sending transactions and getting chain data.
Anvil: Fast local Ethereum development node, akin to Hardhat Network, Tenderly.
Chisel: Fast, utilitarian, and verbose Solidity REPL.
Need help getting started with Foundry? Read the ðŸ“– Foundry Docs!
Features
High-Performance Compilation
Fast and Flexible: Automatically detects and installs the required Solidity compiler version.
Solidity and Vyper Support: Fully supports both Solidity and Vyper out-of-the-box.
Incremental Compilation: Re-compiles only changed files, saving time.
Parallelized Pipeline: Leverages multi-core systems for ultra-fast builds.
Broad Compatibility: Supports non-standard directory structures, including Hardhat repos.
Advanced Testing
No Context Switching: Write tests directly in Solidity.
Fuzz Testing: Quickly identify edge cases with input shrinking and counter-example generation.
Invariant Testing: Ensure complex system properties hold across a wide range of inputs.
Debugging Made Easy: Use forge-std's console.sol for flexible debug logging.
Interactive Debugger: Step through your Solidity code with Foundry's interactive debugger, making it easy to pinpoint issues.
Powerful Runtime Features
RPC Forking: Fast and efficient remote RPC forking backed by Alloy.
Lightweight & Portable: No dependency on Nix or other package managers for installation.
Streamlined CI/CD
Optimized CI: Accelerate builds, run tests and execute scripts using Foundry's GitHub action.
Installation
Getting started is very easy:
Install foundryup:
curl -L https://foundry.paradigm.xyz | bash
Next, run foundryup.
It will automatically install the latest version of the precompiled binaries: forge, cast, anvil, and chisel.
foundryup
Done!
For additional details see the installation guide in the Foundry Docs.
If you're experiencing any issues while installing, check out Getting Help and the FAQ.
How Fast?
Forge is quite fast at both compiling (leveraging solc with foundry-compilers) and testing.
See the benchmarks below. Older benchmarks against DappTools can be found in the v0.2.0 announcement post and in the Convex Shutdown Simulation repository.
Testing Benchmarks
Project
Type
Forge 1.0
Forge 0.2
DappTools
Speedup
vectorized/solady
Unit / Fuzz
0.9s
2.3s
-
2.6x
morpho-org/morpho-blue
Invariant
0.7s
1m43s
-
147.1x
morpho-org/morpho-blue-oracles
Integration (Cold)
6.1s
6.3s
-
1.04x
morpho-org/morpho-blue-oracles
Integration (Cached)
0.6s
0.9s
-
1.50x
transmissions11/solmate
Unit / Fuzz
2.7s
2.8s
6m34s
1.03x / 140.0x
reflexer-labs/geb
Unit / Fuzz
0.2s
0.4s
23s
2.0x / 57.5x
In the above benchmarks, compilation was always skipped
Takeaway: Forge dramatically outperforms the competition, delivering blazing-fast execution speeds while continuously expanding its robust feature set.
Compilation Benchmarks
Takeaway: Forge compilation is consistently faster than Hardhat by a factor of 2.1x to 5.2x, depending on the amount of caching involved.
Forge
Forge helps you build, test, fuzz, debug and deploy Solidity contracts.
The best way to understand Forge is to simply try it (in less than 30 seconds!).
First, let's initialize a new counter example repository:
forge init counter
Next cd into counter and build :
forge build
[â Š] Compiling...
[â ”] Compiling 27 files with Solc 0.8.28
[â ’] Solc 0.8.28 finished in 452.13ms
Compiler run successful!
Let's test our contracts:
forge test
[â Š] Compiling...
No files changed, compilation skipped
Ran 2 tests for test/Counter.t.sol:CounterTest
[PASS] testFuzz_SetNumber(uint256) (runs: 256, Î¼: 31121, ~: 31277)
[PASS] test_Increment() (gas: 31293)
Suite result: ok. 2 passed; 0 failed; 0 skipped; finished in 5.35ms (4.86ms CPU time)
Ran 1 test suite in 5.91ms (5.35ms CPU time): 2 tests passed, 0 failed, 0 skipped (2 total tests)
Finally, let's run our deployment script:
forge script script/Counter.s.sol
[â Š] Compiling...
No files changed, compilation skipped
Script ran successfully.
Gas used: 109037
If you wish to simulate on-chain transactions pass a RPC URL.
Run forge --help to explore the full list of available subcommands and their usage.
More documentation can be found in the forge section of the Foundry Docs.
Cast
Cast is a Swiss Army knife for interacting with Ethereum applications from the command line.
Here are a few examples of what you can do:
Check the latest block on Ethereum Mainnet:
cast block-number --rpc-url https://eth.merkle.io
Check the Ether balance of vitalik.eth
cast balance vitalik.eth --ether --rpc-url https://eth.merkle.io
Replay and trace a transaction
cast run 0x9c32042f5e997e27e67f82583839548eb19dc78c4769ad6218657c17f2a5ed31 --rpc-url https://eth.merkle.io
Optionally, pass --etherscan-api-key <API_KEY> to decode transaction traces using verified source maps, providing more detailed and human-readable information.
Run cast --help to explore the full list of available subcommands and their usage.
More documentation can be found in the cast section of the Foundry Docs.
Anvil
Anvil is a fast local Ethereum development node.
Let's fork Ethereum mainnet at the latest block:
anvil --fork-url https://eth.merkle.io
You can use those same cast subcommands against your anvil instance:
cast block-number
Run anvil --help to explore the full list of available features and their usage.
More documentation can be found in the anvil section of the Foundry Docs.
Chisel
Chisel is a fast, utilitarian, and verbose Solidity REPL.
To use Chisel, simply type chisel.
chisel
From here, start writing Solidity code! Chisel will offer verbose feedback on each input.
Create a variable a and query it:
âžœ uint256 a = 123;
âžœ a
Type: uint256
â”œ Hex: 0x7b
â”œ Hex (full word): 0x000000000000000000000000000000000000000000000000000000000000007b
â”” Decimal: 123
Finally, run !source to see a was applied:
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.28;
import {Vm} from "forge-std/Vm.sol";
contract REPL {
Vm internal constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));
/// @notice REPL contract entry point
function run() public {
uint256 a = 123;
}
}
Run chisel --help to explore the full list of available features and their usage.
More documentation can be found in the chisel section of the Foundry Docs.
Configuration
Foundry is highly configurable, allowing you to tailor it to your needs. Configuration is managed via a file called foundry.toml located in the root of your project or any parent directory. For a full list of configuration options, refer to the config package documentation.
Profiles and Namespaces
Configuration can be organized into profiles, which are arbitrarily namespaced for flexibility.
The default profile is named default. Learn more in the Default Profile section.
To select a different profile, set the FOUNDRY_PROFILE environment variable.
Override specific settings using environment variables prefixed with FOUNDRY_ (e.g., FOUNDRY_SRC).
You can find additional setup and configurations guides in the Foundry Docs and in the config crate:
Configuring with foundry.toml
Setting up VSCode
Shell autocompletions
Contributing
See our contributing guidelines.
Getting Help
First, see if the answer to your question can be found in the Foundry Docs, or in the relevant crate.
If the answer is not there:
Join the support Telegram to get help, or
Open a discussion with your question, or
Open an issue with the bug
If you want to contribute, or follow along with contributor discussion, you can use our main telegram to chat with us about the development of Foundry!
License
Licensed under either of Apache License, Version
2.0 or MIT License at your option.
Unless you explicitly state otherwise, any contribution intentionally submitted
for inclusion in these crates by you, as defined in the Apache-2.0 license,
shall be dual licensed as above, without any additional terms or conditions.
Acknowledgements
Foundry is a clean-room rewrite of the testing framework DappTools. None of this would have been possible without the DappHub team's work over the years.
Matthias Seitz: Created ethers-solc (now foundry-compilers) which is the backbone of our compilation pipeline, as well as countless contributions to ethers, in particular the abigen macros.
Rohit Narurkar: Created the Rust Solidity version manager svm-rs which we use to auto-detect and manage multiple Solidity versions.
Brock Elmore: For extending the VM's cheatcodes and implementing structured call tracing, a critical feature for debugging smart contract calls.
Thank you to Depot for sponsoring us with their fast GitHub runners and sccache, which we use in CI to reduce build and test times significantly.
All the other contributors to the ethers-rs, alloy & foundry repositories and chatrooms.
About
Foundry is a blazing fast, portable and modular toolkit for Ethereum application development written in Rust.
getfoundry.sh/
Topics
testing
rust
framework
tooling
ethereum
dapp
blockchain
solidity
fuzzing
alloy
eth
evm
seth
dapptools
mainnet-fork
Resources
Readme
License
Apache-2.0, MIT licenses found
Licenses found
Apache-2.0
LICENSE-APACHE
MIT
LICENSE-MIT
Contributing
Contributing
Security policy
Security policy
Uh oh!
There was an error while loading. Please reload this page.
Activity
Custom properties
Stars
9.6k
stars
Watchers
92
watching
Forks
2.2k
forks
Report repository
Releases
480
v1.3.6
Latest
Sep 16, 2025
+ 479 releases
Used by 356
+ 348
Contributors
579
Uh oh!
There was an error while loading. Please reload this page.
+ 565 contributors
Languages
Rust
99.1%
Shell
0.4%
TypeScript
0.3%
Solidity
0.1%
Makefile
0.1%
Dockerfile
0.0%
Footer
Â© 2025 GitHub,Â Inc.
Footer navigation
Terms
Privacy
Security
Status
Community
Docs
Contact
Manage cookies
Do not share my personal information
You canâ€™t perform that action at this time.