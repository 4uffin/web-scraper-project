GitHub - smartcontractkit/chainlink: node of the decentralized oracle network, bridging on and off-chain computation
Skip to content
Navigation Menu
Toggle navigation
Sign in
Appearance settings
Platform
GitHub Copilot
Write better code with AI
GitHub Spark
New
Build and deploy intelligent apps
GitHub Models
New
Manage and compare prompts
GitHub Advanced Security
Find and fix vulnerabilities
Actions
Automate any workflow
Codespaces
Instant dev environments
Issues
Plan and track work
Code Review
Manage code changes
Discussions
Collaborate outside of code
Code Search
Find more, search less
Explore
Why GitHub
Documentation
GitHub Skills
Blog
Integrations
GitHub Marketplace
MCP Registry
View all features
Solutions
By company size
Enterprises
Small and medium teams
Startups
Nonprofits
By use case
App Modernization
DevSecOps
DevOps
CI/CD
View all use cases
By industry
Healthcare
Financial services
Manufacturing
Government
View all industries
View all solutions
Resources
Topics
AI
DevOps
Security
Software Development
View all
Explore
Learning Pathways
Events & Webinars
Ebooks & Whitepapers
Customer Stories
Partners
Executive Insights
Open Source
GitHub Sponsors
Fund open source developers
The ReadME Project
GitHub community articles
Repositories
Topics
Trending
Collections
Enterprise
Enterprise platform
AI-powered developer platform
Available add-ons
GitHub Advanced Security
Enterprise-grade security features
Copilot for business
Enterprise-grade AI features
Premium Support
Enterprise-grade 24/7 support
Pricing
Search or jump to...
Search code, repositories, users, issues, pull requests...
Search
Clear
Search syntax tips
Provide feedback
We read every piece of feedback, and take your input very seriously.
Include my email address so I can be contacted
Cancel
Submit feedback
Saved searches
Use saved searches to filter your results more quickly
Name
Query
To see all available qualifiers, see our documentation.
Cancel
Create saved search
Sign in
Sign up
Appearance settings
Resetting focus
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
smartcontractkit
/
chainlink
Public
Notifications
You must be signed in to change notification settings
Fork
1.9k
Star
7.7k
node of the decentralized oracle network, bridging on and off-chain computation
chain.link
License
View license
7.7k
stars
1.9k
forks
Branches
Tags
Activity
Star
Notifications
You must be signed in to change notification settings
Code
Issues
99
Pull requests
187
Actions
Wiki
Security
Uh oh!
There was an error while loading. Please reload this page.
Insights
Additional navigation options
Code
Issues
Pull requests
Actions
Wiki
Security
Insights
smartcontractkit/chainlink
developBranchesTagsGo to fileCodeOpen more actions menuFolders and filesNameNameLast commit messageLast commit dateLatest commit History27,519 Commits.changeset.changeset  .github.github  ccip/configccip/config  commoncommon  corecore  deploymentdeployment  docsdocs  fuzzfuzz  integration-testsintegration-tests  internal/testdbinternal/testdb  operator_uioperator_ui  pluginsplugins  system-testssystem-tests  testdata/scriptstestdata/scripts  toolstools  .dockerignore.dockerignore  .gitattributes.gitattributes  .gitignore.gitignore  .golangci.yml.golangci.yml  .mockery.yaml.mockery.yaml  .nancy-ignore.nancy-ignore  .npmrc.npmrc  .tarignore.tarignore  .tool-versions.tool-versions  CHANGELOG.mdCHANGELOG.md  GNUmakefileGNUmakefile  LICENSELICENSE  README.mdREADME.md  SECURITY.mdSECURITY.md  config_docs_test.goconfig_docs_test.go  flake.lockflake.lock  flake.nixflake.nix  go.mdgo.md  go.modgo.mod  go.sumgo.sum  main.gomain.go  main_integration_test.gomain_integration_test.go  main_test.gomain_test.go  nix-darwin-shell-hook.shnix-darwin-shell-hook.sh  nix.confnix.conf  package.jsonpackage.json  pnpm-lock.yamlpnpm-lock.yaml  shell.nixshell.nix  sonar-project.propertiessonar-project.properties  View all filesRepository files navigationREADMEContributingLicenseSecurity
Chainlink expands the capabilities of smart contracts by enabling access to real-world data and off-chain computation while maintaining the security and reliability guarantees inherent to blockchain technology.
This repo contains the Chainlink core node and contracts. The core node is the bundled binary available to be run by node operators participating in a decentralized oracle network.
All major release versions have pre-built docker images available for download from the Chainlink dockerhub.
If you are interested in contributing please see our contribution guidelines.
If you are here to report a bug or request a feature, please check currently open Issues.
For more information about how to get started with Chainlink, check our official documentation.
Community
Chainlink has an active and ever growing community. Discord
is the primary communication channel used for day to day communication,
answering development questions, and aggregating Chainlink related content. Take
a look at the community docs for more information
regarding Chainlink social accounts, news, and networking.
Build Chainlink
Install Go 1.23, and add your GOPATH's bin directory to your PATH
Example Path for macOS export PATH=$GOPATH/bin:$PATH & export GOPATH=/Users/$USER/go
Install NodeJS v20 & pnpm v10 via npm.
It might be easier long term to use nvm to switch between node versions for different projects. For example, assuming $NODE_VERSION was set to a valid version of NodeJS, you could run: nvm install $NODE_VERSION && nvm use $NODE_VERSION
Install Postgres (>= 12.x). It is recommended to run the latest major version of postgres.
Note if you are running the official Chainlink docker image, the highest supported Postgres version is 16.x due to the bundled client.
You should configure Postgres to use SSL connection (or for testing you can set ?sslmode=disable in your Postgres query string).
Download Chainlink: git clone https://github.com/smartcontractkit/chainlink && cd chainlink
Build and install Chainlink: make install
Run the node: chainlink help
For the latest information on setting up a development environment, see the Development Setup Guide.
Build from PR
To build an unofficial testing-only image from a feature branch or PR. You can do one of the following:
Send a workflow dispatch event from our docker-build workflow.
Add the build-publish label to your PR and then either retry the docker-build workflow, or push a new commit.
Build Plugins
Plugins are defined in yaml files within the plugins/ directory. Each plugin file is a yaml file and has a plugins. prefix name. Plugins are installed with loopinstall.
To install the plugins, run:
make install-plugins
Some plugins (such as those in plugins/plugins.private.yaml) reference private GitHub repositories. To build these plugins, you must have a GITHUB_TOKEN environment variable set, or preferably use the gh GitHub CLI tool to use the GitHub CLI credential helper like:
# Sets up a credential helper.
gh auth setup-git
Then you can build the plugins with:
make install-plugins-private
Docker Builds
To build the experimental "plugins" Chainlink docker image, you can run this from the root of the repository:
# The GITHUB_TOKEN is required to access private repos which are used by some plugins.
export GITHUB_TOKEN=$(gh auth token) # requires the `gh` cli tool.
make docker-plugins
Ethereum Execution Client Requirements
In order to run the Chainlink node you must have access to a running Ethereum node with an open websocket connection.
Any Ethereum based network will work once you've configured the chain ID.
Ethereum node versions currently tested and supported:
[Officially supported]
Parity/Openethereum (NOTE: Parity is deprecated and support for this client may be removed in future)
Geth
Besu
[Supported but broken]
These clients are supported by Chainlink, but have bugs that prevent Chainlink from working reliably on these execution clients.
Nethermind
Blocking issues:
NethermindEth/nethermind#4384
Erigon
Blocking issues:
erigontech/erigon#4946
erigontech/erigon#4030 (comment)
We cannot recommend specific version numbers for ethereum nodes since the software is being continually updated, but you should usually try to run the latest version available.
Running a local Chainlink node
NOTE: By default, chainlink will run in TLS mode. For local development you can disable this by using a dev build using make chainlink-dev and setting the TOML fields:
[WebServer]
SecureCookies = false
TLS.HTTPSPort = 0
[Insecure]
DevWebServer = true
Alternatively, you can generate self signed certificates using tools/bin/self-signed-certs or manually.
To start your Chainlink node, simply run:
chainlink node start
By default this will start on port 6688. You should be able to access the UI at http://localhost:6688/.
Chainlink provides a remote CLI client as well as a UI. Once your node has started, you can open a new terminal window to use the CLI. You will need to log in to authorize the client first:
chainlink admin login
(You can also set ADMIN_CREDENTIALS_FILE=/path/to/credentials/file in future if you like, to avoid having to login again).
Now you can view your current jobs with:
chainlink jobs list
To find out more about the Chainlink CLI, you can always run chainlink help.
Check out the doc pages on Jobs to learn more about how to create Jobs.
Configuration
Node configuration is managed by a combination of environment variables and direct setting via API/UI/CLI.
Check the official documentation for more information on how to configure your node.
External Adapters
External adapters are what make Chainlink easily extensible, providing simple integration of custom computations and specialized APIs. A Chainlink node communicates with external adapters via a simple REST API.
For more information on creating and using external adapters, please see our external adapters page.
Verify Official Chainlink Releases
We use cosign with OIDC keyless signing during the Build, Sign and Publish Chainlink workflow.
It is encourage for any node operator building from the official Chainlink docker image to verify the tagged release version was did indeed built from this workflow.
You will need cosign in order to do this verification. Follow the instruction here to install cosign.
# tag is the tagged release version - ie. 2.16.0
cosign verify index.docker.io/smartcontract/chainlink:${tag} \
--certificate-oidc-issuer https://token.actions.githubusercontent.com \
--certificate-identity "https://github.com/smartcontractkit/chainlink/.github/workflows/build-publish.yml@refs/tags/v${tag}"
Development
Running tests
Install pnpm 10 via npm
Install gencodec and jq to be able to run go generate ./... and make abigen
Install mockery
make mockery
Using the make command will install the correct version.
Generate and compile static assets:
make generate
Prepare your development environment:
The tests require a postgres database. In turn, the environment variable
CL_DATABASE_URL must be set to value that can connect to _test database, and the user must be able to create and drop
the given _test database.
Note: Other environment variables should not be set for all tests to pass
There helper script for initial setup to create an appropriate test user. It requires postgres to be running on localhost at port 5432. You will be prompted for
the postgres user password
make setup-testdb
This script will save the CL_DATABASE_URL in .dbenv
Changes to database require migrations to be run. Similarly, pull'ing the repo may require migrations to run.
After the one-time setup above:
source .dbenv
make testdb
If you encounter the error database accessed by other users (SQLSTATE 55006) exit status 1
and you want force the database creation then use
source .dbenv
make testdb-force
Run tests:
go test ./...
Notes
The parallel flag can be used to limit CPU usage, for running tests in the background (-parallel=4) - the default is GOMAXPROCS
The p flag can be used to limit the number of packages tested concurrently, if they are interferring with one another (-p=1)
The -short flag skips tests which depend on the database, for quickly spot checking simpler tests in around one minute
Race Detector
As of Go 1.1, the runtime includes a data race detector, enabled with the -race flag. This is used in CI via the
tools/bin/go_core_race_tests script. If the action detects a race, the artifact on the summary page will include
race.* files with detailed stack traces.
It will not issue false positives, so take its warnings seriously.
For local, targeted race detection, you can run:
GORACE="log_path=$PWD/race" go test -race ./core/path/to/pkg -count 10
GORACE="log_path=$PWD/race" go test -race ./core/path/to/pkg -count 100 -run TestFooBar/sub_test
https://go.dev/doc/articles/race_detector
Fuzz tests
As of Go 1.18, fuzz tests func FuzzXXX(*testing.F) are included as part of the normal test suite, so existing cases are executed with go test.
Additionally, you can run active fuzzing to search for new cases:
go test ./pkg/path -run=XXX -fuzz=FuzzTestName
https://go.dev/doc/fuzz/
Go Modules
This repository contains three Go modules:
flowchart RL
github.com/smartcontractkit/chainlink/v2
github.com/smartcontractkit/chainlink/integration-tests --> github.com/smartcontractkit/chainlink/v2
github.com/smartcontractkit/chainlink/core/scripts --> github.com/smartcontractkit/chainlink/v2
Loading
The integration-tests and core/scripts modules import the root module using a relative replace in their go.mod files,
so dependency changes in the root go.mod often require changes in those modules as well. After making a change, go mod tidy
can be run on all three modules using:
make gomodtidy
Code Generation
Go generate is used to generate mocks in this project. Mocks are generated with mockery and live in core/internal/mocks.
Nix
A shell.nix is provided for use with the Nix package manager. By default,we utilize the shell through Nix Flakes.
Nix defines a declarative, reproducible development environment. Flakes version use deterministic, frozen (flake.lock) dependencies to
gain more consistency/reproducibility on the built artifacts.
To use it:
Install nix package manager in your system.
Enable flakes support
Run nix develop. You will be put in shell containing all the dependencies.
Optionally, nix develop --command $SHELL will make use of your current shell instead of the default (bash).
You can use direnv to enable it automatically when cd-ing into the folder; for that, enable nix-direnv and use flake on it.
Create a local postgres database:
mkdir -p $PGDATA && cd $PGDATA/
initdb
pg_ctl -l postgres.log -o "--unix_socket_directories='$PWD'" start
createdb chainlink_test -h localhost
createuser --superuser --password chainlink -h localhost
# then type a test password, e.g.: chainlink, and set it in shell.nix CL_DATABASE_URL
When re-entering project, you can restart postgres: cd $PGDATA; pg_ctl -l postgres.log -o "--unix_socket_directories='$PWD'" start
Now you can run tests or compile code as usual.
When you're done, stop it: cd $PGDATA; pg_ctl -o "--unix_socket_directories='$PWD'" stop
Changesets
We use changesets to manage versioning for libs and the services.
Every PR that modifies any configuration or code, should most likely accompanied by a changeset file.
To install changesets:
Install pnpm if it is not already installed - docs.
Run pnpm install.
Either after or before you create a commit, run the pnpm changeset command to create an accompanying changeset entry which will reflect on the CHANGELOG for the next release.
The format is based on Keep a Changelog,
and this project adheres to Semantic Versioning.
Tips
For more tips on how to build and test Chainlink, see our development tips page.
Contributing
Contributions are welcome to Chainlink's source code.
Please check out our contributing guidelines for more details.
Thank you!
About
node of the decentralized oracle network, bridging on and off-chain computation
chain.link
Topics
golang
ethereum
blockchain
oracle
solidity
chainlink
Resources
Readme
License
View license
Contributing
Contributing
Security policy
Security policy
Uh oh!
There was an error while loading. Please reload this page.
Activity
Custom properties
Stars
7.7k
stars
Watchers
329
watching
Forks
1.9k
forks
Report repository
Releases
117
v2.28.0
Latest
Sep 12, 2025
+ 116 releases
Packages
0
No packages published
Uh oh!
There was an error while loading. Please reload this page.
Contributors
294
Uh oh!
There was an error while loading. Please reload this page.
+ 280 contributors
Languages
Go
99.3%
PLpgSQL
0.4%
Shell
0.2%
Makefile
0.1%
Dockerfile
0.0%
Solidity
0.0%
Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Community
Docs
Contact
Manage cookies
Do not share my personal information
You can’t perform that action at this time.