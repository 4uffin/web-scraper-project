GitHub - ArthurBrussee/brush: 3D Reconstruction for all
Skip to content
Navigation Menu
Toggle navigation
Sign in
Appearance settings
Platform
GitHub Copilot
Write better code with AI
GitHub Spark
New
Build and deploy intelligent apps
GitHub Models
New
Manage and compare prompts
GitHub Advanced Security
Find and fix vulnerabilities
Actions
Automate any workflow
Codespaces
Instant dev environments
Issues
Plan and track work
Code Review
Manage code changes
Discussions
Collaborate outside of code
Code Search
Find more, search less
Explore
Why GitHub
Documentation
GitHub Skills
Blog
Integrations
GitHub Marketplace
MCP Registry
View all features
Solutions
By company size
Enterprises
Small and medium teams
Startups
Nonprofits
By use case
App Modernization
DevSecOps
DevOps
CI/CD
View all use cases
By industry
Healthcare
Financial services
Manufacturing
Government
View all industries
View all solutions
Resources
Topics
AI
DevOps
Security
Software Development
View all
Explore
Learning Pathways
Events & Webinars
Ebooks & Whitepapers
Customer Stories
Partners
Executive Insights
Open Source
GitHub Sponsors
Fund open source developers
The ReadME Project
GitHub community articles
Repositories
Topics
Trending
Collections
Enterprise
Enterprise platform
AI-powered developer platform
Available add-ons
GitHub Advanced Security
Enterprise-grade security features
Copilot for business
Enterprise-grade AI features
Premium Support
Enterprise-grade 24/7 support
Pricing
Search or jump to...
Search code, repositories, users, issues, pull requests...
Search
Clear
Search syntax tips
Provide feedback
We read every piece of feedback, and take your input very seriously.
Include my email address so I can be contacted
Cancel
Submit feedback
Saved searches
Use saved searches to filter your results more quickly
Name
Query
To see all available qualifiers, see our documentation.
Cancel
Create saved search
Sign in
Sign up
Appearance settings
Resetting focus
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
ArthurBrussee
/
brush
Public
Notifications
You must be signed in to change notification settings
Fork
119
Star
2.8k
3D Reconstruction for all
License
Apache-2.0 license
2.8k
stars
119
forks
Branches
Tags
Activity
Star
Notifications
You must be signed in to change notification settings
Code
Issues
35
Pull requests
3
Discussions
Actions
Projects
0
Security
Uh oh!
There was an error while loading. Please reload this page.
Insights
Additional navigation options
Code
Issues
Pull requests
Discussions
Actions
Projects
Security
Insights
ArthurBrussee/brush
mainBranchesTagsGo to fileCodeOpen more actions menuFolders and filesNameNameLast commit messageLast commit dateLatest commit History1,033 Commits.cargo.cargo  .github.github  .vscode.vscode  .zed.zed  brush_nextjsbrush_nextjs  cratescrates  examples/train-2dexamples/train-2d  extrasextras  .gitignore.gitignore  CHANGELOG.mdCHANGELOG.md  Cargo.lockCargo.lock  Cargo.tomlCargo.toml  LICENSELICENSE  README.mdREADME.md  brush_blueprint.rblbrush_blueprint.rbl  cubecl.tomlcubecl.toml  deny.tomldeny.toml  dist-workspace.tomldist-workspace.toml  package-lock.jsonpackage-lock.json  package.jsonpackage.json  View all filesRepository files navigationREADMEApache-2.0 licenseBrush
BrushSizzleCompressedFrame.mp4
Massive thanks to @GradeEterna for the beautiful scenes
Brush is a 3D reconstruction engine using Gaussian splatting. It works on a wide range of systems: macOS/windows/linux, AMD/Nvidia/Intel cards, Android, and in a browser. To achieve this, it uses WebGPU compatible tech and the Burn machine learning framework.
Machine learning for real time rendering has tons of potential, but most ML tools don't work well with it: Rendering requires realtime interactivity, usually involve dynamic shapes & computations, don't run on most platforms, and it can be cumbersome to ship apps with large CUDA deps. Brush on the other hand produces simple dependency free binaries, runs on nearly all devices, without any setup.
Try the web demo
NOTE: Only works on Chrome and Edge. Firefox and Safari are hopefully supported soon)
Features
Training
Brush takes in COLMAP data or datasets in the Nerfstudio format. Training is fully supported natively, on mobile, and in a browser. While training you can interact with the scene and see the training dynamics live, and compare the current rendering to input views as the training progresses.
It also supports masking images:
Images with transparency. This will force the final splat to match the transparency of the input.
A folder of images called 'masks'. This ignores parts of the image that are masked out.
Viewer
Brush also works well as a splat viewer, including on the web. It can load .ply & .compressed.ply files. You can stream in data from a URL (for a web app, simply append ?url=).
Brush also can load .zip of splat files to display them as an animation, or a special ply that includes delta frames (see cat-4D and Cap4D!).
CLI
Brush can be used as a CLI. Run brush --help to get an overview. Every CLI command can work with --with-viewer which also opens the UI, for easy debugging.
Rerun
rerun_dash_compressed.mp4
While training, additional data can be visualized with the excellent rerun. To install rerun on your machine, please follow their instructions. Open the ./brush_blueprint.rbl in the viewer for best results.
Building Brush
First install rust 1.88+. You can run tests with cargo test --all. Brush uses the wonderful rerun for additional visualizations while training, run cargo install rerun-cli if you want to use it.
Windows/macOS/Linux
Simply cargo run or cargo run --release from the workspace root. Brush can also be used as a CLI, run cargo run --release -- --help to use the CLI directly from source. See the notes about the CLI in the features section.
Web
Brush can be compiled to WASM. Run npm run dev to start the demo website using Next.js, see the brush_nextjs directory.
Brush uses wasm-pack to build the WASM bundle. You can also use it without a bundler, see wasm-pack's documentation.
WebGPU is still an upcoming standard, and as such, only Chrome 134+ on Windows and macOS is currently supported.
Android
As a one time setup, make sure you have the Android SDK & NDK installed.
Check if ANDROID_NDK_HOME and ANDROID_HOME are set
Add the Android target to rust rustup target add aarch64-linux-android
Install cargo-ndk to manage building a lib cargo install cargo-ndk
Each time you change the rust code, run
cargo ndk -t arm64-v8a -o crates/brush-app/app/src/main/jniLibs/ build
Nb:
Nb, for best performance, build in release mode. This is separate
from the Android Studio app build configuration.
cargo ndk -t arm64-v8a -o crates/brush-app/app/src/main/jniLibs/
build --release
You can now either run the project from Android Studio (Android Studio does NOT build the rust code), or run it from the command line:
./gradlew build
./gradlew installDebug
adb shell am start -n com.splats.app/.MainActivity
You can also open this folder as a project in Android Studio and run things from there. Nb: Running in Android Studio does not rebuild the rust code automatically.
Benchmarks
Rendering and training are generally faster than gsplat. You can run benchmarks of some of the kernels using cargo bench.
Acknowledgements
gSplat, for their reference version of the kernels
Peter Hedman, George Kopanas & Bernhard Kerbl, for the many discussions & pointers.
The Burn team, for help & improvements to Burn along the way
Raph Levien, for the original version of the GPU radix sort.
GradeEterna, for feedback and their scenes.
Disclaimer
This is not an official Google product. This repository is a forked public version of the google-research repository
About
3D Reconstruction for all
Topics
graphics
reconstruction
gaussian-splatting
Resources
Readme
License
Apache-2.0 license
Uh oh!
There was an error while loading. Please reload this page.
Activity
Stars
2.8k
stars
Watchers
48
watching
Forks
119
forks
Report repository
Releases
3
v0.3.0
Latest
Sep 14, 2025
+ 2 releases
Packages
0
No packages published
Uh oh!
There was an error while loading. Please reload this page.
Contributors
11
Languages
Rust
86.4%
WGSL
10.9%
Python
1.1%
TypeScript
0.7%
Java
0.6%
Dockerfile
0.2%
JavaScript
0.1%
Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Community
Docs
Contact
Manage cookies
Do not share my personal information
You can’t perform that action at this time.