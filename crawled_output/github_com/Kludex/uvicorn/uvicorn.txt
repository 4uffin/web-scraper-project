GitHub - Kludex/uvicorn: An ASGI web server, for Python. ðŸ¦„
Skip to content
Navigation Menu
Toggle navigation
Sign in
Appearance settings
Platform
GitHub Copilot
Write better code with AI
GitHub Spark
New
Build and deploy intelligent apps
GitHub Models
New
Manage and compare prompts
GitHub Advanced Security
Find and fix vulnerabilities
Actions
Automate any workflow
Codespaces
Instant dev environments
Issues
Plan and track work
Code Review
Manage code changes
Discussions
Collaborate outside of code
Code Search
Find more, search less
Explore
Why GitHub
Documentation
GitHub Skills
Blog
Integrations
GitHub Marketplace
MCP Registry
View all features
Solutions
By company size
Enterprises
Small and medium teams
Startups
Nonprofits
By use case
App Modernization
DevSecOps
DevOps
CI/CD
View all use cases
By industry
Healthcare
Financial services
Manufacturing
Government
View all industries
View all solutions
Resources
Topics
AI
DevOps
Security
Software Development
View all
Explore
Learning Pathways
Events & Webinars
Ebooks & Whitepapers
Customer Stories
Partners
Executive Insights
Open Source
GitHub Sponsors
Fund open source developers
The ReadME Project
GitHub community articles
Repositories
Topics
Trending
Collections
Enterprise
Enterprise platform
AI-powered developer platform
Available add-ons
GitHub Advanced Security
Enterprise-grade security features
Copilot for business
Enterprise-grade AI features
Premium Support
Enterprise-grade 24/7 support
Pricing
Search or jump to...
Search code, repositories, users, issues, pull requests...
Search
Clear
Search syntax tips
Provide feedback
We read every piece of feedback, and take your input very seriously.
Include my email address so I can be contacted
Cancel
Submit feedback
Saved searches
Use saved searches to filter your results more quickly
Name
Query
To see all available qualifiers, see our documentation.
Cancel
Create saved search
Sign in
Sign up
Appearance settings
Resetting focus
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
Kludex
/
uvicorn
Public
Uh oh!
There was an error while loading. Please reload this page.
Notifications
You must be signed in to change notification settings
Fork
855
Star
9.9k
An ASGI web server, for Python. ðŸ¦„
uvicorn.dev
License
BSD-3-Clause license
9.9k
stars
855
forks
Branches
Tags
Activity
Star
Notifications
You must be signed in to change notification settings
Code
Issues
22
Pull requests
40
Discussions
Actions
Security
Uh oh!
There was an error while loading. Please reload this page.
Insights
Additional navigation options
Code
Issues
Pull requests
Discussions
Actions
Security
Insights
Kludex/uvicorn
mainBranchesTagsGo to fileCodeOpen more actions menuFolders and filesNameNameLast commit messageLast commit dateLatest commitÂ History1,393 Commits.github.githubÂ Â docsdocsÂ Â scriptsscriptsÂ Â teststestsÂ Â uvicornuvicornÂ Â .gitignore.gitignoreÂ Â CHANGELOG.mdCHANGELOG.mdÂ Â CITATION.cffCITATION.cffÂ Â LICENSE.mdLICENSE.mdÂ Â README.mdREADME.mdÂ Â mkdocs.ymlmkdocs.ymlÂ Â pyproject.tomlpyproject.tomlÂ Â uv.lockuv.lockÂ Â View all filesRepository files navigationREADMEContributingBSD-3-Clause license
An ASGI web server, for Python.
Documentation: https://uvicorn.dev
Source Code: https://www.github.com/Kludex/uvicorn
Uvicorn is an ASGI web server implementation for Python.
Until recently Python has lacked a minimal low-level server/application interface for
async frameworks. The ASGI specification fills this gap, and means we're now able to
start building a common set of tooling usable across all async frameworks.
Uvicorn supports HTTP/1.1 and WebSockets.
Quickstart
Install using pip:
$ pip install uvicorn
This will install uvicorn with minimal (pure Python) dependencies.
$ pip install 'uvicorn[standard]'
This will install uvicorn with "Cython-based" dependencies (where possible) and other "optional extras".
In this context, "Cython-based" means the following:
the event loop uvloop will be installed and used if possible.
the http protocol will be handled by httptools if possible.
Moreover, "optional extras" means that:
the websocket protocol will be handled by websockets (should you want to use wsproto you'd need to install it manually) if possible.
the --reload flag in development mode will use watchfiles.
windows users will have colorama installed for the colored logs.
python-dotenv will be installed should you want to use the --env-file option.
PyYAML will be installed to allow you to provide a .yaml file to --log-config, if desired.
Create an application, in example.py:
async def app(scope, receive, send):
assert scope['type'] == 'http'
await send({
'type': 'http.response.start',
'status': 200,
'headers': [
(b'content-type', b'text/plain'),
],
})
await send({
'type': 'http.response.body',
'body': b'Hello, world!',
})
Run the server:
$ uvicorn example:app
Why ASGI?
Most well established Python Web frameworks started out as WSGI-based frameworks.
WSGI applications are a single, synchronous callable that takes a request and returns a response.
This doesnâ€™t allow for long-lived connections, like you get with long-poll HTTP or WebSocket connections,
which WSGI doesn't support well.
Having an async concurrency model also allows for options such as lightweight background tasks,
and can be less of a limiting factor for endpoints that have long periods being blocked on network
I/O such as dealing with slow HTTP requests.
Alternative ASGI servers
A strength of the ASGI protocol is that it decouples the server implementation
from the application framework. This allows for an ecosystem of interoperating
webservers and application frameworks.
Daphne
The first ASGI server implementation, originally developed to power Django Channels, is the Daphne webserver.
It is run widely in production, and supports HTTP/1.1, HTTP/2, and WebSockets.
Any of the example applications given here can equally well be run using daphne instead.
$ pip install daphne
$ daphne app:App
Hypercorn
Hypercorn was initially part of the Quart web framework, before
being separated out into a standalone ASGI server.
Hypercorn supports HTTP/1.1, HTTP/2, and WebSockets.
It also supports the excellent trio async framework, as an alternative to asyncio.
$ pip install hypercorn
$ hypercorn app:App
Mangum
Mangum is an adapter for using ASGI applications with AWS Lambda & API Gateway.
Granian
Granian is an ASGI compatible Rust HTTP server which supports HTTP/2, TLS and WebSockets.
Uvicorn is BSD licensed code.Designed & crafted with care.â€” ðŸ¦„
â€”
About
An ASGI web server, for Python. ðŸ¦„
uvicorn.dev
Topics
python
http
http-server
asyncio
asgi
Resources
Readme
License
BSD-3-Clause license
Contributing
Contributing
Uh oh!
There was an error while loading. Please reload this page.
Activity
Stars
9.9k
stars
Watchers
97
watching
Forks
855
forks
Report repository
Releases
67
Version 0.37.0
Latest
Sep 23, 2025
+ 66 releases
Sponsor this project
Sponsor
Uh oh!
There was an error while loading. Please reload this page.
Learn more about GitHub Sponsors
Used by 809k
+ 808,624
Contributors
199
+ 185 contributors
Languages
Python
99.7%
Shell
0.3%
Footer
Â© 2025 GitHub,Â Inc.
Footer navigation
Terms
Privacy
Security
Status
Community
Docs
Contact
Manage cookies
Do not share my personal information
You canâ€™t perform that action at this time.