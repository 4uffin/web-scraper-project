GitHub - sentient-agi/ROMA: Recursive-Open-Meta-Agent v0.1 (Beta). A meta-agent framework to build high-performance multi-agent systems.
Skip to content
Navigation Menu
Toggle navigation
Sign in
Appearance settings
Platform
GitHub Copilot
Write better code with AI
GitHub Spark
New
Build and deploy intelligent apps
GitHub Models
New
Manage and compare prompts
GitHub Advanced Security
Find and fix vulnerabilities
Actions
Automate any workflow
Codespaces
Instant dev environments
Issues
Plan and track work
Code Review
Manage code changes
Discussions
Collaborate outside of code
Code Search
Find more, search less
Explore
Why GitHub
Documentation
GitHub Skills
Blog
Integrations
GitHub Marketplace
MCP Registry
View all features
Solutions
By company size
Enterprises
Small and medium teams
Startups
Nonprofits
By use case
DevSecOps
DevOps
CI/CD
View all use cases
By industry
Healthcare
Financial services
Manufacturing
Government
View all industries
View all solutions
Resources
Topics
AI
DevOps
Security
Software Development
View all
Explore
Learning Pathways
Events & Webinars
Ebooks & Whitepapers
Customer Stories
Partners
Executive Insights
Open Source
GitHub Sponsors
Fund open source developers
The ReadME Project
GitHub community articles
Repositories
Topics
Trending
Collections
Enterprise
Enterprise platform
AI-powered developer platform
Available add-ons
GitHub Advanced Security
Enterprise-grade security features
Copilot for business
Enterprise-grade AI features
Premium Support
Enterprise-grade 24/7 support
Pricing
Search or jump to...
Search code, repositories, users, issues, pull requests...
Search
Clear
Search syntax tips
Provide feedback
We read every piece of feedback, and take your input very seriously.
Include my email address so I can be contacted
Cancel
Submit feedback
Saved searches
Use saved searches to filter your results more quickly
Name
Query
To see all available qualifiers, see our documentation.
Cancel
Create saved search
Sign in
Sign up
Appearance settings
Resetting focus
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
sentient-agi
/
ROMA
Public
Notifications
You must be signed in to change notification settings
Fork
442
Star
3.3k
Recursive-Open-Meta-Agent v0.1 (Beta). A meta-agent framework to build high-performance multi-agent systems.
License
Apache-2.0 license
3.3k
stars
442
forks
Branches
Tags
Activity
Star
Notifications
You must be signed in to change notification settings
Code
Issues
19
Pull requests
6
Actions
Projects
0
Security
Uh oh!
There was an error while loading. Please reload this page.
Insights
Additional navigation options
Code
Issues
Pull requests
Actions
Projects
Security
Insights
sentient-agi/ROMA
mainBranchesTagsGo to fileCodeOpen more actions menuFolders and filesNameNameLast commit messageLast commit dateLatest commit History278 Commitsassetsassets  dockerdocker  docsdocs  evalsevals  frontendfrontend  notebooksnotebooks  romaroma  src/sentientresearchagentsrc/sentientresearchagent  .env.example.env.example  .gitignore.gitignore  .python-version.python-version  CHANGELOG.mdCHANGELOG.md  CITATION.cffCITATION.cff  LICENSELICENSE  MakefileMakefile  README.mdREADME.md  fastapi_server.pyfastapi_server.py  pyproject.tomlpyproject.toml  quickstart.shquickstart.sh  sentient.yamlsentient.yaml  setup.shsetup.sh  uv.lockuv.lock  View all filesRepository files navigationREADMEApache-2.0 license
ROMA: Recursive Open Meta-Agents
Building hierarchical high-performance multi-agent systems made easy! (Beta)
Technical Blog •
Paper (Coming soon) •
Build Agents for $$$
📖 Documentation
🚀 Introduction - Understand the vision and architecture behind ROMA
📦 Setup - Detailed configuration options and environment setup
🤖 Agents Guide - Learn how to create and customize your own agents
⚙️ Configuration - Detailed configuration options and environment setup
🗺️ Roadmap - See what's coming next for ROMA
🎯 What is ROMA?
ROMA is a meta-agent framework that uses recursive hierarchical structures to solve complex problems. By breaking down tasks into parallelizable components, ROMA enables agents to tackle sophisticated reasoning challenges while maintaining transparency that makes context-engineering and iteration straightforward. The framework offers parallel problem solving where agents work simultaneously on different parts of complex tasks, transparent development with a clear structure for easy debugging, and proven performance demonstrated through our search agent's strong benchmark results. We've shown the framework's effectiveness, but this is just the beginning. As an open-source and extensible platform, ROMA is designed for community-driven development, allowing you to build and customize agents for your specific needs while benefiting from the collective improvements of the community.
🏗️ How It Works
ROMA framework processes tasks through a recursive plan–execute loop:
def solve(task):
if is_atomic(task):
# Step 1: Atomizer
return execute(task)
# Step 2: Executor
else:
subtasks = plan(task)
# Step 2: Planner
results = []
for subtask in subtasks:
results.append(solve(subtask))
# Recursive call
return aggregate(results)
# Step 3: Aggregator
# Entry point:
answer = solve(initial_request)
Atomizer – Decides whether a request is atomic (directly executable) or requires planning.
Planner – If planning is needed, the task is broken into smaller subtasks. Each subtask is fed back into the Atomizer, making the process recursive.
Executors – Handle atomic tasks. Executors can be LLMs, APIs, or even other agents — as long as they implement an agent.execute() interface.
Aggregator – Collects and integrates results from subtasks. Importantly, the Aggregator produces the answer to the original parent task, not just raw child outputs.
📐 Information Flow
Top-down: Tasks are decomposed into subtasks recursively.
Bottom-up: Subtask results are aggregated upwards into solutions for parent tasks.
Left-to-right: If a subtask depends on the output of a previous one, it waits until that subtask completes before execution.
This structure makes the system flexible, recursive, and dependency-aware — capable of decomposing complex problems into smaller steps while ensuring results are integrated coherently.
Click to view the system flow diagram
flowchart TB
A[Your Request] --> B{Atomizer}
B -->|Plan Needed| C[Planner]
B -->|Atomic Task| D[Executor]
%% Planner spawns subtasks
C --> E[Subtasks]
E --> G[Aggregator]
%% Recursion
E -.-> B
%% Execution + Aggregation
D --> F[Final Result]
G --> F
style A fill:#e1f5fe
style F fill:#c8e6c9
style B fill:#fff3e0
style C fill:#ffe0b2
style D fill:#d1c4e9
style G fill:#c5cae9
Loading
🚀 30-Second Quick Start
git clone https://github.com/sentient-agi/ROMA.git
cd ROMA
# Run the automated setup
./setup.sh
Choose between:
Docker Setup (Recommended) - One-command setup with isolation
Native Setup - Direct installation for development
🛠️ Technical Stack
Framework: Built on AgnoAgents
Backend: Python 3.12+ with FastAPI/Flask
Frontend: React + TypeScript with real-time WebSocket
LLM Support: Any provider via LiteLLM
Data Persistence: Enterprise S3 mounting with security validation
🔒 goofys FUSE mounting for zero-latency file access
🛡️ Path injection protection with comprehensive validation
🔐 AWS credentials verification before operations
📁 Dynamic Docker Compose with secure volume mounting
Code Execution: E2B sandboxes with unified S3 integration
Security: Production-grade validation and error handling
Features: Multi-modal, tools, MCP, hooks, caching
📦 Installation Options
Quick Start (Recommended)
# Main setup (choose Docker or Native)
./setup.sh
# Optional: Setup E2B sandbox integration
./setup.sh --e2b
# Test E2B integration
./setup.sh --test-e2b
Command Line Options
./setup.sh --docker
# Run Docker setup directly
./setup.sh --docker-from-scratch
# Rebuild Docker images/containers from scratch (down -v, no cache)
./setup.sh --native
# Run native setup directly (macOS/Ubuntu/Debian)
./setup.sh --e2b
# Setup E2B template (requires E2B_API_KEY + AWS creds)
./setup.sh --test-e2b
# Test E2B template integration
./setup.sh --help
# Show all available options
Manual Installation
See setup docs for detailed instructions.
🏗️ Optional: E2B Sandbox Integration
For secure code execution capabilities, optionally set up E2B sandboxes:
# After main setup, configure E2B (requires E2B_API_KEY and AWS credentials in .env)
./setup.sh --e2b
# Test E2B integration
./setup.sh --test-e2b
E2B Features:
🔒 Secure Code Execution - Run untrusted code in isolated sandboxes
☁️ S3 Integration - Automatic data sync between local and sandbox environments
🚀 goofys Mounting - High-performance S3 filesystem mounting
🔧 AWS Credentials - Passed securely via Docker build arguments
🤖 Pre-built Agents
Note: These agents are demonstrations built using ROMA's framework through simple vibe-prompting and minimal manual tuning. They showcase how easily you can create high-performance agents with ROMA, rather than being production-final solutions. Our mission is to empower the community to build, share, and get rewarded for creating innovative agent recipes and use-cases.
ROMA comes with example agents that demonstrate the framework's capabilities:
🔍 General Task Solver
A versatile agent powered by ChatGPT Search Preview for handling diverse tasks:
Intelligent Search: Leverages OpenAI's latest search capabilities for real-time information
Flexible Planning: Adapts task decomposition based on query complexity
Multi-Domain: Handles everything from technical questions to creative projects
Quick Prototyping: Perfect for testing ROMA's capabilities without domain-specific setup
Perfect for: General research, fact-checking, exploratory analysis, quick information gathering
🔬 Deep Research Agent
A comprehensive research system that breaks down complex research questions into manageable sub-tasks:
Smart Task Decomposition: Automatically splits research topics into search, analysis, and synthesis phases
Parallel Information Gathering: Executes multiple searches simultaneously for faster results
Multi-Source Integration: Combines results from web search, Wikipedia, and specialized APIs
Intelligent Synthesis: Aggregates findings into coherent, well-structured reports
Perfect for: Academic research, market analysis, competitive intelligence, technical documentation
💹 Crypto Analytics Agent
Specialized financial analysis agent with deep blockchain and DeFi expertise:
Real-Time Market Data: Integrates with Binance, CoinGecko, and DefiLlama APIs
On-Chain Analytics: Access to Arkham Intelligence for wallet tracking and token flows
Technical Analysis: Advanced charting with OHLC data and market indicators
DeFi Metrics: TVL tracking, yield analysis, protocol comparisons
Secure Execution: Runs analysis in E2B sandboxes with data persistence
Perfect for: Token research, portfolio analysis, DeFi protocol evaluation, market trend analysis
All three agents demonstrate ROMA's recursive architecture in action, showing how complex queries that would overwhelm single-pass systems can be elegantly decomposed and solved. They serve as templates and inspiration for building your own specialized agents.
Your First Agent in 5 Minutes
./setup.sh
# Automated setup with Docker or native installation
Access all the pre-defined agents through the frontend on localhost:3000 after setting up the backend on localhost:5000. Please checkout Setup and the Agents guide to get started!
# Your first agent in 3 lines
from sentientresearchagent import SentientAgent
agent = SentientAgent.create()
result = await agent.run("Create a podcast about AI safety")
📊 Benchmarks
We evaluate our simple implementation of a search system using ROMA, called ROMA-Search across three benchmarks: SEAL-0, FRAMES, and SimpleQA.
Below are the performance graphs for each benchmark.
SEAL-0
SealQA is a new challenging benchmark for evaluating Search-Augmented Language models on fact-seeking questions where web search yields conflicting, noisy, or unhelpful results.
FRAMES
View full results
A comprehensive evaluation dataset designed to test the capabilities of Retrieval-Augmented Generation (RAG) systems across factuality, retrieval accuracy, and reasoning.
SimpleQA
View full results
Factuality benchmark that measures the ability for language models to answer short, fact-seeking questions.
✨ Features
🔄 Recursive Task Decomposition
Automatically breaks down complex tasks into manageable subtasks with intelligent dependency management. Runs independent sub-tasks in parallel.
🤖 Agent Agnostic
Works with any provider (OpenAI, Anthropic, Google, local models) through unified interface, as long as it has an agent.run() command, then you can use it!
🔍 Complete Transparency
Stage tracing shows exactly what happens at each step - debug and optimize with full visibility
🔌 Connect Any Tool
Seamlessly integrate external tools and protocols with configurable intervention points. Already includes production-grade connectors such as E2B, file-read-write, and more.
🙏 Acknowledgments
This framework would not have been possible if it wasn't for these amazing open-source contributions!
Inspired by the hierarchical planning approach described in "Beyond Outlining: Heterogeneous Recursive Planning" by Xiong et al.
Pydantic - Data validation using Python type annotations
Agno - Framework for building AI agents
E2B - Cloud runtime for AI agents
📚 Citation
If you use the ROMA repo in your research, please cite:
@software{al_zubi_2025_17052592,
author
= {Al-Zubi, Salah and
Nama, Baran and
Kaz, Arda and
Oh, Sewoong},
title
= {SentientResearchAgent: A Hierarchical AI Agent
Framework for Research and Analysis
},
month
= sep,
year
= 2025,
publisher
= {Zenodo},
version
= {ROMA},
doi
= {10.5281/zenodo.17052592},
url
= {https://doi.org/10.5281/zenodo.17052592},
swhid
= {swh:1:dir:69cd1552103e0333dd0c39fc4f53cb03196017ce
;origin=https://doi.org/10.5281/zenodo.17052591;vi
sit=swh:1:snp:f50bf99634f9876adb80c027361aec9dff97
3433;anchor=swh:1:rel:afa7caa843ce1279f5b4b29b5d3d
5e3fe85edc95;path=salzubi401-ROMA-b31c382
},
}
🌟 Star History
📄 License
This project is licensed under the Apache 2.0 License - see the LICENSE file for details.
About
Recursive-Open-Meta-Agent v0.1 (Beta). A meta-agent framework to build high-performance multi-agent systems.
Resources
Readme
License
Apache-2.0 license
Uh oh!
There was an error while loading. Please reload this page.
Activity
Custom properties
Stars
3.3k
stars
Watchers
122
watching
Forks
442
forks
Report repository
Releases
1
v0.1.0-beta
Latest
Sep 4, 2025
Packages
0
No packages published
Contributors
3
salzubi401
salah alzubi
barannama
arda-sentient
Languages
Python
75.6%
TypeScript
15.1%
Jupyter Notebook
6.3%
Shell
2.5%
CSS
0.2%
Makefile
0.1%
Other
0.2%
Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Community
Docs
Contact
Manage cookies
Do not share my personal information
You can’t perform that action at this time.