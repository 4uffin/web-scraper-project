GitHub - OpenZeppelin/openzeppelin-contracts: OpenZeppelin Contracts is a library for secure smart contract development.
Skip to content
Navigation Menu
Toggle navigation
Sign in
Appearance settings
Platform
GitHub Copilot
Write better code with AI
GitHub Spark
New
Build and deploy intelligent apps
GitHub Models
New
Manage and compare prompts
GitHub Advanced Security
Find and fix vulnerabilities
Actions
Automate any workflow
Codespaces
Instant dev environments
Issues
Plan and track work
Code Review
Manage code changes
Discussions
Collaborate outside of code
Code Search
Find more, search less
Explore
Why GitHub
Documentation
GitHub Skills
Blog
Integrations
GitHub Marketplace
MCP Registry
View all features
Solutions
By company size
Enterprises
Small and medium teams
Startups
Nonprofits
By use case
App Modernization
DevSecOps
DevOps
CI/CD
View all use cases
By industry
Healthcare
Financial services
Manufacturing
Government
View all industries
View all solutions
Resources
Topics
AI
DevOps
Security
Software Development
View all
Explore
Learning Pathways
Events & Webinars
Ebooks & Whitepapers
Customer Stories
Partners
Executive Insights
Open Source
GitHub Sponsors
Fund open source developers
The ReadME Project
GitHub community articles
Repositories
Topics
Trending
Collections
Enterprise
Enterprise platform
AI-powered developer platform
Available add-ons
GitHub Advanced Security
Enterprise-grade security features
Copilot for business
Enterprise-grade AI features
Premium Support
Enterprise-grade 24/7 support
Pricing
Search or jump to...
Search code, repositories, users, issues, pull requests...
Search
Clear
Search syntax tips
Provide feedback
We read every piece of feedback, and take your input very seriously.
Include my email address so I can be contacted
Cancel
Submit feedback
Saved searches
Use saved searches to filter your results more quickly
Name
Query
To see all available qualifiers, see our documentation.
Cancel
Create saved search
Sign in
Sign up
Appearance settings
Resetting focus
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
OpenZeppelin
/
openzeppelin-contracts
Public
Notifications
You must be signed in to change notification settings
Fork
12.2k
Star
26.5k
OpenZeppelin Contracts is a library for secure smart contract development.
openzeppelin.com/contracts
License
MIT license
26.5k
stars
12.2k
forks
Branches
Tags
Activity
Star
Notifications
You must be signed in to change notification settings
Code
Issues
239
Pull requests
60
Actions
Security
Uh oh!
There was an error while loading. Please reload this page.
Insights
Additional navigation options
Code
Issues
Pull requests
Actions
Security
Insights
OpenZeppelin/openzeppelin-contracts
masterBranchesTagsGo to fileCodeOpen more actions menuFolders and filesNameNameLast commit messageLast commit dateLatest commit History3,963 Commits.changeset.changeset  .github.github  .husky.husky  auditsaudits  certoracertora  contractscontracts  docsdocs  hardhathardhat  liblib  scriptsscripts  testtest  .codecov.yml.codecov.yml  .editorconfig.editorconfig  .gitattributes.gitattributes  .gitignore.gitignore  .gitmodules.gitmodules  .mocharc.js.mocharc.js  .prettierrc.prettierrc  .solcover.js.solcover.js  CHANGELOG.mdCHANGELOG.md  CODE_OF_CONDUCT.mdCODE_OF_CONDUCT.md  CONTRIBUTING.mdCONTRIBUTING.md  FUNDING.jsonFUNDING.json  GUIDELINES.mdGUIDELINES.md  LICENSELICENSE  README.mdREADME.md  RELEASING.mdRELEASING.md  SECURITY.mdSECURITY.md  eslint.config.mjseslint.config.mjs  foundry.tomlfoundry.toml  fv-requirements.txtfv-requirements.txt  hardhat.config.jshardhat.config.js  logo.svglogo.svg  netlify.tomlnetlify.toml  package-lock.jsonpackage-lock.json  package.jsonpackage.json  remappings.txtremappings.txt  renovate.jsonrenovate.json  slither.config.jsonslither.config.json  solhint.config.jssolhint.config.js  View all filesRepository files navigationREADMECode of conductContributingMIT licenseSecurity
A library for secure smart contract development. Build on a solid foundation of community-vetted code.
Implementations of standards like ERC20 and ERC721.
Flexible role-based permissioning scheme.
Reusable Solidity components to build custom contracts and complex decentralized systems.
🧙 Not sure how to get started? Check out Contracts Wizard — an interactive smart contract generator.
🏗️ Want to scale your decentralized application? Check out OpenZeppelin Defender — a mission-critical developer security platform to code, audit, deploy, monitor, and operate with confidence.
ImportantOpenZeppelin Contracts uses semantic versioning to communicate backwards compatibility of its API and storage layout. For upgradeable contracts, the storage layout of different major versions should be assumed incompatible, for example, it is unsafe to upgrade from 4.9.3 to 5.0.0. Learn more at Backwards Compatibility.
Overview
Installation
Hardhat (npm)
$ npm install @openzeppelin/contracts
Foundry (git)
WarningWhen installing via git, it is a common error to use the master branch. This is a development branch that should be avoided in favor of tagged releases. The release process involves security measures that the master branch does not guarantee.
WarningFoundry installs the latest version initially, but subsequent forge update commands will use the master branch.
$ forge install OpenZeppelin/openzeppelin-contracts
Add @openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/ in remappings.txt.
Usage
Once installed, you can use the contracts in the library by importing them:
pragma solidity ^0.8.20;
import {ERC721} from "@openzeppelin/contracts/token/ERC721/ERC721.sol";
contract MyCollectible is ERC721 {
constructor() ERC721("MyCollectible", "MCO") {
}
}
If you're new to smart contract development, head to Developing Smart Contracts to learn about creating a new project and compiling your contracts.
To keep your system secure, you should always use the installed code as-is, and neither copy-paste it from online sources nor modify it yourself. The library is designed so that only the contracts and functions you use are deployed, so you don't need to worry about it needlessly increasing gas costs.
Learn More
The guides in the documentation site will teach about different concepts, and how to use the related contracts that OpenZeppelin Contracts provides:
Access Control: decide who can perform each of the actions on your system.
Tokens: create tradeable assets or collectives, and distribute them via Crowdsales.
Utilities: generic useful tools including non-overflowing math, signature verification, and trustless paying systems.
The full API is also thoroughly documented, and serves as a great reference when developing your smart contract application. You can also ask for help or follow Contracts' development in the community forum.
Finally, you may want to take a look at the guides on our blog, which cover several common use cases and good practices. The following articles provide great background reading, though please note that some of the referenced tools have changed, as the tooling in the ecosystem continues to rapidly evolve.
The Hitchhiker’s Guide to Smart Contracts in Ethereum will help you get an overview of the various tools available for smart contract development, and help you set up your environment.
A Gentle Introduction to Ethereum Programming, Part 1 provides very useful information on an introductory level, including many basic concepts from the Ethereum platform.
For a more in-depth dive, you may read the guide Designing the Architecture for Your Ethereum Application, which discusses how to better structure your application and its relationship to the real world.
Security
This project is maintained by OpenZeppelin with the goal of providing a secure and reliable library of smart contract components for the ecosystem. We address security through risk management in various areas such as engineering and open source best practices, scoping and API design, multi-layered review processes, and incident response preparedness.
The OpenZeppelin Contracts Security Center contains more details about the secure development process.
The security policy is detailed in SECURITY.md as well, and specifies how you can report security vulnerabilities, which versions will receive security patches, and how to stay informed about them. We run a bug bounty program on Immunefi to reward the responsible disclosure of vulnerabilities.
The engineering guidelines we follow to promote project quality can be found in GUIDELINES.md.
Past audits can be found in audits/.
Smart contracts are a nascent technology and carry a high level of technical risk and uncertainty. Although OpenZeppelin is well known for its security audits, using OpenZeppelin Contracts is not a substitute for a security audit.
OpenZeppelin Contracts is made available under the MIT License, which disclaims all warranties in relation to the project and which limits the liability of those that contribute and maintain the project, including OpenZeppelin. As set out further in the Terms, you acknowledge that you are solely responsible for any use of OpenZeppelin Contracts and you assume all risks associated with any such use.
Contribute
OpenZeppelin Contracts exists thanks to its contributors. There are many ways you can participate and help build high quality software. Check out the contribution guide!
License
OpenZeppelin Contracts is released under the MIT License.
Legal
Your use of this Project is governed by the terms found at www.openzeppelin.com/tos (the "Terms").
About
OpenZeppelin Contracts is a library for secure smart contract development.
openzeppelin.com/contracts
Topics
security
ethereum
smart-contracts
solidity
evm
Resources
Readme
License
MIT license
Code of conduct
Code of conduct
Contributing
Contributing
Security policy
Security policy
Uh oh!
There was an error while loading. Please reload this page.
Activity
Custom properties
Stars
26.5k
stars
Watchers
646
watching
Forks
12.2k
forks
Report repository
Releases
98
v5.4.0
Latest
Jul 17, 2025
+ 97 releases
Used by 306k
+ 305,916
Contributors
514
+ 500 contributors
Languages
Solidity
55.5%
JavaScript
43.8%
Python
0.3%
Shell
0.3%
JSON5
0.1%
Makefile
0.0%
Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Community
Docs
Contact
Manage cookies
Do not share my personal information
You can’t perform that action at this time.