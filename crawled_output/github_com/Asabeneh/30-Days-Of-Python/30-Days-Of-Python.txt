GitHub - Asabeneh/30-Days-Of-Python: 30 days of Python programming challenge is a step-by-step guide to learn the Python programming language in 30 days. This challenge may take more than100 days, follow your own pace.
These videos may help too: https://www.youtube.com/channel/UC7PNRuno1rzYPb1xLa4yktw
Skip to content
Navigation Menu
Toggle navigation
Sign in
Appearance settings
Platform
GitHub Copilot
Write better code with AI
GitHub Spark
New
Build and deploy intelligent apps
GitHub Models
New
Manage and compare prompts
GitHub Advanced Security
Find and fix vulnerabilities
Actions
Automate any workflow
Codespaces
Instant dev environments
Issues
Plan and track work
Code Review
Manage code changes
Discussions
Collaborate outside of code
Code Search
Find more, search less
Explore
Why GitHub
Documentation
GitHub Skills
Blog
Integrations
GitHub Marketplace
MCP Registry
View all features
Solutions
By company size
Enterprises
Small and medium teams
Startups
Nonprofits
By use case
App Modernization
DevSecOps
DevOps
CI/CD
View all use cases
By industry
Healthcare
Financial services
Manufacturing
Government
View all industries
View all solutions
Resources
Topics
AI
DevOps
Security
Software Development
View all
Explore
Learning Pathways
Events & Webinars
Ebooks & Whitepapers
Customer Stories
Partners
Executive Insights
Open Source
GitHub Sponsors
Fund open source developers
The ReadME Project
GitHub community articles
Repositories
Topics
Trending
Collections
Enterprise
Enterprise platform
AI-powered developer platform
Available add-ons
GitHub Advanced Security
Enterprise-grade security features
Copilot for business
Enterprise-grade AI features
Premium Support
Enterprise-grade 24/7 support
Pricing
Search or jump to...
Search code, repositories, users, issues, pull requests...
Search
Clear
Search syntax tips
Provide feedback
We read every piece of feedback, and take your input very seriously.
Include my email address so I can be contacted
Cancel
Submit feedback
Saved searches
Use saved searches to filter your results more quickly
Name
Query
To see all available qualifiers, see our documentation.
Cancel
Create saved search
Sign in
Sign up
Appearance settings
Resetting focus
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
Asabeneh
/
30-Days-Of-Python
Public
Uh oh!
There was an error while loading. Please reload this page.
Notifications
You must be signed in to change notification settings
Fork
9.6k
Star
50.1k
30 days of Python programming challenge is a step-by-step guide to learn the Python programming language in 30 days. This challenge may take more than100 days, follow your own pace. These videos may help too: https://www.youtube.com/channel/UC7PNRuno1rzYPb1xLa4yktw
50.1k
stars
9.6k
forks
Branches
Tags
Activity
Star
Notifications
You must be signed in to change notification settings
Code
Issues
57
Pull requests
142
Actions
Projects
0
Security
Uh oh!
There was an error while loading. Please reload this page.
Insights
Additional navigation options
Code
Issues
Pull requests
Actions
Projects
Security
Insights
Asabeneh/30-Days-Of-Python
masterBranchesTagsGo to fileCodeOpen more actions menuFolders and filesNameNameLast commit messageLast commit dateLatest commit History443 Commits.github.github  01_Day_Introduction01_Day_Introduction  02_Day_Variables_builtin_functions02_Day_Variables_builtin_functions  03_Day_Operators03_Day_Operators  04_Day_Strings04_Day_Strings  05_Day_Lists05_Day_Lists  06_Day_Tuples06_Day_Tuples  07_Day_Sets07_Day_Sets  08_Day_Dictionaries08_Day_Dictionaries  09_Day_Conditionals09_Day_Conditionals  10_Day_Loops10_Day_Loops  11_Day_Functions11_Day_Functions  12_Day_Modules12_Day_Modules  13_Day_List_comprehension13_Day_List_comprehension  14_Day_Higher_order_functions14_Day_Higher_order_functions  15_Day_Python_type_errors15_Day_Python_type_errors  16_Day_Python_date_time16_Day_Python_date_time  17_Day_Exception_handling17_Day_Exception_handling  18_Day_Regular_expressions18_Day_Regular_expressions  19_Day_File_handling19_Day_File_handling  20_Day_Python_package_manager20_Day_Python_package_manager  21_Day_Classes_and_objects21_Day_Classes_and_objects  22_Day_Web_scraping22_Day_Web_scraping  23_Day_Virtual_environment23_Day_Virtual_environment  24_Day_Statistics24_Day_Statistics  25_Day_Pandas25_Day_Pandas  26_Day_Python_web26_Day_Python_web  27_Day_Python_with_mongodb27_Day_Python_with_mongodb  28_Day_API28_Day_API  29_Day_Building_API29_Day_Building_API  30_Day_Conclusions30_Day_Conclusions  ChineseChinese  KoreanKorean  PortuguesePortuguese  datadata  filesfiles  imagesimages  koreankorean  mypackagemypackage  numpy_filesnumpy_files  old_filesold_files  python_for_webpython_for_web  test_filestest_files  .gitignore.gitignore  mymodule.pymymodule.py  numpy.mdnumpy.md  readme.mdreadme.md  View all filesRepository files navigationREADME🐍 30 Days Of Python
Learn with Asabeneh by joining the upcoming CODING BOOTCAMP
# Day
Topics
01
Introduction
02
Variables, Built-in Functions
03
Operators
04
Strings
05
Lists
06
Tuples
07
Sets
08
Dictionaries
09
Conditionals
10
Loops
11
Functions
12
Modules
13
List Comprehension
14
Higher Order Functions
15
Python Type Errors
16
Python Date time
17
Exception Handling
18
Regular Expressions
19
File Handling
20
Python Package Manager
21
Classes and Objects
22
Web Scraping
23
Virtual Environment
24
Statistics
25
Pandas
26
Python web
27
Python with MongoDB
28
API
29
Building API
30
Conclusions
Learn with Asabeneh by joining the upcoming CODING BOOTCAMP
🧡🧡🧡 HAPPY CODING 🧡🧡🧡
Support the author to create more educational materials
30 Days Of Python: Day 1 - Introduction
Author:
Asabeneh Yetayeh
Second Edition: July, 2021
🇧🇷 Portuguese
🇨🇳 中文
Day 2 >>
🐍 30 Days Of Python
📘 Day 1
Welcome
Introduction
Why Python ?
Environment Setup
Installing Python
Python Shell
Installing Visual Studio Code
How to use visual studio code
Basic Python
Python Syntax
Python Indentation
Comments
Data types
Number
String
Booleans
List
Dictionary
Tuple
Set
Checking Data types
Python File
💻 Exercises - Day 1
Exercise: Level 1
Exercise: Level 2
Exercise: Level 3
📘 Day 1
Welcome
Congratulations for deciding to participate in a 30 days of Python programming challenge. In this challenge, you will learn everything you need to be a python programmer and the whole concept of programming. At the end of the challenge, you will get a 30DaysOfPython programming challenge certificate.
If you would like to actively engage in the challenge, you may join the 30DaysOfPython challenge telegram group.
Introduction
Python is a high-level programming language for general-purpose programming. It is an open source, interpreted, objected-oriented programming language. Python was created by a Dutch programmer, Guido van Rossum. The name of the Python programming language was derived from a British sketch comedy series, Monty Python's Flying Circus.
The first version was released on February 20, 1991. This 30 days of Python challenge will help you learn the latest version of Python, Python 3 step by step. The topics are broken down into 30 days, where each day contains several topics with easy-to-understand explanations, real-world examples, and many hands on exercises and projects.
This challenge is designed for beginners and professionals who want to learn python programming language. It may take 30 to 100 days to complete the challenge. People who actively participate in the telegram group have a high probability of completing the challenge.
This challenge is easy to read, written in conversational English, engaging, motivating and at the same time, it is very demanding. You need to allocate much time to finish this challenge. If you are a visual learner, you may get the video lesson on
Washera YouTube channel. You may start from Python for Absolute Beginners video. Subscribe the channel, comment and ask questions on YouTube vidoes and be proactive, the author will eventually notice you.
The author likes to hear your opinion about the challenge, share the author by expressing your thoughts about the 30DaysOfPython challenge. You can leave your testimonial on this link
Why Python ?
It is a programming language which is very close to human language and because of that, it is easy to learn and use.
Python is used by various industries and companies (including Google). It has been used to develop web applications, desktop applications, system administration, and machine learning libraries. Python is a highly embraced language in the data science and machine learning community. I hope this is enough to convince you to start learning Python. Python is eating the world and you are killing it before it eats you.
Environment Setup
Installing Python
To run a python script you need to install python. Let's download python.
If your are a windows user. Click the button encircled in red.
If you are a macOS user. Click the button encircled in red.
To check if python is installed write the following command on your device terminal.
python --version
As you can see from the terminal, I am using Python 3.7.5 version at the moment. Your version of Python might be different from mine by but it should be 3.6 or above. If you mange to see the python version, well done. Python has been installed on your machine. Continue to the next section.
Python Shell
Python is an interpreted scripting language, so it does not need to be compiled. It means it executes the code line by line. Python comes with a Python Shell (Python Interactive Shell). It is used to execute a single python command and get the result.
Python Shell waits for the Python code from the user. When you enter the code, it interprets the code and shows the result in the next line.
Open your terminal or command prompt(cmd) and write:
python
The Python interactive shell is opened and it is waiting for you to write Python code(Python script). You will write your Python script next to this symbol >>> and then click Enter.
Let us write our very first script on the Python scripting shell.
Well done, you wrote your first Python script on Python interactive shell. How do we close the Python interactive shell ?
To close the shell, next to this symbol >> write exit() command and press Enter.
Now, you know how to open the Python interactive shell and how to exit from it.
Python will give you results if you write scripts that Python understands, if not it returns errors. Let's make a deliberate mistake and see what Python will return.
As you can see from the returned error, Python is so clever that it knows the mistake we made and which was Syntax Error: invalid syntax. Using x as multiplication in Python is a syntax error because (x) is not a valid syntax in Python. Instead of (x) we use asterisk (*) for multiplication. The returned error clearly shows what to fix.
The process of identifying and removing errors from a program is called debugging. Let us debug it by putting * in place of x.
Our bug was fixed, the code ran and we got a result we were expecting. As a programmer you will see such kind of errors on daily basis. It is good to know how to debug. To be good at debugging you should understand what kind of errors you are facing. Some of the Python errors you may encounter are SyntaxError, IndexError, NameError, ModuleNotFoundError, KeyError, ImportError, AttributeError, TypeError, ValueError, ZeroDivisionError etc. We will see more about different Python error types in later sections.
Let us practice more how to use Python interactive shell. Go to your terminal or command prompt and write the word python.
The Python interactive shell is opened. Let us do some basic mathematical operations (addition, subtraction, multiplication, division, modulus,
exponential).
Let us do some maths first before we write any Python code:
2 + 3 is 5
3 - 2 is 1
3 * 2 is 6
3 / 2 is 1.5
3 ** 2 is the same as 3 * 3
In python we have the following additional operations:
3 % 2 = 1 => which means finding the remainder
3 // 2 = 1 => which means removing the remainder
Let us change the above mathematical expressions to Python code. The Python shell has been opened and let us write a comment at the very beginning of the shell.
A comment is a part of the code which is not executed by python. So we can leave some text in our code to make our code more readable. Python does not run the comment part. A comment in python starts with hash(#) symbol.
This is how you write a comment in python
# comment starts with hash
# this is a python comment, because it starts with a (#) symbol
Before we move on to the next section, let us practice more on the Python interactive shell. Close the opened shell by writing exit() on the shell and open it again and let us practice how to write text on the Python shell.
Installing Visual Studio Code
The Python interactive shell is good to try and test small script codes but it will not be for a big project. In real work environment, developers use different code editors to write codes. In this 30 days of Python programming challenge we will use visual studio code. Visual studio code is a very popular open source text editor. I am a fan of vscode and I would recommend to download visual studio code, but if you are in favor of other editors, feel free to follow with what you have.
If you installed visual studio code, let us see how to use it.
If you prefer a video, you can follow this Visual Studio Code for Python Video tutorial
How to use visual studio code
Open the visual studio code by double clicking the visual studio icon. When you open it you will get this kind of interface. Try to interact with the labeled icons.
Create a folder named 30DaysOfPython on your desktop. Then open it using visual studio code.
After opening it you will see shortcuts for creating files and folders inside of 30DaysOfPython project's directory. As you can see below, I have created the very first file, helloworld.py. You can do the same.
After a long day of coding, you want to close your code editor, right? This is how you will close the opened project.
Congratulations, you have finished setting up the development environment. Let us start coding.
Basic Python
Python Syntax
A Python script can be written in Python interactive shell or in the code editor. A Python file has an extension .py.
Python Indentation
An indentation is a white space in a text. Indentation in many languages is used to increase code readability; however, Python uses indentation to create blocks of code. In other programming languages, curly brackets are used to create code blocks instead of indentation. One of the common bugs when writing Python code is incorrect indentation.
Comments
Comments play a crucial role in enhancing code readability and allowing developers to leave notes within their code. In Python, any text preceded by a hash (#) symbol is considered a comment and is not executed when the code runs.
Example: Single Line Comment
# This is the first comment
# This is the second comment
# Python is eating the world
Example: Multiline Comment
Triple quote can be used for multiline comment if it is not assigned to a variable
"""This is multiline comment
multiline comment takes multiple lines.
python is eating the world
"""
Data types
In Python there are several types of data types. Let us get started with the most common ones. Different data types will be covered in detail in other sections. For the time being, let us just go through the different data types and get familiar with them. You do not have to have a clear understanding now.
Number
Integer: Integer(negative, zero and positive) numbers
Example:
... -3, -2, -1, 0, 1, 2, 3 ...
Float: Decimal number
Example
... -3.5, -2.25, -1.0, 0.0, 1.1, 2.2, 3.5 ...
Complex
Example
1 + j, 2 + 4j
String
A collection of one or more characters under a single or double quote. If a string is more than one sentence then we use a triple quote.
Example:
'Asabeneh'
'Finland'
'Python'
'I love teaching'
'I hope you are enjoying the first day of 30DaysOfPython Challenge'
Booleans
A boolean data type is either a True or False value. T and F should be always uppercase.
Example:
True
#
Is the light on? If it is on, then the value is True
False # Is the light on? If it is off, then the value is False
List
Python list is an ordered collection which allows to store different data type items. A list is similar to an array in JavaScript.
Example:
[0, 1, 2, 3, 4, 5]
# all are the same data types - a list of numbers
['Banana', 'Orange', 'Mango', 'Avocado'] # all the same data types - a list of strings (fruits)
['Finland','Estonia', 'Sweden','Norway'] # all the same data types - a list of strings (countries)
['Banana', 10, False, 9.81] # different data types in the list - string, integer, boolean and float
Dictionary
A Python dictionary object is an unordered collection of data in a key value pair format.
Example:
{
'first_name':'Asabeneh',
'last_name':'Yetayeh',
'country':'Finland',
'age':250,
'is_married':True,
'skills':['JS', 'React', 'Node', 'Python']
}
Tuple
A tuple is an ordered collection of different data types like list but tuples can not be modified once they are created. They are immutable.
Example:
('Asabeneh', 'Pawel', 'Brook', 'Abraham', 'Lidiya') # Names
('Earth', 'Jupiter', 'Neptune', 'Mars', 'Venus', 'Saturn', 'Uranus', 'Mercury') # planets
Set
A set is a collection of data types similar to list and tuple. Unlike list and tuple, set is not an ordered collection of items. Like in Mathematics, set in Python stores only unique items.
In later sections, we will go in detail about each and every Python data type.
Example:
{2, 4, 3, 5}
{3.14, 9.81, 2.7} # order is not important in set
Checking Data types
To check the data type of certain data/variable we use the type function. In the following terminal you will see different python data types:
Python File
First open your project folder, 30DaysOfPython. If you don't have this folder, create a folder name called 30DaysOfPython. Inside this folder, create a file called helloworld.py. Now, let's do what we did on python interactive shell using visual studio code.
The Python interactive shell was printing without using print but on visual studio code to see our result we should use a built in function _print(). The print() built-in function takes one or more arguments as follows print('arument1', 'argument2', 'argument3'). See the examples below.
Example:
The file name is helloworld.py
# Day 1 - 30DaysOfPython Challenge
print(2 + 3)
# addition(+)
print(3 - 1)
# subtraction(-)
print(2 * 3)
# multiplication(*)
print(3 / 2)
# division(/)
print(3 ** 2)
# exponential(**)
print(3 % 2)
# modulus(%)
print(3 // 2)
# Floor division operator(//)
# Checking data types
print(type(10))
# Int
print(type(3.14))
# Float
print(type(1 + 3j))
# Complex number
print(type('Asabeneh'))
# String
print(type([1, 2, 3]))
# List
print(type({'name':'Asabeneh'})) # Dictionary
print(type({9.8, 3.14, 2.7}))
# Set
print(type((9.8, 3.14, 2.7)))
# Tuple
To run the python file check the image below. You can run the python file either by running the green button on Visual Studio Code or by typing python helloworld.py in the terminal .
🌕
You are amazing. You have just completed day 1 challenge and you are on your way to greatness. Now do some exercises for your brain and muscles.
💻 Exercises - Day 1
Exercise: Level 1
Check the python version you are using
Open the python interactive shell and do the following operations. The operands are 3 and 4.
addition(+)
subtraction(-)
multiplication(*)
modulus(%)
division(/)
exponential(**)
floor division operator(//)
Write strings on the python interactive shell. The strings are the following:
Your name
Your family name
Your country
I am enjoying 30 days of python
Check the data types of the following data:
10
9.8
3.14
4 - 4j
['Asabeneh', 'Python', 'Finland']
Your name
Your family name
Your country
Exercise: Level 2
Create a folder named day_1 inside 30DaysOfPython folder. Inside day_1 folder, create a python file helloworld.py and repeat questions 1, 2, 3 and 4. Remember to use print() when you are working on a python file. Navigate to the directory where you have saved your file, and run it.
Exercise: Level 3
Write an example for different Python data types such as Number(Integer, Float, Complex), String, Boolean, List, Tuple, Set and Dictionary.
Find an Euclidian distance between (2, 3) and (10, 8)
🎉 CONGRATULATIONS ! 🎉
Day 2 >>
About
30 days of Python programming challenge is a step-by-step guide to learn the Python programming language in 30 days. This challenge may take more than100 days, follow your own pace. These videos may help too: https://www.youtube.com/channel/UC7PNRuno1rzYPb1xLa4yktw
Topics
github
python
heroku
flask
mongodb
numpy
pandas
python3
matplotlib
30-days-of-python
Resources
Readme
Uh oh!
There was an error while loading. Please reload this page.
Activity
Stars
50.1k
stars
Watchers
880
watching
Forks
9.6k
forks
Report repository
Releases
No releases published
Sponsor this project
Uh oh!
There was an error while loading. Please reload this page.
Learn more about GitHub Sponsors
Packages
0
No packages published
Uh oh!
There was an error while loading. Please reload this page.
Contributors
15
Languages
Python
94.7%
CSS
2.7%
HTML
2.6%
Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Community
Docs
Contact
Manage cookies
Do not share my personal information
You can’t perform that action at this time.