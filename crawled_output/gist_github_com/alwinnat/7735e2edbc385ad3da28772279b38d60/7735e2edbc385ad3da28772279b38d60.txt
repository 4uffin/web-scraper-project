Bit_Converter_Example.py · GitHub
Skip to content
Search Gists
Search Gists
All gists
Back to GitHub
Sign in
Sign up
Sign in
Sign up
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
Instantly share code, notes, and snippets.
alwinnat/Bit_Converter_Example.py
Last active
September 23, 2025 17:03
Show Gist options
Download ZIP
Star
2
(2)
You must be signed in to star a gist
Fork
0
(0)
You must be signed in to fork a gist
Embed
Embed
Embed this gist in your website.
Share
Copy sharable link for this gist.
Clone via HTTPS
Clone using the web URL.
Learn more about clone URLs
Clone this repository at &lt;script src=&quot;https://gist.github.com/alwinnat/7735e2edbc385ad3da28772279b38d60.js&quot;&gt;&lt;/script&gt;
Save alwinnat/7735e2edbc385ad3da28772279b38d60 to your computer and use it in GitHub Desktop.
Code
Revisions
3
Stars
2
Embed
Embed
Embed this gist in your website.
Share
Copy sharable link for this gist.
Clone via HTTPS
Clone using the web URL.
Learn more about clone URLs
Clone this repository at &lt;script src=&quot;https://gist.github.com/alwinnat/7735e2edbc385ad3da28772279b38d60.js&quot;&gt;&lt;/script&gt;
Save alwinnat/7735e2edbc385ad3da28772279b38d60 to your computer and use it in GitHub Desktop.
Download ZIP
Raw
Bit_Converter_Example.py
# Ein kleines Python-Skript, um Bit-Felder zu interpretieren.
#
# 1 Word = 16 bits = 2 Bytes
# int = 16 bits = 2 Bytes
# uint = 16 bits = 2 Bytes
# udint = 32 bits = 4 Bytes
# Für Entität "Control status" schreiben wir uns erstmal Methoden, um die Werte übersetzen zu können.
#
# Für Zero flow (Bit 0)
def convertToOnOff(value):
if value == 0:
return "OFF"
return "ON"
# Für Valve Status (Bit 2) und Valve control request status (Bit 3)
def convertToStatus(value):
if value == 0:
return "CLOSED"
return "OPEN"
# Für Valve control mode (Bits 4 und 5)
def convertToControlMode(value):
modes = {
0: "Threshold value control",
1: "External input control",
2: "Always open",
3: "Display setting control"
}
return modes.get(value, "N/A")
# Für Cycle status (Bit 6)
def convertToCycleStatus(value):
if value == 0:
return "No cycle measurement in progress"
return "Cycle measurement in progress"
# Die map-Funktion, die eine Zahl und eine Bit-Map entgegennimmt und die konvertierten Werte zurückgibt.
def map(value, bitMap):
# Konvertiert die Zahl in ein (Word) 16-Bit-Binärformat
binary = format(value, '016b')[::-1]
# mit [::-1] wird die Reihenfolge umgedreht, damit Bit 0 ganz links ist.
# Die Reihenfolge wird umgedreht, damit das Ansprechen über den Index einfacher wird. Da die Durchnummerierung der Bits von 0 bis 15 von rechts nach links erfolgt.
# Beispiel:
# Index:
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
# Binär:
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
1
# Dezimal:
3
# Die Ergebnisliste setzt sich aus einem Tuple mit Name und konvertierten Wert zusammen.
results = []
for bits, name, convertFunc in bitMap:
bit_values = ''.join(binary[i] for i in reversed(bits))
# Extrahiert die relevanten Bits
decimal_value = int(''.join(str(b) for b in bit_values), 2) # Konvertiert die extrahierten Bits in eine Dezimalzahl
converted_value = convertFunc(decimal_value) # übergibt die Dezimalzahl an die gemappte Konvertierungsfunktion
results.append((name, converted_value)) # Fügt das Ergebnis der Liste hinzu
return results
# Hier bauen wir jetzt die Übersetzungstabelle für Control Status auf mit:
#
# Array mit den Bit-Positionen.
# Name der Entität
# Delegat mit der Konvertierungsfunktion
#
controlStatusBitMap = [
([0], "Zero flow", lambda x: convertToOnOff(x)),
([2], "Valve Status", lambda x: convertToStatus(x)),
([3], "Valve control request status", lambda x: convertToStatus(x)),
([4, 5], "Valve control mode", lambda x: convertToControlMode(x)),
# Achtung: Hier werden 2 Bits verwendet, um Zahlen von 0 bis 3 abzubilden.
([6], "cycle status", lambda x: convertToCycleStatus(x))
]
# Beispiel mit:
#
# Zero Flow = ON
# Valve Status = CLOSED
# Valve control request status = OPEN
# Valve control mode = Always open
# Cycle status = No cycle measurement in progress
#
# Index:
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
# Binär:
0
0
0
0
0
0
0
0
0
0
1
0
1
0
0
1
# Dezimal:
41
input = 41
# Ausführung der Map-Funktion
results = map(input, controlStatusBitMap)
# Ausgabe der Ergebnisse
for name, value in results:
print(f"{name}: {value}")
Sign up for free
to join this conversation on GitHub.
Already have an account?
Sign in to comment
Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Community
Docs
Contact
Manage cookies
Do not share my personal information
You can’t perform that action at this time.