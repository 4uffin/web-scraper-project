Ordering of Angular component class members. · GitHub
Skip to content
Search Gists
Search Gists
All gists
Back to GitHub
Sign in
Sign up
Sign in
Sign up
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
Instantly share code, notes, and snippets.
LayZeeDK/angular-member-ordering.md
Last active
September 23, 2025 11:55
Show Gist options
Download ZIP
Star
17
(17)
You must be signed in to star a gist
Fork
5
(5)
You must be signed in to fork a gist
Embed
Embed
Embed this gist in your website.
Share
Copy sharable link for this gist.
Clone via HTTPS
Clone using the web URL.
Learn more about clone URLs
Clone this repository at &lt;script src=&quot;https://gist.github.com/LayZeeDK/d068ae084699b35dcdf8354d7dd829bc.js&quot;&gt;&lt;/script&gt;
Save LayZeeDK/d068ae084699b35dcdf8354d7dd829bc to your computer and use it in GitHub Desktop.
Code
Revisions
9
Stars
17
Forks
5
Embed
Embed
Embed this gist in your website.
Share
Copy sharable link for this gist.
Clone via HTTPS
Clone using the web URL.
Learn more about clone URLs
Clone this repository at &lt;script src=&quot;https://gist.github.com/LayZeeDK/d068ae084699b35dcdf8354d7dd829bc.js&quot;&gt;&lt;/script&gt;
Save LayZeeDK/d068ae084699b35dcdf8354d7dd829bc to your computer and use it in GitHub Desktop.
Download ZIP
Ordering of Angular component class members.
Raw
angular-member-ordering.md
Ordering of Angular component class members
Use the following order of groups to organize Angular components:
Injected dependencies.
Private properties.
Data binding properties.
View and content properties.
UI properties.
Component API properties.
Constructor.
Lifecycle hooks.
Event handlers.
Component API methods.
Private methods.
Group
Description
Component API methods
Public methods intended to be used by other components, directives, or services.
Component API properties
Public properties intended to be used by other components, directives, or services.
Data binding properties
Properties decorated by Input/Output or initialized with input/output.
Event handlers
protected methods used by the component template.
Injected dependencies
Services and other dependencies resolved using inject.
Lifecycle hooks
Methods implementing the AfterContentChecked, AfterContentInit, AfterViewChecked, AfterViewInit, DoCheck OnChanges, OnDestroy, or OnInit interfaces.
Private properties
Properties marked by private or #.
UI properties
protected properties used by the component template.
View and content properties
Properties decorated by ContentChild/ContentChildren/ViewChild/ViewChildren or initialized with contentChild/contentChildren/viewChild/viewChildren.
Copy link
jeserkin
commented
Apr 10, 2025
•
edited
Loading
Uh oh!
There was an error while loading. Please reload this page.
Private means private and protected alike?
Do UI properties need to be public? As far as I can tell, template is a child of component class and thus logically private means accessibility only inside class, but protected covers a wider scope (as in template as well).
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
Author
LayZeeDK
commented
Apr 11, 2025
Hi @jeserkin,
Thanks for your interest in these guidelines.
Private means private and protected alike?
No, private as in private (TypeScript-specific) or # (ECMAScript standard).
Do UI properties need to be public? As far as I can tell, template is a child of component class and thus logically private means accessibility only inside class, but protected covers a wider scope (as in template as well).
After these guidelines were written, Angular made it possible to use protected component properties in its corresponding template. I will update the description to suggest protected for UI properties.
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
jeserkin
commented
Apr 15, 2025
•
edited
Loading
Uh oh!
There was an error while loading. Please reload this page.
There are also some values, that are readonly, so maybe, they would also have some spot in the table. Also, let's not forget about static. It is also widely used.
Also this
protected properties used by the component template.
should take into consideration, that input/output signals/Decorators are (or at least from my perspective - should be) public. Yes you can assign protected and it will still be accessible in a usual way, but it doesn't represent the level of isolation as it should.
IMO, if you can provide or listen to it from outside, it is public.
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
sturmf
commented
Aug 4, 2025
Are there any tools that help checking the order is consistent?
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
jeserkin
commented
Aug 6, 2025
I know, that IntelliJ has that support for Java, in some capacity, but not sure about other languages
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
Author
LayZeeDK
commented
Aug 8, 2025
should take into consideration, that input/output signals/Decorators are (or at least from my perspective - should be) public. Yes you can assign protected and it will still be accessible in a usual way, but it doesn't represent the level of isolation as it should.
IMO, if you can provide or listen to it from outside, it is public.
Input and output properties are called data binding properties in this table. Indeed, they must be public (even though we don't have to mention public in TypeScript since everything in JavaScript/TypeScript is public by default), or it may lead to compile time errors.
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
Author
LayZeeDK
commented
Aug 8, 2025
Are there any tools that help checking the order is consistent?
@sturmf
TypeScript ESLint has a member-ordering rule but it doesn't differentiate between Angular-specific class members.
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
jeserkin
commented
Aug 11, 2025
Input and output properties are called data binding properties in this table. Indeed, they must be public (even though we don't have to mention public in TypeScript since everything in JavaScript/TypeScript is public by default), or it may lead to compile time errors.
I think, that regardless of which table line/block is being sorted in code at the moment readonly should be higher. I feel like readonly provides an additional level of stricktness and thus should be also takken into account. e.g.:
private readonly apiService = inject(ApiService);
private someValue = "string";
In terms of Angular I would consider computed also as a readonly.
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Sign up for free
to join this conversation on GitHub.
Already have an account?
Sign in to comment
Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Community
Docs
Contact
Manage cookies
Do not share my personal information
You can’t perform that action at this time.