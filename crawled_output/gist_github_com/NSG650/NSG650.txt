NSG650â€™s gists Â· GitHub
Skip to content
Search Gists
Search Gists
All gists
Back to GitHub
Sign in
Sign up
SignÂ in
SignÂ up
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
Instantly share code, notes, and snippets.
ðŸ”„
Q = U + W
Ankit Kumar
NSG650
ðŸ”„
Q = U + W
Low level memes
467
followers
Â·
59
following
Bangalore, India
07:02
(UTC +05:30)
nsg650.github.io
X
@nsg650
View GitHub Profile
All gists
18
Starred
4
Sort
Recently created
Least recently created
Recently updated
Least recently updated
Sort
Recently created
Least recently created
Recently updated
Least recently updated
1 file
0 forks
0 comments
0 stars
NSG650
/ bf.v
Created
July 16, 2025 14:32
Brainfuck implementation in Verilog
module bf;
reg [7:0] mem [0:255];
reg [7:0] mp = 0;
reg [2:0] code [0:255];
reg [7:0] ip = 0;
reg [7:0] stack [0:255];
reg [7:0] sp = 0;
reg [2:0] state = 0;
reg clk = 0;
2 files
0 forks
0 comments
2 stars
NSG650
/ exploit.c
Last active
April 21, 2025 08:19
WinRing0 LPE using MSR write https://nsg650.github.io/blogs/28-9-2024.html
#include <windows.h>
#include <Psapi.h>
#include <stdio.h>
#define OLS_TYPE 40000
#define IOCTL_OLS_GET_DRIVER_VERSION \
CTL_CODE(OLS_TYPE, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OLS_READ_MSR \
CTL_CODE(OLS_TYPE, 0x821, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_OLS_WRITE_MSR \
1 file
0 forks
0 comments
0 stars
NSG650
/ exploit.c
Last active
April 21, 2025 08:19
WinRing0 LPE PoC on Server 2012 R2 https://nsg650.github.io/blogs/10-8-2024.html
// This PoC has been tested and worked on under Windows Server 2012 R2.
// I was in a hurry and did not want to bother with bypassing the modern security mechanisms provided on NT 10.
// Hence it was tested under Server 2012 R2 which is what I had at the moment.
// Feel free to play around with this and maybe get it working on NT 10 as well.
#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
// ifndefs since TCC doesn't provide these definitions
1 file
0 forks
0 comments
1 star
NSG650
/ ListLoadedDrivers.c
Created
August 3, 2024 17:26
Lists the loaded drivers on a system
#include <windows.h>
#include <winternl.h>
#pragma comment(lib, "ntdll.lib")
typedef struct SYSTEM_MODULE {
ULONG Reserved1;
ULONG Reserved2;
#ifdef _WIN64
ULONG Reserved3;
1 file
0 forks
0 comments
9 stars
NSG650
/ WindowFocusLogger.c
Last active
August 28, 2024 13:28
Logs which processes have received window focus
#include <stdio.h>
#include <Windows.h>
VOID CALLBACK WinEventProcHook(HWINEVENTHOOK hWinEventHook, DWORD event, HWND hwnd,
LONG idObject, LONG idChild, DWORD idEventThread, DWORD dwmsEventTime) {
DWORD ProcessId = 0;
if (GetWindowThreadProcessId(hwnd, &ProcessId) != 0) {
HANDLE ProcessHandle = OpenProcess(PROCESS_QUERY_LIMITED_INFORMATION, FALSE, ProcessId);
if (ProcessHandle != (HANDLE)(-1)) {
char buffer[MAX_PATH] = {0};
1 file
0 forks
0 comments
0 stars
NSG650
/ FatalAppExitA.asm
Last active
April 27, 2024 05:45
This x86_64 assembly program for Windows displays a message using the FatalAppExitA function.
section .text
extern _Start
_Start:
mov rax, [gs:0x60]					; rax = Peb
mov rax, [rax + 0x18]					; rax = Peb->Ldr
mov rsi, [rax + 0x20]					; rsi = Peb->Ldr->InMemoryOrderModuleList
; The first module is the executable itself
3 files
0 forks
0 comments
0 stars
NSG650
/ main.c
Created
April 22, 2024 11:38
Multi threaded matrix multiplications using NT native API
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#include <stdio.h>
#include "native.h"
#include "random.h"
typedef struct _MATRIX {
double **matrix;
ULONG rows;
ULONG columns;
1 file
0 forks
0 comments
0 stars
NSG650
/ lr.py
Last active
February 9, 2024 15:53
Random idea I had for a linear regression algorithm by using medians
# This was put in a hurry will be bad but the key idea is
# - we calculate the slope between every 2 point and take the median out of all those slopes
# - now using the median slope we calculate the value of the b intercept and take the median out of all those b intercepts
# the line formed is y = median_slope * x + median_intercept
# This is probably not the best way. I am open for suggestions.
import matplotlib.pyplot as plt
import random
random_slope = random.randint(1, 10)
1 file
0 forks
0 comments
0 stars
NSG650
/ win95_key_gen.c
Last active
November 26, 2023 12:21
Windows 95 Key generator
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <stddef.h>
#include <string.h>
#include <stdbool.h>
#include <time.h>
#define random_between(min, max) (rand() % (max - min) + min)
1 file
0 forks
0 comments
1 star
NSG650
/ win32_dvd_screensaver.c
Last active
September 21, 2025 00:47
#include <stdio.h>
#include <windows.h>
RECT gUsableAreaCoords = {0};
RECT gCurrentPos = {0};
INT gVelocityX = 5;
INT gVelocityY = 5;
DWORD gLast = 0;
NewerOlder
Footer
Â© 2025 GitHub,Â Inc.
Footer navigation
Terms
Privacy
Security
Status
Community
Docs
Contact
Manage cookies
Do not share my personal information
You canâ€™t perform that action at this time.