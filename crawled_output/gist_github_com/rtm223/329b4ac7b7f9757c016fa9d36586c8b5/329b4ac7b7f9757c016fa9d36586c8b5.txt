Creating a standalone Material Function Expression Node Widget · GitHub
Skip to content
Search Gists
Search Gists
All gists
Back to GitHub
Sign in
Sign up
Sign in
Sign up
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
Instantly share code, notes, and snippets.
rtm223/MaterialNodeSnipped.cpp
Created
September 20, 2025 10:58
Show Gist options
Download ZIP
Star
1
(1)
You must be signed in to star a gist
Fork
0
(0)
You must be signed in to fork a gist
Embed
Embed
Embed this gist in your website.
Share
Copy sharable link for this gist.
Clone via HTTPS
Clone using the web URL.
Learn more about clone URLs
Clone this repository at &lt;script src=&quot;https://gist.github.com/rtm223/329b4ac7b7f9757c016fa9d36586c8b5.js&quot;&gt;&lt;/script&gt;
Save rtm223/329b4ac7b7f9757c016fa9d36586c8b5 to your computer and use it in GitHub Desktop.
Code
Revisions
1
Stars
1
Embed
Embed
Embed this gist in your website.
Share
Copy sharable link for this gist.
Clone via HTTPS
Clone using the web URL.
Learn more about clone URLs
Clone this repository at &lt;script src=&quot;https://gist.github.com/rtm223/329b4ac7b7f9757c016fa9d36586c8b5.js&quot;&gt;&lt;/script&gt;
Save rtm223/329b4ac7b7f9757c016fa9d36586c8b5 to your computer and use it in GitHub Desktop.
Download ZIP
Creating a standalone Material Function Expression Node Widget
Raw
MaterialNodeSnipped.cpp
// Minimum code for standing up an SGraphNodeMaterialBase for a material fucntion
// Note, the various UObjects created here (material etc.) are probably not being kept alive and may be GC'd so will want strong refs if you want to keep your widget alive
UMaterial* material = NewObject<UMaterial>(outer, NAME_None, RF_Standalone | RF_Public);
auto* expression_materialFunction = Cast<UMaterialExpressionMaterialFunctionCall>(UMaterialEditingLibrary::CreateMaterialExpressionEx(material, nullptr, UMaterialExpressionMaterialFunctionCall::StaticClass(), materialFunction));
UMaterialGraph* graph = NewObject<UMaterialGraph>();
graph->Schema = UMaterialGraphSchema::StaticClass();
UMaterialGraphNode* node = graph->AddExpression(expression_materialFunction, true);
TSharedRef<SGraphNodeMaterialBase> nodeWidget = SNew(SGraphNodeMaterialBase, node);
TArray<TSharedRef<SWidget>> pins;
nodeWidget->GetPins(pins);
for(auto pin : pins)
{
TSharedRef<SGraphPin> sPin = StaticCastSharedRef<SGraphPin>(pin);
sPin->SetDiffHighlighted(false);
}
nodeWidget->MarkPrepassAsDirty();
nodeWidget->SlatePrepass();
Copy link
Author
rtm223
commented
Sep 20, 2025
Editor only (obvs)
This node can be rendered out using a widget renderer, or can be placed in any slate hierarchy. It won't be interactable, but all node tooltips (for input/output descriptions should function correctly)
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Sign up for free
to join this conversation on GitHub.
Already have an account?
Sign in to comment
Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Community
Docs
Contact
Manage cookies
Do not share my personal information
You can’t perform that action at this time.