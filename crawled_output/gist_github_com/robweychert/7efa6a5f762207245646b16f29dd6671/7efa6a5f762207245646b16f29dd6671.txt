Python easing functions · GitHub
Skip to content
Search Gists
Search Gists
All gists
Back to GitHub
Sign in
Sign up
Sign in
Sign up
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
Instantly share code, notes, and snippets.
robweychert/python-easing-function.md
Last active
September 26, 2025 00:13
Show Gist options
Download ZIP
Star
18
(18)
You must be signed in to star a gist
Fork
2
(2)
You must be signed in to fork a gist
Embed
Embed
Embed this gist in your website.
Share
Copy sharable link for this gist.
Clone via HTTPS
Clone using the web URL.
Learn more about clone URLs
Clone this repository at &lt;script src=&quot;https://gist.github.com/robweychert/7efa6a5f762207245646b16f29dd6671.js&quot;&gt;&lt;/script&gt;
Save robweychert/7efa6a5f762207245646b16f29dd6671 to your computer and use it in GitHub Desktop.
Code
Revisions
8
Stars
18
Forks
2
Embed
Embed
Embed this gist in your website.
Share
Copy sharable link for this gist.
Clone via HTTPS
Clone using the web URL.
Learn more about clone URLs
Clone this repository at &lt;script src=&quot;https://gist.github.com/robweychert/7efa6a5f762207245646b16f29dd6671.js&quot;&gt;&lt;/script&gt;
Save robweychert/7efa6a5f762207245646b16f29dd6671 to your computer and use it in GitHub Desktop.
Download ZIP
Python easing functions
Raw
python-easing-function.md
Python easing functions
For precision programmatic animation!
Translated from the JavaScript in Sean Yen’s Easing equations
Illustrations adapted from Andrey Sitnik and Ivan Solovev’s Easings.net
Example usage:
duration = 30
for frame in range(duration):
return easeInOutQuad(frame/duration)
linear
def linear(t):
return t
easeInSine
def easeInSine(t):
import math
return -math.cos(t * math.pi / 2) + 1
easeOutSine
def easeOutSine(t):
import math
return math.sin(t * math.pi / 2)
easeInOutSine
def easeInOutSine(t):
import math
return -(math.cos(math.pi * t) - 1) / 2
easeInQuad
def easeInQuad(t):
return t * t
easeOutQuad
def easeOutQuad(t):
return -t * (t - 2)
easeInOutQuad
def easeInOutQuad(t):
t *= 2
if t < 1:
return t * t / 2
else:
t -= 1
return -(t * (t - 2) - 1) / 2
easeInCubic
def easeInCubic(t):
return t * t * t
easeOutCubic
def easeOutCubic(t):
t -= 1
return t * t * t + 1
easeInOutCubic
def easeInOutCubic(t):
t *= 2
if t < 1:
return t * t * t / 2
else:
t -= 2
return (t * t * t + 2) / 2
easeInQuart
def easeInQuart(t):
return t * t * t * t
easeOutQuart
def easeOutQuart(t):
t -= 1
return -(t * t * t * t - 1)
easeInOutQuart
def easeInOutQuart(t):
t *= 2
if t < 1:
return t * t * t * t / 2
else:
t -= 2
return -(t * t * t * t - 2) / 2
easeInQuint
def easeInQuint(t):
return t * t * t * t * t
easeOutQuint
def easeOutQuint(t):
t -= 1
return t * t * t * t * t + 1
easeInOutQuint
def easeInOutQuint(t):
t *= 2
if t < 1:
return t * t * t * t * t / 2
else:
t -= 2
return (t * t * t * t * t + 2) / 2
easeInExpo
def easeInExpo(t):
import math
return math.pow(2, 10 * (t - 1))
easeOutExpo
def easeOutExpo(t):
import math
return -math.pow(2, -10 * t) + 1
easeInOutExpo
def easeInOutExpo(t):
import math
t *= 2
if t < 1:
return math.pow(2, 10 * (t - 1)) / 2
else:
t -= 1
return -math.pow(2, -10 * t) - 1
easeInCirc
def easeInCirc(t):
import math
return 1 - math.sqrt(1 - t * t)
easeOutCirc
def easeOutCirc(t):
import math
t -= 1
return math.sqrt(1 - t * t)
easeInOutCirc
def easeInOutCirc(t):
import math
t *= 2
if t < 1:
return -(math.sqrt(1 - t * t) - 1) / 2
else:
t -= 2
return (math.sqrt(1 - t * t) + 1) / 2
Raw
python-easing-functions.py
def linear(t):
return t
def easeInSine(t):
return -math.cos(t * math.pi / 2) + 1
def easeOutSine(t):
return math.sin(t * math.pi / 2)
def easeInOutSine(t):
return -(math.cos(math.pi * t) - 1) / 2
def easeInQuad(t):
return t * t
def easeOutQuad(t):
return -t * (t - 2)
def easeInOutQuad(t):
t *= 2
if t < 1:
return t * t / 2
else:
t -= 1
return -(t * (t - 2) - 1) / 2
def easeInCubic(t):
return t * t * t
def easeOutCubic(t):
t -= 1
return t * t * t + 1
def easeInOutCubic(t):
t *= 2
if t < 1:
return t * t * t / 2
else:
t -= 2
return (t * t * t + 2) / 2
def easeInQuart(t):
return t * t * t * t
def easeOutQuart(t):
t -= 1
return -(t * t * t * t - 1)
def easeInOutQuart(t):
t *= 2
if t < 1:
return t * t * t * t / 2
else:
t -= 2
return -(t * t * t * t - 2) / 2
def easeInQuint(t):
return t * t * t * t * t
def easeOutQuint(t):
t -= 1
return t * t * t * t * t + 1
def easeInOutQuint(t):
t *= 2
if t < 1:
return t * t * t * t * t / 2
else:
t -= 2
return (t * t * t * t * t + 2) / 2
def easeInExpo(t):
return math.pow(2, 10 * (t - 1))
def easeOutExpo(t):
return -math.pow(2, -10 * t) + 1
def easeInOutExpo(t):
t *= 2
if t < 1:
return math.pow(2, 10 * (t - 1)) / 2
else:
t -= 1
return -math.pow(2, -10 * t) - 1
def easeInCirc(t):
return 1 - math.sqrt(1 - t * t)
def easeOutCirc(t):
t -= 1
return math.sqrt(1 - t * t)
def easeInOutCirc(t):
t *= 2
if t < 1:
return -(math.sqrt(1 - t * t) - 1) / 2
else:
t -= 2
return (math.sqrt(1 - t * t) + 1) / 2
Sign up for free
to join this conversation on GitHub.
Already have an account?
Sign in to comment
Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Community
Docs
Contact
Manage cookies
Do not share my personal information
You can’t perform that action at this time.