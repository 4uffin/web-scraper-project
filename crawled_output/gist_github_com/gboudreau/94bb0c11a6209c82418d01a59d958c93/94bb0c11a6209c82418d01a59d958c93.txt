Export TOTP tokens from Authy · GitHub
Skip to content
Search Gists
Search Gists
All gists
Back to GitHub
Sign in
Sign up
Sign in
Sign up
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
Instantly share code, notes, and snippets.
gboudreau/AuthyToOtherAuthenticator.md
Forked from Ingramz/AuthyToOtherAuthenticator.md
Last active
September 20, 2025 11:36
Show Gist options
Download ZIP
Star
2,302
(2,302)
You must be signed in to star a gist
Fork
287
(287)
You must be signed in to fork a gist
Embed
Embed
Embed this gist in your website.
Share
Copy sharable link for this gist.
Clone via HTTPS
Clone using the web URL.
Learn more about clone URLs
Clone this repository at &lt;script src=&quot;https://gist.github.com/gboudreau/94bb0c11a6209c82418d01a59d958c93.js&quot;&gt;&lt;/script&gt;
Save gboudreau/94bb0c11a6209c82418d01a59d958c93 to your computer and use it in GitHub Desktop.
Code
Revisions
86
Stars
2,296
Forks
287
Embed
Embed
Embed this gist in your website.
Share
Copy sharable link for this gist.
Clone via HTTPS
Clone using the web URL.
Learn more about clone URLs
Clone this repository at &lt;script src=&quot;https://gist.github.com/gboudreau/94bb0c11a6209c82418d01a59d958c93.js&quot;&gt;&lt;/script&gt;
Save gboudreau/94bb0c11a6209c82418d01a59d958c93 to your computer and use it in GitHub Desktop.
Download ZIP
Export TOTP tokens from Authy
Raw
AuthyToOtherAuthenticator.md
Exporting your 2FA tokens from Authy to transfer them into another 2FA application
IMPORTANT - Update regarding deprecation of Authy desktop apps
Past August 2024, Authy stopped supported the desktop version of their apps:
See Authy is shutting down its desktop app | The 2FA app Authy will only be available on Android and iOS starting in August for details.
And indeed, after a while, Authy changed something in their backend which now prevents the old desktop app from logging in. If you are already logged in, then you are in luck, and you can follow the instructions below to export your tokens.
If you are not logged in anymore, but can find a backup of the necessary files, then restore those files, and re-install Authy 2.2.3 following the instructions below, and it should work as expected.
for windows
for Mac (Time Machine)
If you can't go back to a "logged in" state in the desktop app (because you either never used the desktop app, or you did but don't have a backup of the necessary files), then your only options now to export your tokens are 1) to use an Android phone, root it, and use that to access the Authy data, or 2) use an iOS device and mitmproxy to capture communications between the app and Authy's server, and decrypt that. Look in the comments below to find instructions on how to do that:
For iOS and the mitm approach, try this (newest option), or see here (original technique).
The options below are for rooted Android phones:
Post 1
Post 2
Post 3
Post 4
Post 5
Ref: @markuta's script
Ref: [@ShaunLWM mod to markuta's script] https://gist.github.com/gboudreau/94bb0c11a6209c82418d01a59d958c93?permalink_comment_id=5142546#gistcomment-5142546
Post 6
Post 7
You need to install Authy from Play Store, not using an APK. Ref
Using very old Android version (eg. Android 6)? see here
The instructions below explain how to use the Authy desktop app to export your 2FA tokens. If that doesn't work, look for links in the section above, to find other options you can try.
--
This gist, based in part on a gist by Brian Hartvigsen, allows you to export from Authy your TOTP tokens you have stored there.
Those can be "standard" 6-digits / 30 secs tokens, or Authy's own version, the 7-digits / 10 secs tokens.
Since the Authy "desktop" app is a Chromium-based web-app, we'll use the Developer Tools provided by Chromium to execute Javascript code that will export the tokens in JSON or as QR codes. You can then import or manually add those in you preferred application.
Important: If you have any accounts that use the Authy TOTP SDK (eg. Gemini, Twitch, Sendgrid, Twilio, ...), you can NOT delete your Authy account, even after migrating your TOTP tokens to another software! If you do, you could be locking yourself out of all the accounts that require Authy specifically! Your only option here would be to go in those accounts, disable Authy 2FA, and enable another 2FA method. More details here.
Detailed How-To
Install Authy desktop app, version 2.2.3 (the more recent versions won't work).
Note: If you are prompted to update, do NOT do it; the latest version doesn't support --remote-debugging-port needed in point (2) below.
(Click your OS below to get personalized instructions.)
macOS
Download and install this file: https://pkg.authy.com/authy/stable/2.2.3/darwin/x64/Authy%20Desktop-2.2.3.dmg
MD5 hash: ab7e4ae5b88cb71f84394df6989950aa
You can use the following command in Terminal, before launching Authy Desktop, to disable auto-updates:
mkdir -p ~/Library/Caches/com.authy.authy-mac.ShipIt ; rm -rf ~/Library/Caches/com.authy.authy-mac.ShipIt/* ; chmod 500 ~/Library/Caches/com.authy.authy-mac.ShipIt
Windows
You can use the winget (CLI) tool:
winget install --no-upgrade --force -e --id Twilio.Authy -v 2.2.3
Or download and install one of those:
64-bit: https://pkg.authy.com/authy/stable/2.2.3/win32/x64/Authy%20Desktop%20Setup%202.2.3.exe
MD5 hash: efd176d89b280809b9f84fda9ba50840
32-bit: https://pkg.authy.com/authy/stable/2.2.3/win32/x32/Authy%20Desktop%20Setup%202.2.3.exe
MD5 hash: d66d63abb482523ad27dfe676e249fff
Authy will start after installation. Close it ASAP.
To prevent auto-update, go to the %LOCALAPPDATA%\authy folder, and delete Update.exe. Delete the app-2.5.0 folder, if it exists. (The version number will probably be a higher number.) In the app-2.2.3 subfolder, delete Update.exe.
Of note: If you later want to uninstall Authy, you'll need to restore those files, as Update.exe is the executable used by the uninstallation process.
Or, after the app updated, you can change your shortcut to execute "%LOCALAPPDATA%\authy\app-2.2.3\Authy Desktop.exe" --remote-debugging-port=5858 and change the Start in to %LOCALAPPDATA%\authy\app-2.2.3
Even after an update is installed, 2.2.3 is still installed.
Linux (using snap) (recommended)
cd /tmp
# curl -Lo authy.snap https://api.snapcraft.io/api/v1/snaps/download/H8ZpNgIoPyvmkgxOWw5MSzsXK1wRZiHn_18.snap
curl -Lo authy.snap https://filebrowser.patati.ca/api/public/dl/Tk1sjeEi/H8ZpNgIoPyvmkgxOWw5MSzsXK1wRZiHn_18.snap # Copy of above file that is now gone
if ! echo a488d3f3c06672a78f53da144f4325d8 authy.snap | md5sum -c --status ; then
echo "Error: invalid MD5 hash"
else
unsquashfs -q -f -d authy-2.2.3 authy.snap
cd authy-2.2.3/
fi
Linux (using flatpak) (alternative method if snap above doesn't work) (NOT WORKING ANYMORE)
It seems flathub is using the api.snapcraft.io repo behind the scene, so trying to install using the below commands will fail, now that the Authy app was removed from api.snapcraft.io. Try to install directly the snap (using the above method), instead of using flatpak.
flatpak install flathub com.authy.Authy
# Update to the 2.2.3 commit (found this commit using: flatpak remote-info --log flathub com.authy.Authy)
sudo flatpak update --commit=83c0df0dd48bbb6ad851f5cc62d6e0836e56e499c7a79041241809f8296e65cc com.authy.Authy
# Optionally, if you want to export a JSON file, give access to Authy to your Home folders:
sudo flatpak override --filesystem=home com.authy.Authy
Start Authy desktop app, but add the --remote-debugging-port=5858 parameter to the command-line:
macOS
From Terminal.app: open -a "Authy Desktop" --args --remote-debugging-port=5858
Windows
Right-click the Authy desktop shortcut, and in the Target field write --remote-debugging-port=5858 at the end. Then click OK. Double-click the Authy desktop shortcut.
Linux
From a terminal: ./authy --remote-debugging-port=5858 (if you used snap)
or flatpak run com.authy.Authy --remote-debugging-port=5858
(if you used flatpak)
In Authy, Log in so you can see the codes being generated for you.
If you have some codes that show a padlock next to them, you will need to enter your Backup Password before continuing below, or those codes won't be exported correctly (decryptedSeed will be empty).
Open the following URL in Google Chrome (or any Chromium-based browser): http://localhost:5858
Click the Twilio Authy link in that webpage.
In Chrome Developer Tools top navigation bar, go in the Sources tab (if you don't see it, click >> to expand the full list), then select the Snippets sub-tab (tabs on the second line; again, click >> to expand the full list), and finally choose + New snippet.
Careful here: do NOT open the Chrome Developer Tools like you normally do. When you go to http://localhost:5858, and click the Twilio Authy link in that webpage, it will show you Developer Tools for the Authy app. This is where you need to work. Here's a video that shows you exactly where you need to be, when you paste code: https://youtu.be/nArCf8iEqlw
If you'd like to ensure the code below doesn't send anything to a remote server, you can disconnect from the internet now.
In the snippet editor window that appears on the right, paste one of the following code options:
Simplest
This is the simplest form there is, and it will simply show you an object for each code you have in Authy. You can use that if you're scared to run complicated code you don't understand (i.e. the other options below).
appManager.getModel().forEach(i => console.log(i))
Simple
This is still quite simple, but makes it easier to copy-paste everything out of the console in one operation.
appManager.getModel().forEach(i => {
console.log("{");
console.log("
createdDate: " + i.createdDate);
console.log("
accountType: " + i.accountType);
console.log("
name: " + i.name);
console.log("
originalName: " + i.originalName);
console.log("
decryptedSeed: " + i.decryptedSeed);
console.log("}");
})
QR codes
This version will output QR codes that you can scan using another app, from your mobile device.
If you uncomment the last line, you will also get a .json file that contains your tokens (name, secret & URL).
All your Authy tokens will be displayed in the Console at the bottom; either copy-paste the TOTP URI, or scan the QR codes.
// QRious v4.0.2 | (C) 2017 Alasdair Mercer | GPL v3 License Based on jsqrencode | (C) 2010 tz@execpc.com | GPL v3 License
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.QRious=e()}(this,function(){"use strict";function t(t,e){var n;return"function"==typeof Object.create?n=Object.create(t):(s.prototype=t,n=new s,s.prototype=null),e&&i(!0,n,e),n}function e(e,n,s,r){var o=this;return"string"!=typeof e&&(r=s,s=n,n=e,e=null),"function"!=typeof n&&(r=s,s=n,n=function(){return o.apply(this,arguments)}),i(!1,n,o,r),n.prototype=t(o.prototype,s),n.prototype.constructor=n,n.class_=e||o.class_,n.super_=o,n}function i(t,e,i){for(var n,s,a=0,h=(i=o.call(arguments,2)).length;a<h;a++){s=i[a];for(n in s)t&&!r.call(s,n)||(e[n]=s[n])}}function n(){}var s=function(){},r=Object.prototype.hasOwnProperty,o=Array.prototype.slice,a=e;n.class_="Nevis",n.super_=Object,n.extend=a;var h=n,f=h.extend(function(t,e,i){this.qrious=t,this.element=e,this.element.qrious=t,this.enabled=Boolean(i)},{draw:function(t){},getElement:function(){return this.enabled||(this.enabled=!0,this.render()),this.element},getModuleSize:function(t){var e=this.qrious,i=e.padding||0,n=Math.floor((e.size-2*i)/t.width);return Math.max(1,n)},getOffset:function(t){var e=this.qrious,i=e.padding;if(null!=i)return i;var n=this.getModuleSize(t),s=Math.floor((e.size-n*t.width)/2);return Math.max(0,s)},render:function(t){this.enabled&&(this.resize(),this.reset(),this.draw(t))},reset:function(){},resize:function(){}}),c=f.extend({draw:function(t){var e,i,n=this.qrious,s=this.getModuleSize(t),r=this.getOffset(t),o=this.element.getContext("2d");for(o.fillStyle=n.foreground,o.globalAlpha=n.foregroundAlpha,e=0;e<t.width;e++)for(i=0;i<t.width;i++)t.buffer[i*t.width+e]&&o.fillRect(s*e+r,s*i+r,s,s)},reset:function(){var t=this.qrious,e=this.element.getContext("2d"),i=t.size;e.lineWidth=1,e.clearRect(0,0,i,i),e.fillStyle=t.background,e.globalAlpha=t.backgroundAlpha,e.fillRect(0,0,i,i)},resize:function(){var t=this.element;t.width=t.height=this.qrious.size}}),u=h.extend(null,{BLOCK:[0,11,15,19,23,27,31,16,18,20,22,24,26,28,20,22,24,24,26,28,28,22,24,24,26,26,28,28,24,24,26,26,26,28,28,24,26,26,26,28,28]}),l=h.extend(null,{BLOCKS:[1,0,19,7,1,0,16,10,1,0,13,13,1,0,9,17,1,0,34,10,1,0,28,16,1,0,22,22,1,0,16,28,1,0,55,15,1,0,44,26,2,0,17,18,2,0,13,22,1,0,80,20,2,0,32,18,2,0,24,26,4,0,9,16,1,0,108,26,2,0,43,24,2,2,15,18,2,2,11,22,2,0,68,18,4,0,27,16,4,0,19,24,4,0,15,28,2,0,78,20,4,0,31,18,2,4,14,18,4,1,13,26,2,0,97,24,2,2,38,22,4,2,18,22,4,2,14,26,2,0,116,30,3,2,36,22,4,4,16,20,4,4,12,24,2,2,68,18,4,1,43,26,6,2,19,24,6,2,15,28,4,0,81,20,1,4,50,30,4,4,22,28,3,8,12,24,2,2,92,24,6,2,36,22,4,6,20,26,7,4,14,28,4,0,107,26,8,1,37,22,8,4,20,24,12,4,11,22,3,1,115,30,4,5,40,24,11,5,16,20,11,5,12,24,5,1,87,22,5,5,41,24,5,7,24,30,11,7,12,24,5,1,98,24,7,3,45,28,15,2,19,24,3,13,15,30,1,5,107,28,10,1,46,28,1,15,22,28,2,17,14,28,5,1,120,30,9,4,43,26,17,1,22,28,2,19,14,28,3,4,113,28,3,11,44,26,17,4,21,26,9,16,13,26,3,5,107,28,3,13,41,26,15,5,24,30,15,10,15,28,4,4,116,28,17,0,42,26,17,6,22,28,19,6,16,30,2,7,111,28,17,0,46,28,7,16,24,30,34,0,13,24,4,5,121,30,4,14,47,28,11,14,24,30,16,14,15,30,6,4,117,30,6,14,45,28,11,16,24,30,30,2,16,30,8,4,106,26,8,13,47,28,7,22,24,30,22,13,15,30,10,2,114,28,19,4,46,28,28,6,22,28,33,4,16,30,8,4,122,30,22,3,45,28,8,26,23,30,12,28,15,30,3,10,117,30,3,23,45,28,4,31,24,30,11,31,15,30,7,7,116,30,21,7,45,28,1,37,23,30,19,26,15,30,5,10,115,30,19,10,47,28,15,25,24,30,23,25,15,30,13,3,115,30,2,29,46,28,42,1,24,30,23,28,15,30,17,0,115,30,10,23,46,28,10,35,24,30,19,35,15,30,17,1,115,30,14,21,46,28,29,19,24,30,11,46,15,30,13,6,115,30,14,23,46,28,44,7,24,30,59,1,16,30,12,7,121,30,12,26,47,28,39,14,24,30,22,41,15,30,6,14,121,30,6,34,47,28,46,10,24,30,2,64,15,30,17,4,122,30,29,14,46,28,49,10,24,30,24,46,15,30,4,18,122,30,13,32,46,28,48,14,24,30,42,32,15,30,20,4,117,30,40,7,47,28,43,22,24,30,10,67,15,30,19,6,118,30,18,31,47,28,34,34,24,30,20,61,15,30],FINAL_FORMAT:[30660,29427,32170,30877,26159,25368,27713,26998,21522,20773,24188,23371,17913,16590,20375,19104,13663,12392,16177,14854,9396,8579,11994,11245,5769,5054,7399,6608,1890,597,3340,2107],LEVELS:{L:1,M:2,Q:3,H:4}}),_=h.extend(null,{EXPONENT:[1,2,4,8,16,32,64,128,29,58,116,232,205,135,19,38,76,152,45,90,180,117,234,201,143,3,6,12,24,48,96,192,157,39,78,156,37,74,148,53,106,212,181,119,238,193,159,35,70,140,5,10,20,40,80,160,93,186,105,210,185,111,222,161,95,190,97,194,153,47,94,188,101,202,137,15,30,60,120,240,253,231,211,187,107,214,177,127,254,225,223,163,91,182,113,226,217,175,67,134,17,34,68,136,13,26,52,104,208,189,103,206,129,31,62,124,248,237,199,147,59,118,236,197,151,51,102,204,133,23,46,92,184,109,218,169,79,158,33,66,132,21,42,84,168,77,154,41,82,164,85,170,73,146,57,114,228,213,183,115,230,209,191,99,198,145,63,126,252,229,215,179,123,246,241,255,227,219,171,75,150,49,98,196,149,55,110,220,165,87,174,65,130,25,50,100,200,141,7,14,28,56,112,224,221,167,83,166,81,162,89,178,121,242,249,239,195,155,43,86,172,69,138,9,18,36,72,144,61,122,244,245,247,243,251,235,203,139,11,22,44,88,176,125,250,233,207,131,27,54,108,216,173,71,142,0],LOG:[255,0,1,25,2,50,26,198,3,223,51,238,27,104,199,75,4,100,224,14,52,141,239,129,28,193,105,248,200,8,76,113,5,138,101,47,225,36,15,33,53,147,142,218,240,18,130,69,29,181,194,125,106,39,249,185,201,154,9,120,77,228,114,166,6,191,139,98,102,221,48,253,226,152,37,179,16,145,34,136,54,208,148,206,143,150,219,189,241,210,19,92,131,56,70,64,30,66,182,163,195,72,126,110,107,58,40,84,250,133,186,61,202,94,155,159,10,21,121,43,78,212,229,172,115,243,167,87,7,112,192,247,140,128,99,13,103,74,222,237,49,197,254,24,227,165,153,119,38,184,180,124,17,68,146,217,35,32,137,46,55,63,209,91,149,188,207,205,144,135,151,178,220,252,190,97,242,86,211,171,20,42,93,158,132,60,57,83,71,109,65,162,31,45,67,216,183,123,164,118,196,23,73,236,127,12,111,246,108,161,59,82,41,157,85,170,251,96,134,177,187,204,62,90,203,89,95,176,156,169,160,81,11,245,22,235,122,117,44,215,79,174,213,233,230,231,173,232,116,214,244,234,168,80,88,175]}),d=h.extend(null,{BLOCK:[3220,1468,2713,1235,3062,1890,2119,1549,2344,2936,1117,2583,1330,2470,1667,2249,2028,3780,481,4011,142,3098,831,3445,592,2517,1776,2234,1951,2827,1070,2660,1345,3177]}),v=h.extend(function(t){var e,i,n,s,r,o=t.value.length;for(this._badness=[],this._level=l.LEVELS[t.level],this._polynomial=[],this._value=t.value,this._version=0,this._stringBuffer=[];this._version<40&&(this._version++,n=4*(this._level-1)+16*(this._version-1),s=l.BLOCKS[n++],r=l.BLOCKS[n++],e=l.BLOCKS[n++],i=l.BLOCKS[n],n=e*(s+r)+r-3+(this._version<=9),!(o<=n)););this._dataBlock=e,this._eccBlock=i,this._neccBlock1=s,this._neccBlock2=r;var a=this.width=17+4*this._version;this.buffer=v._createArray(a*a),this._ecc=v._createArray(e+(e+i)*(s+r)+r),this._mask=v._createArray((a*(a+1)+1)/2),this._insertFinders(),this._insertAlignments(),this.buffer[8+a*(a-8)]=1,this._insertTimingGap(),this._reverseMask(),this._insertTimingRowAndColumn(),this._insertVersion(),this._syncMask(),this._convertBitStream(o),this._calculatePolynomial(),this._appendEccToData(),this._interleaveBlocks(),this._pack(),this._finish()},{_addAlignment:function(t,e){var i,n=this.buffer,s=this.width;for(n[t+s*e]=1,i=-2;i<2;i++)n[t+i+s*(e-2)]=1,n[t-2+s*(e+i+1)]=1,n[t+2+s*(e+i)]=1,n[t+i+1+s*(e+2)]=1;for(i=0;i<2;i++)this._setMask(t-1,e+i),this._setMask(t+1,e-i),this._setMask(t-i,e-1),this._setMask(t+i,e+1)},_appendData:function(t,e,i,n){var s,r,o,a=this._polynomial,h=this._stringBuffer;for(r=0;r<n;r++)h[i+r]=0;for(r=0;r<e;r++){if(255!==(s=_.LOG[h[t+r]^h[i]]))for(o=1;o<n;o++)h[i+o-1]=h[i+o]^_.EXPONENT[v._modN(s+a[n-o])];else for(o=i;o<i+n;o++)h[o]=h[o+1];h[i+n-1]=255===s?0:_.EXPONENT[v._modN(s+a[0])]}},_appendEccToData:function(){var t,e=0,i=this._dataBlock,n=this._calculateMaxLength(),s=this._eccBlock;for(t=0;t<this._neccBlock1;t++)this._appendData(e,i,n,s),e+=i,n+=s;for(t=0;t<this._neccBlock2;t++)this._appendData(e,i+1,n,s),e+=i+1,n+=s},_applyMask:function(t){var e,i,n,s,r=this.buffer,o=this.width;switch(t){case 0:for(s=0;s<o;s++)for(n=0;n<o;n++)n+s&1||this._isMasked(n,s)||(r[n+s*o]^=1);break;case 1:for(s=0;s<o;s++)for(n=0;n<o;n++)1&s||this._isMasked(n,s)||(r[n+s*o]^=1);break;case 2:for(s=0;s<o;s++)for(e=0,n=0;n<o;n++,e++)3===e&&(e=0),e||this._isMasked(n,s)||(r[n+s*o]^=1);break;case 3:for(i=0,s=0;s<o;s++,i++)for(3===i&&(i=0),e=i,n=0;n<o;n++,e++)3===e&&(e=0),e||this._isMasked(n,s)||(r[n+s*o]^=1);break;case 4:for(s=0;s<o;s++)for(e=0,i=s>>1&1,n=0;n<o;n++,e++)3===e&&(e=0,i=!i),i||this._isMasked(n,s)||(r[n+s*o]^=1);break;case 5:for(i=0,s=0;s<o;s++,i++)for(3===i&&(i=0),e=0,n=0;n<o;n++,e++)3===e&&(e=0),(n&s&1)+!(!e|!i)||this._isMasked(n,s)||(r[n+s*o]^=1);break;case 6:for(i=0,s=0;s<o;s++,i++)for(3===i&&(i=0),e=0,n=0;n<o;n++,e++)3===e&&(e=0),(n&s&1)+(e&&e===i)&1||this._isMasked(n,s)||(r[n+s*o]^=1);break;case 7:for(i=0,s=0;s<o;s++,i++)for(3===i&&(i=0),e=0,n=0;n<o;n++,e++)3===e&&(e=0),(e&&e===i)+(n+s&1)&1||this._isMasked(n,s)||(r[n+s*o]^=1)}},_calculateMaxLength:function(){return this._dataBlock*(this._neccBlock1+this._neccBlock2)+this._neccBlock2},_calculatePolynomial:function(){var t,e,i=this._eccBlock,n=this._polynomial;for(n[0]=1,t=0;t<i;t++){for(n[t+1]=1,e=t;e>0;e--)n[e]=n[e]?n[e-1]^_.EXPONENT[v._modN(_.LOG[n[e]]+t)]:n[e-1];n[0]=_.EXPONENT[v._modN(_.LOG[n[0]]+t)]}for(t=0;t<=i;t++)n[t]=_.LOG[n[t]]},_checkBadness:function(){var t,e,i,n,s,r=0,o=this._badness,a=this.buffer,h=this.width;for(s=0;s<h-1;s++)for(n=0;n<h-1;n++)(a[n+h*s]&&a[n+1+h*s]&&a[n+h*(s+1)]&&a[n+1+h*(s+1)]||!(a[n+h*s]||a[n+1+h*s]||a[n+h*(s+1)]||a[n+1+h*(s+1)]))&&(r+=v.N2);var f=0;for(s=0;s<h;s++){for(i=0,o[0]=0,t=0,n=0;n<h;n++)t===(e=a[n+h*s])?o[i]++:o[++i]=1,f+=(t=e)?1:-1;r+=this._getBadness(i)}f<0&&(f=-f);var c=0,u=f;for(u+=u<<2,u<<=1;u>h*h;)u-=h*h,c++;for(r+=c*v.N4,n=0;n<h;n++){for(i=0,o[0]=0,t=0,s=0;s<h;s++)t===(e=a[n+h*s])?o[i]++:o[++i]=1,t=e;r+=this._getBadness(i)}return r},_convertBitStream:function(t){var e,i,n=this._ecc,s=this._version;for(i=0;i<t;i++)n[i]=this._value.charCodeAt(i);var r=this._stringBuffer=n.slice(),o=this._calculateMaxLength();t>=o-2&&(t=o-2,s>9&&t--);var a=t;if(s>9){for(r[a+2]=0,r[a+3]=0;a--;)e=r[a],r[a+3]|=255&e<<4,r[a+2]=e>>4;r[2]|=255&t<<4,r[1]=t>>4,r[0]=64|t>>12}else{for(r[a+1]=0,r[a+2]=0;a--;)e=r[a],r[a+2]|=255&e<<4,r[a+1]=e>>4;r[1]|=255&t<<4,r[0]=64|t>>4}for(a=t+3-(s<10);a<o;)r[a++]=236,r[a++]=17},_getBadness:function(t){var e,i=0,n=this._badness;for(e=0;e<=t;e++)n[e]>=5&&(i+=v.N1+n[e]-5);for(e=3;e<t-1;e+=2)n[e-2]===n[e+2]&&n[e+2]===n[e-1]&&n[e-1]===n[e+1]&&3*n[e-1]===n[e]&&(0===n[e-3]||e+3>t||3*n[e-3]>=4*n[e]||3*n[e+3]>=4*n[e])&&(i+=v.N3);return i},_finish:function(){this._stringBuffer=this.buffer.slice();var t,e,i=0,n=3e4;for(e=0;e<8&&(this._applyMask(e),(t=this._checkBadness())<n&&(n=t,i=e),7!==i);e++)this.buffer=this._stringBuffer.slice();i!==e&&this._applyMask(i),n=l.FINAL_FORMAT[i+(this._level-1<<3)];var s=this.buffer,r=this.width;for(e=0;e<8;e++,n>>=1)1&n&&(s[r-1-e+8*r]=1,e<6?s[8+r*e]=1:s[8+r*(e+1)]=1);for(e=0;e<7;e++,n>>=1)1&n&&(s[8+r*(r-7+e)]=1,e?s[6-e+8*r]=1:s[7+8*r]=1)},_interleaveBlocks:function(){var t,e,i=this._dataBlock,n=this._ecc,s=this._eccBlock,r=0,o=this._calculateMaxLength(),a=this._neccBlock1,h=this._neccBlock2,f=this._stringBuffer;for(t=0;t<i;t++){for(e=0;e<a;e++)n[r++]=f[t+e*i];for(e=0;e<h;e++)n[r++]=f[a*i+t+e*(i+1)]}for(e=0;e<h;e++)n[r++]=f[a*i+t+e*(i+1)];for(t=0;t<s;t++)for(e=0;e<a+h;e++)n[r++]=f[o+t+e*s];this._stringBuffer=n},_insertAlignments:function(){var t,e,i,n=this._version,s=this.width;if(n>1)for(t=u.BLOCK[n],i=s-7;;){for(e=s-7;e>t-3&&(this._addAlignment(e,i),!(e<t));)e-=t;if(i<=t+9)break;i-=t,this._addAlignment(6,i),this._addAlignment(i,6)}},_insertFinders:function(){var t,e,i,n,s=this.buffer,r=this.width;for(t=0;t<3;t++){for(e=0,n=0,1===t&&(e=r-7),2===t&&(n=r-7),s[n+3+r*(e+3)]=1,i=0;i<6;i++)s[n+i+r*e]=1,s[n+r*(e+i+1)]=1,s[n+6+r*(e+i)]=1,s[n+i+1+r*(e+6)]=1;for(i=1;i<5;i++)this._setMask(n+i,e+1),this._setMask(n+1,e+i+1),this._setMask(n+5,e+i),this._setMask(n+i+1,e+5);for(i=2;i<4;i++)s[n+i+r*(e+2)]=1,s[n+2+r*(e+i+1)]=1,s[n+4+r*(e+i)]=1,s[n+i+1+r*(e+4)]=1}},_insertTimingGap:function(){var t,e,i=this.width;for(e=0;e<7;e++)this._setMask(7,e),this._setMask(i-8,e),this._setMask(7,e+i-7);for(t=0;t<8;t++)this._setMask(t,7),this._setMask(t+i-8,7),this._setMask(t,i-8)},_insertTimingRowAndColumn:function(){var t,e=this.buffer,i=this.width;for(t=0;t<i-14;t++)1&t?(this._setMask(8+t,6),this._setMask(6,8+t)):(e[8+t+6*i]=1,e[6+i*(8+t)]=1)},_insertVersion:function(){var t,e,i,n,s=this.buffer,r=this._version,o=this.width;if(r>6)for(t=d.BLOCK[r-7],e=17,i=0;i<6;i++)for(n=0;n<3;n++,e--)1&(e>11?r>>e-12:t>>e)?(s[5-i+o*(2-n+o-11)]=1,s[2-n+o-11+o*(5-i)]=1):(this._setMask(5-i,2-n+o-11),this._setMask(2-n+o-11,5-i))},_isMasked:function(t,e){var i=v._getMaskBit(t,e);return 1===this._mask[i]},_pack:function(){var t,e,i,n=1,s=1,r=this.width,o=r-1,a=r-1,h=(this._dataBlock+this._eccBlock)*(this._neccBlock1+this._neccBlock2)+this._neccBlock2;for(e=0;e<h;e++)for(t=this._stringBuffer[e],i=0;i<8;i++,t<<=1){128&t&&(this.buffer[o+r*a]=1);do{s?o--:(o++,n?0!==a?a--:(n=!n,6===(o-=2)&&(o--,a=9)):a!==r-1?a++:(n=!n,6===(o-=2)&&(o--,a-=8))),s=!s}while(this._isMasked(o,a))}},_reverseMask:function(){var t,e,i=this.width;for(t=0;t<9;t++)this._setMask(t,8);for(t=0;t<8;t++)this._setMask(t+i-8,8),this._setMask(8,t);for(e=0;e<7;e++)this._setMask(8,e+i-7)},_setMask:function(t,e){var i=v._getMaskBit(t,e);this._mask[i]=1},_syncMask:function(){var t,e,i=this.width;for(e=0;e<i;e++)for(t=0;t<=e;t++)this.buffer[t+i*e]&&this._setMask(t,e)}},{_createArray:function(t){var e,i=[];for(e=0;e<t;e++)i[e]=0;return i},_getMaskBit:function(t,e){var i;return t>e&&(i=t,t=e,e=i),i=e,i+=e*e,i>>=1,i+=t},_modN:function(t){for(;t>=255;)t=((t-=255)>>8)+(255&t);return t},N1:3,N2:3,N3:40,N4:10}),p=v,m=f.extend({draw:function(){this.element.src=this.qrious.toDataURL()},reset:function(){this.element.src=""},resize:function(){var t=this.element;t.width=t.height=this.qrious.size}}),g=h.extend(function(t,e,i,n){this.name=t,this.modifiable=Boolean(e),this.defaultValue=i,this._valueTransformer=n},{transform:function(t){var e=this._valueTransformer;return"function"==typeof e?e(t,this):t}}),k=h.extend(null,{abs:function(t){return null!=t?Math.abs(t):null},hasOwn:function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},noop:function(){},toUpperCase:function(t){return null!=t?t.toUpperCase():null}}),w=h.extend(function(t){this.options={},t.forEach(function(t){this.options[t.name]=t},this)},{exists:function(t){return null!=this.options[t]},get:function(t,e){return w._get(this.options[t],e)},getAll:function(t){var e,i=this.options,n={};for(e in i)k.hasOwn(i,e)&&(n[e]=w._get(i[e],t));return n},init:function(t,e,i){"function"!=typeof i&&(i=k.noop);var n,s;for(n in this.options)k.hasOwn(this.options,n)&&(s=this.options[n],w._set(s,s.defaultValue,e),w._createAccessor(s,e,i));this._setAll(t,e,!0)},set:function(t,e,i){return this._set(t,e,i)},setAll:function(t,e){return this._setAll(t,e)},_set:function(t,e,i,n){var s=this.options[t];if(!s)throw new Error("Invalid option: "+t);if(!s.modifiable&&!n)throw new Error("Option cannot be modified: "+t);return w._set(s,e,i)},_setAll:function(t,e,i){if(!t)return!1;var n,s=!1;for(n in t)k.hasOwn(t,n)&&this._set(n,t[n],e,i)&&(s=!0);return s}},{_createAccessor:function(t,e,i){var n={get:function(){return w._get(t,e)}};t.modifiable&&(n.set=function(n){w._set(t,n,e)&&i(n,t)}),Object.defineProperty(e,t.name,n)},_get:function(t,e){return e["_"+t.name]},_set:function(t,e,i){var n="_"+t.name,s=i[n],r=t.transform(null!=e?e:t.defaultValue);return i[n]=r,r!==s}}),M=w,b=h.extend(function(){this._services={}},{getService:function(t){var e=this._services[t];if(!e)throw new Error("Service is not being managed with name: "+t);return e},setService:function(t,e){if(this._services[t])throw new Error("Service is already managed with name: "+t);e&&(this._services[t]=e)}}),B=new M([new g("background",!0,"white"),new g("backgroundAlpha",!0,1,k.abs),new g("element"),new g("foreground",!0,"black"),new g("foregroundAlpha",!0,1,k.abs),new g("level",!0,"L",k.toUpperCase),new g("mime",!0,"image/png"),new g("padding",!0,null,k.abs),new g("size",!0,100,k.abs),new g("value",!0,"")]),y=new b,O=h.extend(function(t){B.init(t,this,this.update.bind(this));var e=B.get("element",this),i=y.getService("element"),n=e&&i.isCanvas(e)?e:i.createCanvas(),s=e&&i.isImage(e)?e:i.createImage();this._canvasRenderer=new c(this,n,!0),this._imageRenderer=new m(this,s,s===e),this.update()},{get:function(){return B.getAll(this)},set:function(t){B.setAll(t,this)&&this.update()},toDataURL:function(t){return this.canvas.toDataURL(t||this.mime)},update:function(){var t=new p({level:this.level,value:this.value});this._canvasRenderer.render(t),this._imageRenderer.render(t)}},{use:function(t){y.setService(t.getName(),t)}});Object.defineProperties(O.prototype,{canvas:{get:function(){return this._canvasRenderer.getElement()}},image:{get:function(){return this._imageRenderer.getElement()}}});var A=O,L=h.extend({getName:function(){}}).extend({createCanvas:function(){},createImage:function(){},getName:function(){return"element"},isCanvas:function(t){},isImage:function(t){}}).extend({createCanvas:function(){return document.createElement("canvas")},createImage:function(){return document.createElement("img")},isCanvas:function(t){return t instanceof HTMLCanvasElement},isImage:function(t){return t instanceof HTMLImageElement}});return A.use(new L),A});
// Based on https://github.com/LinusU/base32-encode/blob/master/index.js
function hex_to_b32(hex) { let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"; let bytes = []; for (let i = 0; i < hex.length; i += 2) { bytes.push(parseInt(hex.substr(i, 2), 16)); } let bits = 0; let value = 0; let output = ''; for (let i = 0; i < bytes.length; i++) { value = (value << 8) | bytes[i]; bits += 8; while (bits >= 5) { output += alphabet[(value >>> (bits - 5)) & 31]; bits -= 5; } } if (bits > 0) { output += alphabet[(value << (5 - bits)) & 31]; } return output; }
// Based on https://github.com/adriancooney/console.image
function console_image(url, size) { console.log("%c+", "font-size: 1px; padding: " + Math.floor(size / 2) + "px " + Math.floor(size / 2) + "px; line-height: " + size + "px; background: url(" + url + "); color: transparent;"); }
(function(console) { console.save = function(data, filename) { if (!data) { console.error('Console.save: No data'); return; } if (typeof data === "object") { data = JSON.stringify(data, undefined, 4) } var blob = new Blob([data], {type: 'text/json'}), e = document.createEvent('MouseEvents'), a = document.createElement('a'); a.download = filename; a.href = window.URL.createObjectURL(blob); a.dataset.downloadurl =
['text/json', a.download, a.href].join(':'); e.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null); a.dispatchEvent(e); } })(console);
console.clear();
console.warn("Here's your Authy tokens:");
var data = appManager.getModel().map(function(i) {
var secretSeed = i.secretSeed;
if (typeof secretSeed == 'undefined') {
secretSeed = i.encryptedSeed;
}
var secret = (i.markedForDeletion === false ? i.decryptedSeed : hex_to_b32(secretSeed));
var period = (i.digits === 7 ? 10 : 30);
var totp_uri = `otpauth://totp/${encodeURIComponent(i.name)}?secret=${secret}&digits=${i.digits}&period=${period}`;
var qr_size = 250;
var qr_url = (new QRious({value: totp_uri, size: qr_size})).toDataURL();
console.group(`${i.originalName} / ${i.name}`);
console.log('TOTP secret:', secret);
console.log('TOTP URI:', totp_uri);
console_image(qr_url, qr_size);
console.groupEnd();
return {name: i.name, secret: secret, uri: totp_uri};
});
//console.save(data, 'authy_backup.json');
Export to Bitwarden JSON - Simpler version
From @oetiker (ref):
[...] you will get a dump in json format which you can directly copy/paste into the bitwarden import tool. Since Authy does not contain complete login information, I would suggest to create a new folder for the import, so that you can then merge the TOTP tokens into the actual login entries.
let x = [];
appManager.getModel().forEach(i => {
if (i.decryptedSeed) {
x.push({
type: 1,
name: i.originalName ?? i.name ?? `[No Name] - Imported from Authy (${x.length})`,
login: {username: i.name, totp: i.decryptedSeed}
})
}});
console.log(JSON.stringify({ encrypted: false, items: x})
);
Export to Bitwarden JSON - Advanced
This code can be used to save your tokens as a JSON file, for example to import into Bitwarden.
It will create an Imported from Authy folder, and import your TOTP codes in there.
// Based on https://github.com/LinusU/base32-encode/blob/master/index.js
function hex_to_b32(hex) { let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"; let bytes = []; for (let i = 0; i < hex.length; i += 2) { bytes.push(parseInt(hex.substr(i, 2), 16)); } let bits = 0; let value = 0; let output = ''; for (let i = 0; i < bytes.length; i++) { value = (value << 8) | bytes[i]; bits += 8; while (bits >= 5) { output += alphabet[(value >>> (bits - 5)) & 31]; bits -= 5; } } if (bits > 0) { output += alphabet[(value << (5 - bits)) & 31]; } return output; }
// from https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid#answer-2117523
function uuidv4() { return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) { var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8); return v.toString(16); }); }
// from https://gist.github.com/gboudreau/94bb0c11a6209c82418d01a59d958c93
function saveToFile(data, filename) { if (!data) { console.error('Console.save: No data'); return; } if (typeof data === "object") { data = JSON.stringify(data, undefined, 4) } const blob = new Blob([data], { type: 'text/json' }); const e = document.createEvent('MouseEvents'); const a = document.createElement('a'); a.download = filename; a.href = window.URL.createObjectURL(blob); a.dataset.downloadurl = ['text/json', a.download, a.href].join(':'); e.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null); a.dispatchEvent(e); }
function deEncrypt({ log = false, save = false }) {
const folder = {
id: uuidv4(),
name: 'Imported from Authy'
};
const bw = {
"encrypted": false,
"folders": [
folder
],
"items": appManager.getModel().map((i) => {
let secretSeed = i.secretSeed;
if (typeof secretSeed == "undefined") {
secretSeed = i.encryptedSeed;
}
const secret = (i.markedForDeletion === false ? i.decryptedSeed : hex_to_b32(secretSeed));
const period = (i.digits === 7 ? 10 : 30);
const [issuer, rawName] = (i.name.includes(":"))
? i.name.split(":")
: ["", i.name];
const name = [issuer, rawName].filter(Boolean).join(": ");
const totp = `otpauth://totp/${name}?secret=${secret}&digits=${i.digits}&period=${period}${issuer ? '&issuer=' + issuer : ''}`;
return ({
id: uuidv4(),
organizationId: null,
folderId: folder.id,
type: 1,
reprompt: 0,
name,
notes: null,
favorite: false,
login: {
username: null,
password: null,
totp
},
collectionIds: null
});
}),
};
if (log) console.log(JSON.stringify(bw));
if (save) saveToFile(bw, 'authy-to-bitwarden-export.json');
}
deEncrypt({
log: true,
save: true,
});
Export to JSON format (2FSA / Raivo)
@brenc says (ref):
I have modified the snippet to produce a Raivo OTP format export file that can be directly imported into 2FAS Auth (and of course Raivo and others I'm sure):
// Based on https://github.com/LinusU/base32-encode/blob/master/index.js
function hex_to_b32(hex) {
let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";
let bytes = [];
for (let i = 0; i < hex.length; i += 2) {
bytes.push(parseInt(hex.substr(i, 2), 16));
}
let bits = 0;
let value = 0;
let output = "";
for (let i = 0; i < bytes.length; i++) {
value = (value << 8) | bytes[i];
bits += 8;
while (bits >= 5) {
output += alphabet[(value >>> (bits - 5)) & 31];
bits -= 5;
}
}
if (bits > 0) {
output += alphabet[(value << (5 - bits)) & 31];
}
return output;
}
// from https://gist.github.com/gboudreau/94bb0c11a6209c82418d01a59d958c93
function saveToFile(data, filename) {
if (!data) {
console.error("Console.save: No data");
return;
}
if (typeof data === "object") {
data = JSON.stringify(data, undefined, 4);
}
const blob = new Blob([data], {
type: "text/json",
});
const e = document.createEvent("MouseEvents");
const a = document.createElement("a");
a.download = filename;
a.href = window.URL.createObjectURL(blob);
a.dataset.downloadurl = ["text/json", a.download, a.href].join(":");
e.initMouseEvent(
"click",
true,
false,
window,
0,
0,
0,
0,
0,
false,
false,
false,
false,
0,
null
);
a.dispatchEvent(e);
}
const items = appManager.getModel().map((i) => {
let secretSeed = i.secretSeed;
if (typeof secretSeed == "undefined") {
secretSeed = i.encryptedSeed;
}
const period = i.digits === 7 ? 10 : 30;
const secret =
i.markedForDeletion === false ? i.decryptedSeed : hex_to_b32(secretSeed);
const [issuer, rawName] = i.name.includes(":")
? i.name.split(":")
: ["", i.name];
const name = [issuer, rawName].filter(Boolean).join(": ");
return {
account: name,
algorithm: "SHA1",
counter: "0",
digits: `${i.digits}`,
iconType: "",
iconValue: "",
issuer: name,
kind: "TOTP",
pinned: "false",
secret,
timer: `${period}`,
};
});
saveToFile(items, "Authy-To-Raivo-OTP-Export.json");
Export to unencrypted JSON format (Aegis)
@dvshkn says (ref):
Based on the snippet by @brenc, here is a version that exports to unencrypted Aegis JSON format.
To keep things short this version only dumps the JSON to the console instead of triggering a file download.
In Aegis (on your mobile device) use Settings > Import & Export > Import from file and select Aegis file format to import the JSON file.
// Based on https://github.com/LinusU/base32-encode/blob/master/index.js
function hex_to_b32(hex) {
let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";
let bytes = [];
for (let i = 0; i < hex.length; i += 2) {
bytes.push(parseInt(hex.substr(i, 2), 16));
}
let bits = 0;
let value = 0;
let output = "";
for (let i = 0; i < bytes.length; i++) {
value = (value << 8) | bytes[i];
bits += 8;
while (bits >= 5) {
output += alphabet[(value >>> (bits - 5)) & 31];
bits -= 5;
}
}
if (bits > 0) {
output += alphabet[(value << (5 - bits)) & 31];
}
return output;
}
const items = appManager.getModel().map((i) => {
let secretSeed = i.secretSeed;
if (typeof secretSeed == "undefined") {
secretSeed = i.encryptedSeed;
}
// @brenc: All of my Authy accounts have a 20 second period. Not sure why
//
this was 10.
const period = i.digits === 7 ? 20 : 30;
const secret =
i.markedForDeletion === false ? i.decryptedSeed : hex_to_b32(secretSeed);
const [issuer, rawName] = i.name.includes(":")
? i.name.split(":")
: ["", i.name];
const name = [issuer, rawName].filter(Boolean).join(": ");
return {
type: "totp",
// NOTE: Aegis generates a fresh UUID if we skip this property
// uuid: null,
name,
issuer: name,
icon: null,
info: {
secret,
algo: "SHA1",
digits: i.digits,
period: period
}
};
});
// Example from https://github.com/beemdevelopment/Aegis/blob/master/app/src/test/resources/com/beemdevelopment/aegis/importers/aegis_plain.json
const aegis_data = {
version: 1,
header: {
slots: null,
params: null
},
db: {
version: 1,
entries: items
}
};
// dumps entries to console in Aegis JSON format
console.log(JSON.stringify(aegis_data, undefined, 4));
Getting Uncaught ReferenceError: appManager is not defined error?
Go watch this YouTube video that shows you where you need to be, when you paste code: https://youtu.be/nArCf8iEqlw
Right-click the snippet name on the navigator pane on the left (eg. Script snippet #1) , and choose Run.
Thanks
Brian's gist
JavaScript implementation of base32 encoding by Chris Umbel, et al.
Google Authenticator URI format
Various commenters below
Load earlier comments...
Copy link
soriac
commented
Apr 4, 2025
I also got my csv after months arguing via email, but only now I realize at some point i removed my backup password, and I can't use any of the scripts.
Does anyone know what they use as a passphrase when you don't set a password? Or am I screwed? Seriously considering buying a cheap android just to root and get this over with.
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
perlaxe
commented
Apr 4, 2025
•
edited
Loading
Uh oh!
There was an error while loading. Please reload this page.
Besides the encrypted tokens I also received another csv file that has the token names and some other data in this format:
Authenticator tokens,,,,,
Name,Logo,Created at,Updated at,,
1673887108,Ubisoft,"Jan 16, 2023","Mar 03, 2025",,
Any idea what kind of encoding this is?
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
Enissay
commented
Apr 5, 2025
@perlaxe here's a sample (I scrambled the encoded chars, but the length is the same):
name,encrypted_seed,salt,iv
example.com:enissay,9tU/Dmtg2TrgTdeP38YJjTXizLqyNraio76D+t6evKVD0HPdd7VXud7jU7pP+CUYZazC4e1hTdUnSilS8pplLg==,mg1lK6Dj8GmwtqungRDXEUXkCSWLBEQ3,66f3ccd1e49cd83928e72af3ee6e9660
Using your script above gives me: Decryption failed: Invalid padding length for all!
@AlexTech01 any luck with your script ?
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
AlexTech01
commented
Apr 5, 2025
•
edited
Loading
Uh oh!
There was an error while loading. Please reload this page.
@Enissay
Try this to convert your CSV to an authenticator_tokens.json. Your tokens will still be encrypted in this format, but it will be converted to the same format that you'd get from using iOS MiTM, so any decryption/conversion script here should work after that. A key_derivation_iterations value of 100,000 is assumed since it isn't specified in your sample CSV, but if that doesn't work try adjusting it in the code. Some values (such as logo and account_type) aren't specified in the CSV, so generic/default values are used.
(To use, run the Python script with an input.csv file in your current directory.)
import csv
import json
import time
import random
def csv_to_json(input_file, output_file):
# Prepare the top-level structure of the final JSON
result = {
"message": "success",
"authenticator_tokens": [],
"deleted": [],
"success": True
}
# Open the CSV file for reading
with open(input_file, mode="r", encoding="utf-8") as csvfile:
reader = csv.DictReader(csvfile)
for row in reader:
# Extract the raw name from the CSV
raw_name = row.get("name", "generic_name")
# Check if there's a colon in the name
if ":" in raw_name:
name_parts = raw_name.split(":", 1)
# Split only on the first colon
new_name = name_parts[1]
original_name = raw_name
else:
new_name = raw_name
original_name = None
# Create an authenticator token object for each row
token = {
"account_type": "authenticator",
"digits": 6,
"encrypted_seed": row.get("encrypted_seed"),
"issuer": None,
"key_derivation_iterations": 100000,
"logo": "generic",
"name": new_name,
"original_name": original_name,
"password_timestamp": int(time.time()),
"salt": row.get("salt"),
"unique_id": str(int(time.time())) + str(random.randint(1000, 9999)),
"unique_iv": row.get("iv")
}
result["authenticator_tokens"].append(token)
# Write the JSON output
with open(output_file, mode="w", encoding="utf-8") as jsonfile:
json.dump(result, jsonfile, indent=4)
if __name__ == "__main__":
csv_to_json("input.csv", "authenticator_tokens.json")
print("Conversion complete. JSON written to authenticator_tokens.json")
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
robmonte
commented
Apr 19, 2025
I was unfortunate enough to have missed the train on this desktop app export method and I'm also now in need of getting my tokens out of Authy. I was wondering if the rooted android method was possible with an android emulator like Bluestacks or even just one of the ones through Android Studio, and if anyone's tried that yet? Otherwise I may just end up going through each of my codes manually 😔
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
Yodakoala
commented
Apr 19, 2025
I was unfortunate enough to have missed the train on this desktop app export method and I'm also now in need of getting my tokens out of Authy. I was wondering if the rooted android method was possible with an android emulator like Bluestacks or even just one of the ones through Android Studio, and if anyone's tried that yet? Otherwise I may just end up going through each of my codes manually 😔
I dont know at all. Its nice that the iOS application has that "bug"/issue that works with mitm, but its a little more complicated in Android :( I think that you cannot see the things you want if the Android is not rooted. I think its normal, but if there's a chance for you, it will be really helpful for all the Android users.
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
Mattie112
commented
Apr 27, 2025
Ah, great gist here and useful scripts! After reinstalling my PC I was looking for Authy (as I aways want to have a 2nd instance as 'backup'). But indeed it does not exist anymore.
I have also send the GDPR request, hoping they will respond to that.
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
dgobaud
commented
Apr 27, 2025
They do respond to GDPR requests but you have to be clear and demanding about what you want because they don't want to do it. Twilio / Authy are a horrible, evil company for trapping users like this.
At first they didn't give me the key export. I replied again demanding it and they said they would but because this worked, I told them to forget it because of the security risk. If it's not needed, it's better to not have them export and email it.
I have also send the GDPR request, hoping they will respond to that.
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
swdrana
commented
May 1, 2025
If someone wants to switch from Authy to Ente Auth, there is a Python script that converts decrypted_tokens.json to ente_auth_import.plain, which is the import/export file for Ente Auth app. Script:
print('go to hell Authy')
import json
file_path = './decrypted_tokens.json'
with open(file_path, 'r') as file:
data = json.load(file)
tokens = data['decrypted_authenticator_tokens']
formatted_tokens = []
for token in tokens:
issuer = token.get('issuer', '')
name = token['name']
seed = token['decrypted_seed']
formatted_line = f'otpauth://totp/{issuer}:{name}?secret={seed}' if issuer else f'otpauth://totp/{name}?secret={seed}'
formatted_tokens.append(formatted_line)
output_file_path = './ente_auth_import.plain'
with open(output_file_path, 'w') as output_file:
output_file.write('\n'.join(formatted_tokens))
output_file_path
Thank you so much
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
swdrana
commented
May 1, 2025
Yes its working today:
1 May 2025,
iOS method still works as of today
@maartenschalekamp description definitely works, if you follow it correctly: START without proxy (e.g. disable WiFi and operate on GSM), then put in phone number in a freshly installed app, and continue to get SMS code, THEN enable WiFi with proxy and just after that put in code from SMS so that app downloads all tokens. Authy will detect both developer mode and any proxy being set (which is trivial) and display integrity violation message, but only in the first step when putting in phone number.
Small tips
Use mitmproxy as it's easier than burp
mitmproxy comes with mitmweb tool - it opens a nice GUI in a web browser so it's easier to use for beginners
In web GUI you can apply filter ~u api\.authy\.com/json/users/\d+/auth to only get the one request that has all tokens:
After the request is selected in the window on the left, you can go to "Flow" tab and download the JSON file with "Download" button right away; "Export" option is something else
Decoding
The code from https://gist.github.com/gboudreau/94bb0c11a6209c82418d01a59d958c93?permalink_comment_id=5322650#gistcomment-5322650 works perfectly still. While the file contains unique_iv for every account, In 100+ of my accounts none had a value other than null, but this is something that may change in the future.
Future
In case the delete app & set proxy mid-login ever gets patched, there's another one: you can go to settings and change backup password. This will trigger the app to update all accounts on the server. However, this updates every single account in a separate request, which is a bit more painful to grab and export, but if needed it can be used.
I didn't develop a complete method using that, since as of today it's a waste of time, but each POST request data contains essentially the same fields as JSON dictionary.
WTF Twilio...
Seriously Twilio: why are you tarnishing your reputation and the name for such a small and unimportant thing? Why is this the hill you decided to die on? This isn't even a product that earns money but loses them. Just let users export the data if even official docs link to 3rd-party apps, esp. that it's clear that exporting the data is trivial.
The whole situation was also made worse by confusion between "Twilio Desktop App" and "Twilio App" ran in iOS-compatibility mode on macOS. This is where @uzhbash screenshot comes from. Users of the second option had zero warning: opening the app one day simply locked it out with a link to AppStore page with an error message.
I am not a child and I am not going to yell about suddenly ripping out Twilio services from production, as they offer amazing services, but I will definitely think twice when implementing any of their products.
Yes its working today:
1 May 2025,
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
TobywL1
commented
May 20, 2025
•
edited
Loading
Uh oh!
There was an error while loading. Please reload this page.
Thanks @AlexTech01
- your MITM method worked for me to migrate to EnteAuth. I used the direct linked Python decrypt script from the EnteAuth KB https://help.ente.io/auth/migration-guides/authy/
A few squeaky bum moments when it took a few moments (that seamed like forever) for my Authy codes to load back into the app after deleting and signing back in!!
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
man05jp
commented
Jun 23, 2025
Hi,
I lost my backup password, but I can still log into Authy. Any possibility without the backup password to get my 2FA codes?
Thanks.
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
LucasArruda
commented
Jul 9, 2025
•
edited
Loading
Uh oh!
There was an error while loading. Please reload this page.
Thanks a lot for this tutorial. I was finally able to export most of my tokens with a Time Machine backup and the 2.2.3 desktop app (the recent ones I will do manually).
The app is gone from Authy website, but the pkg is there on https://web.archive.org.
I exported to JSON format (2FSA / Raivo) and imported them on Ente Auth (they have it all, Mac OS, web, iOS, support for pin/touch ID/etc) and import from all formats, apparently. I will keep the JSON and encrypt it on a safe place so if I ever need to switch to 2FSA or Raivo I can do it.
I hope none of them lock my data in the future and if they do I will switch again!
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
crossRT
commented
Jul 11, 2025
Hi there, thank you for the tutorial, it's very helpful.
and this thread inspires me a lot.
for anyone who having issue on converting decrypted_tokens.json to another formats, may check out the repo i newly created.
https://github.com/crossRT/escape-authy
either u don't have Authy Desktop app installed on your machine.
or you can't find the script to help you convert to your preferred MFA application-supported format.
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
zyxnet0115
commented
Jul 15, 2025
There is the authy for 64-bit Windows of the version 2.2.3
https://mega.nz/file/qfpD1KaT#ZtORnMRJJ6A4Y2sbViGVNNc0tlt1PW8liXbFUP1wQ2E
There is the authy for MacOS of the version 2.2.3
https://mega.nz/file/DTxHHJAa#Zl1_rkLkv9pSl7XIUSxhjfCS5AbwiBBz3qf_4Id3Zqg
I hope this can help you.
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
n-WN
commented
Jul 16, 2025
Leave here for those that have jailbroken iOS, the secrets in base32 are stored in the keychain and can be extracted with https://github.com/ptoomey3/Keychain-Dumper (I have compiled from source, changed entitlement to same access as authy as resign on device with ldid) combined with preference plist as seen in https://gist.github.com/gboudreau/94bb0c11a6209c82418d01a59d958c93?permalink_comment_id=5137446#gistcomment-5137446 found in filza and manually clean up I have been able to export all ~30 TOTP..
Tested with iOS 16 and dopamine. Hope this helps someone... Although I'm not sure if resetting all account would be faster... (~5h including research)
In the end, I spent four hours, but still didn't succeed.
/var/jb root# ./keychain_dumper
[INFO] No Generic Password Keychain items found.
[HINT] You should unlock your device!
[INFO] No Internet Password Keychain items found.
[HINT] You should unlock your device!
I have unlocked my mobile phone, iOS 16.4 , dopamine
However, I didn't recompile it but gave it a try Release 的 1.2.0/1.1.0
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
n-WN
commented
Jul 16, 2025
•
edited
Loading
Uh oh!
There was an error while loading. Please reload this page.
Leave here for those that have jailbroken iOS, the secrets in base32 are stored in the keychain and can be extracted with https://github.com/ptoomey3/Keychain-Dumper (I have compiled from source, changed entitlement to same access as authy as resign on device with ldid) combined with preference plist as seen in https://gist.github.com/gboudreau/94bb0c11a6209c82418d01a59d958c93?permalink_comment_id=5137446#gistcomment-5137446 found in filza and manually clean up I have been able to export all ~30 TOTP..
Tested with iOS 16 and dopamine. Hope this helps someone... Although I'm not sure if resetting all account would be faster... (~5h including research)
can you provide more details on how you did this, I have jailbroken ios, but the keychain dumper does not seem to working..
@jaikumarm, almost missed your message.
The first thing you need is the keychain group of your authy, I got mine using AppIndex and cheking the app's enititlement, should be under keychain-access-groups, and like XXXXXXXXXX.com.authy.XXXXXXXXX.
Next, clone https://github.com/ptoomey3/Keychain-Dumper and modify entitlements.xml <string>groupName or *</string> to your keychain group name.
You need the keychain_dumper binary, either compile yourself using a Mac and XCode or get from GitHub release, I'm not sure which is the target version, though.
Get ssh onto the phone, the default user is mobile, once in, switch to the root user sudo su
scp or Filza both keychain_dumper and entitlements.xml to same folder (Due to rootless jailbreak, go to /var/jb/ if you have write problem even with root user).
run ldid -Sentitlements.xml keychain_dumper to resign with new entitlement, install ldid if missing.
chmod +x ./keychain_dumper Give permission.
With the phone UNLOCKED!!!, dump with ./keychain_dumper -g > dumppass. There should be one entry for each password.
Next we need to look up the Authy's account ID to the account name, In the dump content, the Service field is the account ID and Keychain Data is the secret key in base32 ready to import into any authenticator.
(Optional?) You could just import the key into Ente auth and match the code in Authy to recover the account name, or you could look up the config file of Authy using Filza by going to Authy's AppGruop (AppIndex can give you the path), (Your app group)/Library/Preferences/group.authy.XXXXXX.plist, The numeric entries should match with Service field in dump.
If under 50 accounts, DO NOT attempt to write a script to parse the plist and dump to create a QR code, based on my personal experience, it's not worth the hassle (I would even recommend skipping step 10 and just match the account and edit manually).
groupName is xxxxxx (len == 6)?
Ultimately, I didn't use the method you mentioned but instead employed the repository README approach to successfully export the password. Although I took some detours, I still appreciate your sharing
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
peterdk
commented
Jul 31, 2025
If someone wants to switch from Authy to Ente Auth, there is a Python script that converts decrypted_tokens.json to ente_auth_import.plain, which is the import/export file for Ente Auth app. Script:
print('go to hell Authy')
import json
file_path = './decrypted_tokens.json'
with open(file_path, 'r') as file:
data = json.load(file)
tokens = data['decrypted_authenticator_tokens']
formatted_tokens = []
for token in tokens:
issuer = token.get('issuer', '')
name = token['name']
seed = token['decrypted_seed']
formatted_line = f'otpauth://totp/{issuer}:{name}?secret={seed}' if issuer else f'otpauth://totp/{name}?secret={seed}'
formatted_tokens.append(formatted_line)
output_file_path = './ente_auth_import.plain'
with open(output_file_path, 'w') as output_file:
output_file.write('\n'.join(formatted_tokens))
output_file_path
Thank you so much
Nice! I used a old ipad to use the mitmproxy solution and that worked instantly. I used this script to convert it to a ente file, renamed it to .txt and could import it in the new Proton Authenticator using the 'Ente auth' import option! Finally got rid from this crap from Authy!!
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
dnicolson
commented
Aug 1, 2025
The only method that worked for me was extracting the accounts and secrets from an encrypted iOS backup:
https://gist.github.com/dnicolson/71878557d80aef4459066513a538ecc2
Create an encrypted iOS backup in the Finder or iMazing
Save the authy-extractor.js file
Run the npm i … command
Run node authy-extractor.js /path/to/backup
Enter backup password
Copy secrets to Proton Authenticator
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
MarvinFS
commented
Aug 2, 2025
•
edited
Loading
Uh oh!
There was an error while loading. Please reload this page.
Guys wanted to share my way - unfortuantely, I was unable to follow everything that was mentioned above, not working it seems for recent FWs and security levels. Hope that helps someone.
BTW Motorola experience (software, battery life, UI coherence, fluidity) IS ABSOLUTELY AMAZING! I HAVE NEVER experienced that feeling for many years now. (Galaxy S22Ultra, then Pixel8pro, then VIVO X200Ultra - all SUCK REEEELLY HARD (especially VIVO)- it just bloody tears how bad their all software is made and interconnected and how excellent and clean Motorola is... don't take my words as granted - check yourself, I immediately switched to Edge 50 as my daily second phone)
Motorola Edge 50
(one of the few which still allows instant official bootloader unlock - Motorola account is still needed)
(EU version)
latest FW on Android 15
KernelSU-Next (add root manually per app basis on the app - no notification on root request)
https://github.com/KernelSU-Next/KernelSU-Next
playZygiskNext
https://github.com/Dr-TSNG/ZygiskNext
TrickyStore
https://github.com/5ec1cff/TrickyStore
Shamiko
https://github.com/LSPosed/LSPosed.github.io/releases
playcurlNEXT
https://github.com/daboynb/playcurlNEXT
PlayIntegrityFix-NEXT
https://github.com/EricInacio01/PlayIntegrityFix-NEXT
WAHideBootloader (this one I can't tell if really needed, but I used)
https://github.com/thelordalex/WAHideBootloader
RootExplorer I used to browse files (just search in google play that's very old software, still very useful for root)
oncee all installed add com.authy.authy to the /data/adb/tricky_store/target.txt
restart everything and you should see all green in Play Integrity API Checker (install from google play)
Then Authy loads as normal, decrypt all accounts with your backup key and you are basically done. (finally after 3 days of disaster and 300 EUR for a new phone) - oh yeah and I reverted all changes including re-flashing original boot.img to both slots (a and b) and uninstalling all modules from kernelsu. then re-locked the bootloader and phone is like nothing happened now (second full wipe as re-locking requires that as well). If you don't revert the changes you will hard brick your device.
My workflow was Aegis (root provided in kernelsu)->import from app->Authy->export vault with ecryption->Ente Auth->import from Aegis.
Done - fully automated no data loss. Authy account already deleted. Twillio freaking bastards they will burn in hell.
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
Riztard
commented
Aug 4, 2025
•
edited
Loading
Uh oh!
There was an error while loading. Please reload this page.
Alright, I did most of @MrPowerGamerBR steps, got an old phone (Galaxy S5) laying around, installed LineageOS+Gapps and Magisk, and then to be safe, I installed PlayIntegrityFix (Magisk module) in case of the integrity login error in Authy. Opening Authy I was able to log in with no issues. After logging in, I went ahead and installed Aegis (it has root option to pull tokens from Authy and other apps), so once it is transferred to Aegis, there is a QR code feature in the app for each of the codes which makes migrating to my current auth app easier. Then I deleted the codes in Aegis, and closed my Authy account. It does the job and I finally left Authy for good! Never felt better.
works beautifully. thanks. thankfully i still have the app on my old phone, so i just need to install aegis and allow root perms 👍
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
foxy82
commented
Aug 5, 2025
How to get around "The device does not meet the minimum integrity requirements" on an iPad.
I followed the instructions and installed the mitm certificate on an iPad before trying to log in to Authy and got the error when entering my phone number - "The device does not meet the minimum integrity requirements"
What I did was remove the mitmproxy certificate. Close and re-open Authy without using the proxy.
I entered my phone number and selected "Tap yes on another device" as my authentication method - but DIDN'T approve the request on my phone.
I then turned on the mitmproxy and installed the certificate.
I want back to Authy that was still waiting for the approval and clicked "try another way" and then "send sms". When the SMS arrived I entered it and logged in and can see the authenticated_tokens in mitmproxy.
HTH.
To note (and in case it makes a difference) I was using Tailscale to turn on/off the proxy using this clever idea here: https://www.aapelivuorinen.com/blog/2022/09/12/transparent-mitmproxy-tailscale-vm/
I then used Ente Auth script above and saved it as "ente_auth_import.txt" to import into Proton Authenticator
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
BrenoFariasdaSilva
commented
Aug 5, 2025
Hey everyone (and @gboudreau), I recently forked the great work done by AhmadMorningstar and made several improvements to make the tool more automated, user-friendly, and maintainable.
You can check out my fork here:
https://github.com/BrenoFariasdaSilva/Authy-iOS-MiTM
Key Improvements:
Refactored code with improved readability and structure (split large functions, better naming, and inline documentation)
Added support for .env, .gitignore, requirements.txt, and Makefile for easier environment setup and project execution
Fixed the QR code generation in the original script.py, which was broken
Separated functionality into dedicated scripts:
generate_uris.py for URI generation
generate_qr_codes.py for QR code creation
main.py as a single entry point to run everything more easily
Improved user experience with better terminal messages and input handling
Fully rewritten README.md with step-by-step instructions, contribution guide, and license
This fork builds upon the foundational work of AlexTech01 and AhmadMorningstar, aiming to make the process of exporting and transferring Authy 2FA tokens easier and more reliable, especially now that the Authy Desktop App has been discontinued.
If you find it useful or have suggestions, feel free to open an issue or a pull request in the repository.
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
BrenoFariasdaSilva
commented
Aug 8, 2025
Hey again everyone,
Since my last comment here, I’ve made further improvements to my fork of AhmadMorningstar’s great work — not only refining the automation and usability, but also adding important security tips on how to store your TOTP URIs safely after exporting them.
🔗 Updated fork here:
https://github.com/BrenoFariasdaSilva/Authy-iOS-MiTM
Recent Improvements
Security guidance: Added a detailed section in the README on safely storing extracted TOTP URIs.
Example: Instead of keeping them in plain text/JSON, store them in a password manager like Bitwarden (supports TOTP storage and auto-generation).
You can even export your Bitwarden vault periodically and import it into Apple’s Passwords app (built into iOS/macOS, free to use, detects TOTP URIs automatically). This gives you a secure backup and a native authenticator experience.
Improved README structure for clarity and step-by-step onboarding.
Extra usability refinements for script automation and environment setup.
Why this matters
If you’ve exported your Authy tokens, you now have raw TOTP URIs. Without proper handling, these could be a security risk if stored in unsecured files. My updated guide now shows you a safe and practical way to store and back them up — so you’re not only extracting your tokens but also protecting them long term.
💡 If you find this useful, please consider starring the repo and sharing it. Every star helps this tool reach more people, especially now that the Authy Desktop App is gone and many users are looking for a reliable export method.
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
Elehiggle
commented
Aug 21, 2025
•
edited
Loading
Uh oh!
There was an error while loading. Please reload this page.
Hey again everyone, Since my last comment here, I’ve made further improvements to my fork of AhmadMorningstar’s great work — not only refining the automation and usability, but also adding important security tips on how to store your TOTP URIs safely after exporting them.
🔗 Updated fork here: https://github.com/BrenoFariasdaSilva/Authy-iOS-MiTM
Recent Improvements
* **Security guidance:** Added a detailed section in the README on safely storing extracted TOTP URIs.
* Example: Instead of keeping them in plain text/JSON, store them in a password manager like **Bitwarden** (supports TOTP storage and auto-generation).
* You can even **export your Bitwarden vault periodically** and import it into **Apple’s Passwords app** (built into iOS/macOS, free to use, detects TOTP URIs automatically). This gives you a secure backup and a native authenticator experience.
* Improved **README structure** for clarity and step-by-step onboarding.
* Extra usability refinements for **script automation and environment setup**.
Why this matters
If you’ve exported your Authy tokens, you now have raw TOTP URIs. Without proper handling, these could be a security risk if stored in unsecured files. My updated guide now shows you a safe and practical way to store and back them up — so you’re not only extracting your tokens but also protecting them long term.
💡 If you find this useful, please consider starring the repo and sharing it. Every star helps this tool reach more people, especially now that the Authy Desktop App is gone and many users are looking for a reliable export method.
WIth the latest version of this code I had an issue because empty unique_iv values were not handled. I used this: https://github.com/AlexTech01/Authy-iOS-MiTM/blob/main/decrypt.py
Then made a custom convert script to convert the output to a .json file compatible with Proton Authenticator's import feature. If anyone has a use for it:
python authy_to_otpauth.py decrypted_tokens.json decypted_tokens_proton_auth.json
import json, uuid, base64, binascii, re
from urllib.parse import quote, urlencode, quote_plus
from pathlib import Path
import sys
def maybe_to_base32(seed: str) -> str:
"""
Try to normalize secret to Base32 (no padding, uppercase).
- If hex: convert to Base32.
- If already Base32-looking: normalize casing and strip padding.
- Otherwise: return as-is.
"""
s = (seed or "").strip().replace(" ", "")
if not s:
return s
# hex?
if re.fullmatch(r"[0-9a-fA-F]+", s) and len(s) % 2 == 0:
try:
raw = bytes.fromhex(s)
b32 = base64.b32encode(raw).decode("ascii").rstrip("=")
return b32
except Exception:
pass
# base32-ish?
if re.fullmatch(r"[A-Z2-7]+=*", s.upper()):
return s.upper().rstrip("=")
# unknown format, return as-is
return s
def build_label(name: str, logo: str, issuer: str) -> str:
"""
Build display name WITHOUT prepending logo.
Preferred: name; fallback: issuer; then logo; then 'Unnamed'.
"""
name = (name or "").strip()
issuer = (issuer or "").strip()
logo = (logo or "").strip()
return name or issuer or logo or "Unnamed"
def convert_authy_json(data: dict, default_algorithm="SHA1", default_period=30):
out = {"version": 1, "entries": []}
tokens = data.get("decrypted_authenticator_tokens", []) or []
for t in tokens:
name = t.get("name")
issuer = t.get("issuer")
logo = t.get("logo")
account_type = t.get("account_type")
digits = int(t.get("digits") or 6)
secret = maybe_to_base32(t.get("decrypted_seed") or "")
# Determine effective issuer: prefer issuer; else logo; else account_type (if not "authenticator")
issuer_effective = (issuer or "").strip() or (logo or "").strip()
if not issuer_effective:
at = (account_type or "").strip()
if at and at.lower() != "authenticator":
issuer_effective = at
# Name stays as-is (trimmed). If empty, fall back to issuer_effective.
display_name = (name or "").strip() or issuer_effective or "Unnamed"
label_encoded = quote(display_name, safe="")
# spaces -> %20
issuer_for_query = issuer_effective
query = urlencode({
"secret": secret,
"issuer": issuer_for_query,
"algorithm": default_algorithm,
"digits": digits,
"period": default_period
}, quote_via=quote_plus)
uri = f"otpauth://totp/{label_encoded}?{query}"
entry = {
"id": str(uuid.uuid4()),
"content": {
"uri": uri,
"entry_type": "Totp",
"name": display_name
},
"note": None
}
out["entries"].append(entry)
return out
def main():
if len(sys.argv) < 3:
print("Usage: python authy_to_otpauth.py <input_json> <output_json> [--algorithm SHA1] [--period 30]")
sys.exit(1)
in_path = Path(sys.argv[1])
out_path = Path(sys.argv[2])
algo = "SHA1"
period = 30
if "--algorithm" in sys.argv:
try:
algo = sys.argv[sys.argv.index("--algorithm") + 1]
except Exception:
pass
if "--period" in sys.argv:
try:
period = int(sys.argv[sys.argv.index("--period") + 1])
except Exception:
pass
with in_path.open("r", encoding="utf-8") as f:
data = json.load(f)
converted = convert_authy_json(data, default_algorithm=algo, default_period=period)
with out_path.open("w", encoding="utf-8") as f:
json.dump(converted, f, ensure_ascii=False, indent=2)
print(f"Wrote {out_path} with {len(converted['entries'])} entries.")
if __name__ == "__main__":
main()
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
BrenoFariasdaSilva
commented
Aug 22, 2025
Hey everyone,
Quick update! 🚀
Since my last comment, I’ve added Proton Authenticator export support to my fork. A few people reached out asking specifically for this, and now it’s fully supported.
🔗 Fork with Proton Authenticator support:
https://github.com/BrenoFariasdaSilva/Authy-iOS-MiTM
What’s new
Proton Authenticator compatibility: You can now export your Authy tokens directly into a format that Proton supports.
Updated generate_uris.py to handle Proton URIs properly.
README updated with a dedicated Proton section, so onboarding is super clear.
Proton Authenticator support
Proton Authenticator requires a specific JSON format for bulk import, which is different from the standard URIs.json file.
When you select Proton Authenticator in the script, it will automatically generate a file named proton_authenticator.json in the correct format:
{
"version": 1,
"entries": [
{
"id": "...",
"content": {
"uri": "otpauth://totp/Adobe?secret=...&digits=6&algorithm=SHA1&period=30&issuer=",
"entry_type": "Totp",
"name": "Adobe"
},
"note": null
},
...
]
}
This ensures the exported file can be directly imported into Proton Authenticator without manual adjustments.
If there are other authenticators that any of you need to be added, contact me and I'll manage to add it ASAP.
And as always, if you find this useful, please consider ⭐️ starring the repo so more people can discover it.
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
andiradulescu
commented
Sep 3, 2025
•
edited
Loading
Uh oh!
There was an error while loading. Please reload this page.
I managed to do this today on iOS by sniffing the traffic with Charles Proxy. Any proxy will work. No need to uninstall the app, reinstall, etc.
Open Authy normally with the proxy previously turned OFF
Turn ON the proxy
Go to Authy -> Settings (cog wheel) -> Accounts -> Press the "Backup Password" toggle to OFF and then press "Don't disable"
Don't close the app, look in your proxy list of requests until https://api.authy.com/json/users/XXXXXX/authenticator_tokens request appears
Copy the url, paste it somewhere and remove everything after &apps=. Should look like this: https://api.authy.com/json/users/123456/authenticator_tokens?otp3=123456&otp1=123456&otp2=123456&api_key=asdasdasdasdsas&locale=en&password_timestamp=123456&device_id=123456&apps=
Open this URL in your browser and save the response as authenticator_tokens.json
Use github.com/BrenoFariasdaSilva/Authy-iOS-MiTM to decrypt
Original idea from: https://www.reddit.com/r/Bitwarden/comments/116kpvf/comment/mgbpokd/
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
paulte
commented
Sep 14, 2025
The original OSX dmg file is no longer available.
Can be found from the webarchive here:
https://web.archive.org/web/20230312000948/https://pkg.authy.com/authy/stable/2.2.3/darwin/x64/Authy%20Desktop-2.2.3.dmg
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
fpwex9
commented
Sep 16, 2025
Thanks a lot to Brenno for the original script – it worked for me on macOS + iOS, but only after some trial and error. Sharing my steps for anyone who gets stuck.
My Working Setup
Command 1 – from the original instruction
mitmweb --allow-hosts "api.authy.com"
– With this, I was able to open the Authy client, enter my phone number, and send the confirmation request to my second device.
– At this stage the client authorized, but the Flow List was empty.
– Also, mitmproxy initially complained about “too many open files”, so I had to raise the limit:
sudo launchctl limit maxfiles 65536 200000
ulimit -n 65536
Command 2 – tweaked to catch all traffic
mitmweb --listen-host 0.0.0.0 --listen-port 8080
– If I started directly with this, the Authy client always failed with an Integrity check error.
– I saw a workaround mentioned in another thread: start login flow without full interception, then switch.
Final Sequence That Worked
1.	Start mitmproxy with Command 1.
2.	Launch Authy client, enter phone number, and send confirmation request to the second device.
3.	Before confirming on the second device, stop mitmproxy and restart it with Command 2.
4.	Confirm on the second device.
5.	Authy client successfully authorized and allowed me to download the data.
I didn’t succeed on the first try – I had to retry 2–3 times (different timing of when to trigger the confirmation).
Not perfect – needed a few retries to get the timing right – but this sequence finally worked. Hopefully it saves someone else the same headaches.
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
BrenoFariasdaSilva
commented
Sep 17, 2025
Thanks a lot @fpwex9 for the detailed steps. I’ve updated the README to include your mitmweb sequence, the macOS launchctl / ulimit fixes, and a short troubleshooting section describing the restart-before-confirm workflow and the need for a couple of retries. I gave you a shoutout in the new Troubleshooting section — let me know if you prefer different wording or want me to add you as a contributor. Thanks again!
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Sign up for free
to join this conversation on GitHub.
Already have an account?
Sign in to comment
Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Community
Docs
Contact
Manage cookies
Do not share my personal information
You can’t perform that action at this time.