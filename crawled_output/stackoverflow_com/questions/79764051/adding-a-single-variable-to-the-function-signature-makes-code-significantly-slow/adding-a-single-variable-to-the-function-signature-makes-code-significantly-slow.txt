haskell - Adding a single variable to the function signature makes code significantly slower - Stack Overflow
Skip to main content
Stack Overflow
About
Products
For Teams
Stack Overflow for Teams
Where developers & technologists share private knowledge with coworkers
Advertising
Reach devs & technologists worldwide about your product, service or employer brand
Knowledge Solutions
Data licensing offering for businesses to build and improve AI tools and models
Labs
The future of collective knowledge sharing
About the company
Visit the blog
Loading…
current community
Stack Overflow
help
chat
Meta Stack Overflow
your communities
Sign up or log in to customize your list.
more stack exchange communities
company blog
Log in
Sign up
Home
Questions
AI Assist
Labs
Tags
Challenges
Chat
Articles
Users
Jobs
Companies
Collectives
Communities for your favorite technologies.
Explore all Collectives
Teams
Ask questions, find answers and collaborate at work with Stack Overflow for Teams.
Try Teams for free
Explore Teams
Teams
Ask questions, find answers and collaborate at work with Stack Overflow for Teams.
Explore Teams
Collectives™ on Stack Overflow
Find centralized, trusted content and collaborate around the technologies you use most.
Learn more about Collectives
Teams
Q&A for work
Connect and share knowledge within a single location that is structured and easy to search.
Learn more about Teams
Adding a single variable to the function signature makes code significantly slower
Ask Question
Asked
8 days ago
Modified
7 days ago
Viewed
121 times
2
This pertains to Emily's answer here: https://stackoverflow.com/a/13850560/2026752
ansMap :: M.Map Integer Int
ansMap = M.fromAscList [(i, collatz i) | i <- [1..1000000]]
where collatz 1 = 0
collatz x = if x' <= 1000000 then 1 + ansMap M.! x'
else 1 + collatz x'
where x' = if even x then x `div` 2 else x*3 + 1
-- this code is really fast
fst $ maximumBy (comparing snd) $ M.toList ansMap
This seemed like a reasonable strategy, so I decided to take 1000000 and feed it as a variable to the function, so I could compute the Collatz sequence for even more numbers:
ansMap :: Integer -> M.Map Integer Int
ansMap n = M.fromAscList [(i, collatz i) | i <- [1..n]]
where collatz 1 = 0
collatz x = if x' <= n then 1 + ansMap n M.! x'
else 1 + collatz x'
where x' = if even x then x `div` 2 else x*3 + 1
-- but then suddenly this is slow
fst $ maximumBy (comparing snd) $ M.toList ansMap 1000000
This confuses me, since all I did was take n out and pass it back in! I don't know much about the Haskell runtime. Please help me understand! Thank you in advance.
haskell
Share
Improve this question
Follow
asked Sep 14 at 2:02
daikonradishdaikonradish
72166 silver badges1717 bronze badges
Add a comment
|
2 Answers
2
Sorted by:
Reset to default
Highest score (default)
Trending (recent votes count more)
Date modified (newest first)
Date created (oldest first)
8
In Emily's answer, ansMap is a M.Map Integer Int which is recursively defined in terms of itself. In your modified code, ansMap is a function, and ansMap n returns a M.Map Integer Int that is recursively defined in terms of other calls to ansMap. But those recursive calls to ansMap themselves construct and return a (distinct) M.Map Integer Int, which ends up making tons of different M.Map Integer Ints until the recursion bottoms out.
You can fix this simply by making it so that there is once again a M.Map Integer Int that is recursively defined in terms of itself, rather than having a recursively defined function.
ansMap :: Integer -> M.Map Integer Int
ansMap n = mapping
where mapping = M.fromAscList [(i, collatz i) | i <- [1..n]]
collatz 1 = 0
collatz x = if x' <= n then 1 + mapping M.! x'
else 1 + collatz x'
where x' = if even x then x `div` 2 else x*3 + 1
Note that collatz uses mapping, and does not make a recursive call to ansMap -- so ansMap is not recursively defined (though mapping is).
That was an asymptotic speedup; there are also constant-factor speedups available. For example, switching Integer to Int, switching Map to Vector, and doing bit-twiddly operations in the definition of x' makes it about an order of magnitude faster. If switching to Int makes you nervous, staying with Integer is only about 50% slower.
ansMap :: Int -> V.Vector Int
ansMap n = mapping
where mapping = V.generate (n+1) collatz
collatz 0 = -1
collatz 1 = 0
collatz x = if x' <= n then 1 + mapping V.! x'
else 1 + collatz x'
where x' = if x .&. 1 == 0 then shiftR x 1 else x*3 + 1
V.maxIndex $ ansMap 1000000
Share
Improve this answer
Follow
edited Sep 14 at 3:04
answered Sep 14 at 2:39
Daniel WagnerDaniel Wagner
155k1010 gold badges231231 silver badges392392 bronze badges
3 Comments
Add a comment
daikonradish daikonradish Sep 14 at 6:21
quick q -- how did you develop an eye for recognizing where to 'pull out' the recursion? 2025-09-14T06:21:01.603Z+00:00
0
Reply
Copy link
Daniel Wagner Daniel Wagner Sep 14 at 7:08
Your question is probably too specific. As asked, the answer is "there's only one place to look" -- namely, at function definitions -- so it doesn't take long to "develop an eye". You only need two or three examples to see the pattern. But more generally, there's a broad class of things I watch for and code smells I've picked up. Unfortunately there's no single answer for how; I've aggregated tricks by answering questions (and reading others' answers) here and on the #haskell IRC channel and by many happy hours spent making, finding, and fixing mistakes in my own Haskell programs 2025-09-14T07:08:29.563Z+00:00
2
Reply
Copy link
chi chi Sep 14 at 9:06
It's a fairly standard pattern in Haskell (and other functional languages). For a different example, consider f = \n -> let a = bigData in e, this allocates bigData only after having taken n as input, and will do so at each call. Instead, f = let a = bigData in \n -> e allocates bigData only once, and reuses the data structure for many ns. When doing many calls (e.g., using recursion) this matters. Memoization, as you discovered, it the most common scenario where this shows up. 2025-09-14T09:06:19.71Z+00:00
2
Reply
Copy link
1
This seems to be a question about sharing, as is covered in Chapter 27 of "Haskell Programming from First Principles".
Being a function with explicit, named arguments also prevents
sharing. Haskell is not fully lazy; it is merely non-strict, so it is not
required to remember the result of every function application for
a given set of arguments, nor would it be desirable given memory
constraints. (pp. 1053-1054)
The book recommends using Debug.Trace to identify what is or is not being shared.
If you try these:
import Debug.Trace
ansMap = (trace "eval" M.fromAscList [(i, collatz i) | i <- [1..1000000]])
ansMap n = (trace "eval" M.fromAscList [(i, collatz i) | i <- [1..n]])
you will notice that in the first version 'ansMap' is only evaluated once, but in the case of the function with the named argument, it is evaluated many times.
In the first case, the map is able to be shared, but in the second the named argument prevents sharing.
(At least this is how I understand it.)
Share
Improve this answer
Follow
edited Sep 15 at 14:36
answered Sep 15 at 2:33
Geoffrey WarneGeoffrey Warne
34722 silver badges1111 bronze badges
2 Comments
Add a comment
Daniel Wagner Daniel Wagner Sep 15 at 14:07
For the purposes of this question, it's a great answer. I'm not sure I love everything in the quote, though. While it's true that Haskell the language specification only requires non-strict evaluation, in practice GHC is fully lazy by default; the distinction between non-strict and lazy is not the explanation for why the Haskell spec doesn't imply that an implementation must memoize. 2025-09-15T14:07:53.853Z+00:00
4
Reply
Copy link
Geoffrey Warne Geoffrey Warne Sep 15 at 14:35
Thanks!
I had a feeling that you were saying roughly the same thing but with greater precision.
I will look at your answer again to understand the issue better. 2025-09-15T14:35:42.403Z+00:00
0
Reply
Copy link
Your Answer
Thanks for contributing an answer to Stack Overflow!Please be sure to answer the question. Provide details and share your research!But avoid …Asking for help, clarification, or responding to other answers.Making statements based on opinion; back them up with references or personal experience.To learn more, see our tips on writing great answers.
Draft saved
Draft discarded
Sign up or log in
Sign up using Google
Sign up using Email and Password
Submit
Post as a guest
Name
Email
Required, but never shown
Post as a guest
Name
Email
Required, but never shown
Post Your Answer
Discard
By clicking “Post Your Answer”, you agree to our terms of service and acknowledge you have read our privacy policy.
Start asking to get answers
Find the answer to your question by asking.
Ask question
Explore related questions
haskell
See similar questions with these tags.
The Overflow Blog
Stack Overflow is helping you learn to code with new resources
Off with your CMS’s head! Composability and security in headless CMS
Featured on Meta
Spevacus has joined us as a Community Manager
Introducing a new proactive anti-spam measure
Policy: Generative AI (e.g., ChatGPT) is banned
New and improved coding challenges
New comment UI experiment graduation
Linked
2
Optimizing longest Collatz chain in Haskell
Related
4
Get n elements of list having the highest property
5
Haskell: List v. Array, difference in performance
0
(Haskell) Can't understand error : No instance for (Ord a) arising from a use of ‘’
0
help understand strange behavior in a lazy code
0
Show all numbers at prime indexes in a list - haskell - filter error
1
Haskell GADT typesafe Evaluator: Constant term for more than one type.
71
How does non-strict and lazy differ?
1
Random number generator in haskell using recursion
0
Why shifting is slower than powering on old haskell !? How to make it faster?
2
map example in Effective Haskell (B2.0), Page 58
Hot Network Questions
How does Steam Cloud work for refunded games?
Understanding the Relationship Between Mean Difference and p-value in a Paired t-Test
Bijective proof of constructing natural numbers from ZF axioms
How to perform sed replacement from the rule file only on certain lines?
What is a numerically practical and safe measure of dispersion of a data set?
Find a linear function such that if f(0), f(1), f(2), ⋯ are indices of the elements of the list, the sum must equal to its slope
Theory of dual 555 timer warbler circuit
Single-line initialization of array allocated by malloc()
Can I use Heavy Weapon Mastery with an Opportunity Attack?
Between the NKJV and the KJV, which is the better interpretation of Job 7:20a; is this a question or a statement?
Removing a file from a Debian package without removing the existing file on upgrade
Strongly-typed CUDA device memory
Books about algebra in style of category theory
"Saying who or what did the action would be clearer": passive voice vs. active voice in a technical document/checklist?
Submitted the same research article in two journals; now I'm scared
Voltage output formula for a transimpedance amplifier with two input voltages
What's the PC used in "American Kickboxer"?
Orthogonal Center (clockwise)
What is this circuit breaker on the outside of my house for?
Are these LED/resistor configurations equivalent?
Pure buttons in the modal logic of forcing
(LuaLaTeX) Issue with Cyrillic and Japanese Fonts Conflict
Novel Two ships set out to explore the arctic. Disaster befalls them. There is a demon which appears to be a polar bear
How to prevent paste from removing Data Validation (no macros), while allowing users to insert rows in Excel?
more hot questions
Question feed
Subscribe to RSS
Question feed
To subscribe to this RSS feed, copy and paste this URL into your RSS reader.
lang-hs
Stack Overflow
Questions
Help
Chat
Products
Teams
Advertising
Talent
Company
About
Press
Work Here
Legal
Privacy Policy
Terms of Service
Contact Us
Your Privacy Choices
Cookie Policy
Stack Exchange Network
Technology
Culture & recreation
Life & arts
Science
Professional
Business
API
Data
Blog
Facebook
Twitter
LinkedIn
Instagram
Site design / logo © 2025 Stack Exchange Inc;
user contributions licensed under
CC BY-SA
.
rev 2025.9.22.34261