c# - ASP.NET Core dependency inject (Generic) error - Stack Overflow
Skip to main content
Stack Overflow
About
Products
For Teams
Stack Overflow for Teams
Where developers & technologists share private knowledge with coworkers
Advertising
Reach devs & technologists worldwide about your product, service or employer brand
Knowledge Solutions
Data licensing offering for businesses to build and improve AI tools and models
Labs
The future of collective knowledge sharing
About the company
Visit the blog
Loading…
current community
Stack Overflow
help
chat
Meta Stack Overflow
your communities
Sign up or log in to customize your list.
more stack exchange communities
company blog
Log in
Sign up
Home
Questions
AI Assist
Labs
Tags
Challenges
Chat
Articles
Users
Jobs
Companies
Collectives
Communities for your favorite technologies.
Explore all Collectives
Teams
Ask questions, find answers and collaborate at work with Stack Overflow for Teams.
Try Teams for free
Explore Teams
Teams
Ask questions, find answers and collaborate at work with Stack Overflow for Teams.
Explore Teams
Collectives™ on Stack Overflow
Find centralized, trusted content and collaborate around the technologies you use most.
Learn more about Collectives
Teams
Q&A for work
Connect and share knowledge within a single location that is structured and easy to search.
Learn more about Teams
ASP.NET Core dependency inject (Generic) error
Ask Question
Asked
8 days ago
Modified
7 days ago
Viewed
102 times
1
I want to create a repository base class, every service should inherit from this BaseService.
This is my code:
public class BaseService<TEntity, TAddDto, TUpdateDto, TEntityDto> : IBaseService<TEntity, TAddDto, TUpdateDto, TEntityDto>
where TEntity : Entity<long>
where TAddDto : class
where TUpdateDto : class
where TEntityDto : class
{
private readonly IFreeSql<SqlServerFlag> _fsql;
public BaseService(IFreeSql<SqlServerFlag> fsql)
{
_fsql = fsql;
}
public virtual async Task<IResultOutput> AddAsync(TAddDto input)
{
var addEntity = input.Adapt<TEntity>();
await _fsql.Insert(addEntity).ExecuteAffrowsAsync();
return ResultOutput.Ok();
}
public virtual async Task<IResultOutput> UpdateAsync(TUpdateDto input)
{
var property = typeof(TUpdateDto).GetProperty("Id");
if (property == null)
{
throw new ArgumentException("Id is not exist");
}
var obj = property.GetValue(input);
await _fsql.Update<TEntity>(input)
.Where(LambdaHelper.GetPropertyNameExpression<TEntity>("Id", obj))
.ExecuteAffrowsAsync();
return ResultOutput.Ok();
}
public virtual async Task<IResultOutput> GetAsync(long id)
{
var dto = await _fsql.Select<TEntity>()
.Where(a => a.Id == id)
.FirstAsync<TEntityDto>();
return ResultOutput.Ok();
}
public virtual async Task<IResultOutput> FakeDeleteAsync(long id)
{
int rows = await _fsql.Update<TEntity>()
.Set(LambdaHelper.GetPropertyNameMemberExpression<TEntity>("IsDeleted", true), true)
.Where(a => a.Id == id)
.ExecuteAffrowsAsync();
return rows > 0 ? ResultOutput.Ok() : ResultOutput.NotOk();
}
public virtual async Task<IResultOutput> DeleteAsync(long id)
{
int rows = await _fsql.Delete<TEntity>()
.Where(a => a.Id == id)
.ExecuteAffrowsAsync();
return rows > 0 ? ResultOutput.Ok() : ResultOutput.NotOk();
}
}
}
This is the IBaseService interface:
public interface IBaseService<TEntity, TAddDto, TUpdateDto, TEntityDto>
where TEntity : Entity<long>
where TAddDto : class
where TUpdateDto : class
where TEntityDto : class
{
Task<IResultOutput> AddAsync(TAddDto input);
Task<IResultOutput> UpdateAsync(TUpdateDto input);
Task<IResultOutput> GetAsync(long id);
Task<IResultOutput> FakeDeleteAsync(long id);
Task<IResultOutput> DeleteAsync(long id);
}
I create an InternationalService that inherits from BaseService<,,,> like this:
public class InternationalService: BaseService<InternationalEntity, InternationalAddInput, InternationalUpdateInput, InternationalDto>, IInternationalService
{
public InternationalService(IFreeSql<SqlServerFlag> fsql):base(fsql)
{
}
}
The IInternationalService interface looks like this:
public interface IInternationalService: IBaseService<InternationalEntity, InternationalAddInput, InternationalUpdateInput, InternationalDto>
{
}
I inject the service in Program.cs:
// Inject Generic Service
builder.Services.AddScoped(typeof(IBaseService<,,,>), typeof(BaseService<,,,>));
// Inject the end name Service
var types = Assembly.Load("Xin.Service")
.GetExportedTypes()
.Where(a => a.Name.EndsWith("Service"));
foreach (var type in types)
{
var interfaces = type.GetInterfaces();
foreach (var baseType in interfaces)
{
builder.Services.AddScoped(baseType, type);
}
}
I want every service to inherit from BaseService, so I can ignore the basic add update delete...code, but I can't run the code.
Can you please help me? Thanks
when I run the app, the app don't work, the error was
Application terminated unexpectedly
System.ArgumentException: Cannot instantiate implementation type 'Xin.Service.International.IInternationalService' for service type 'Xin.Service.Base.IBaseService`4[Xin.Model.System.InternationalEntity,Xin.Service.International.Dto.InternationalAddInput,Xin.Service.International.Dto.InternationalUpdateInput,Xin.Service.International.Dto.InternationalDto]'.
at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.Populate()
at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory..ctor(ICollection`1 descriptors)
at Microsoft.Extensions.DependencyInjection.ServiceProvider..ctor(ICollection`1 serviceDescriptors, ServiceProviderOptions options)
at Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(IServiceCollection services, ServiceProviderOptions options)
at Microsoft.Extensions.Hosting.HostApplicationBuilder.Build()
at Microsoft.AspNetCore.Builder.WebApplicationBuilder.Build()
at Xin.Admin.WebApi.Program.Main(String[] args) in E:\home\NetCore\code\Xin.Admin\Xin.Admin.WebApi\Program.cs:line 22
c#.netasp.net-core.net-coredependency-injection
Share
Improve this question
Follow
edited Sep 15 at 8:06
Guru Stron
148k1111 gold badges183183 silver badges228228 bronze badges
asked Sep 14 at 2:52
rossross
2344 bronze badges
5
You should put as much effort in your question (research, formatting) as you want from our answers
Sir Rufo
–
Sir Rufo
2025-09-14 03:50:51 +00:00
Commented
Sep 14 at 3:50
1
Seems you try to register the interface IInternationalService as implementation type
Sir Rufo
–
Sir Rufo
2025-09-14 03:53:09 +00:00
Commented
Sep 14 at 3:53
Try modifying your filter for types to
something like .Where(a => a.Name.EndsWith("Service") && !a.IsInterface && !a.IsAbstract)
so it will try to register only the types that are instantiable.
Guru Stron
–
Guru Stron
2025-09-14 06:17:26 +00:00
Commented
Sep 14 at 6:17
@GuruStron it is work, thanks
ross
–
ross
2025-09-15 03:13:43 +00:00
Commented
Sep 15 at 3:13
@ross was glad to help! Adding as an answer.
Guru Stron
–
Guru Stron
2025-09-15 08:07:12 +00:00
Commented
Sep 15 at 8:07
Add a comment
|
2 Answers
2
Sorted by:
Reset to default
Highest score (default)
Trending (recent votes count more)
Date modified (newest first)
Date created (oldest first)
1
If I read this correctly you want to implement boilerplate code in a base class, scan for all concrete implementations, and inject them into DI automatically.
If so, I think you may be overcomplicating things a little: there doesn't seem a need for interfaces for the concrete implementations such as IInternationalService.
Here's a simple demo to show one way of doing that.
Note I've demonstrated using interfaces rather naming conventions to find and register the services.
First a generic interface:
public interface IMyService<T>
where T : class, new()
{
public T Data { get;}
Task<T> GetAsync(long id);
}
And a simple data object:
public record MyData
{
public string Name { get; init; } = "Not Set";
}
Next the base service definition:
public abstract class BaseService<T>
where T : class, new()
{
public Task<T> GetAsync(long id)
=> Task.FromResult<T>(new T() );
}
Note no IMyService inheritance: we don't want to capture it in any assembly scanning for the interface.
And finally a concrete implementation:
public class TestService : BaseService<MyData>, IMyService<MyData>
{
public MyData Data => new MyData() { Name = ($"{this.GetType().FullName}") };
public TestService() : base() { }
}
The following IServiceCollection extension class scans the main assembly, finds all the IMyService Services
and registers each against the interface.
public static class AddServicesExtensions
{
public static void AddMyServices(this IServiceCollection services)
{
var assembly = Assembly.GetCallingAssembly();
var requestHandlerInterfaceType = typeof(IMyService<>);
var handlerTypes = assembly
.GetTypes()
.Where(type => !type.IsAbstract && !type.IsInterface)
.SelectMany(type => type.GetInterfaces()
.Where(i => i.IsGenericType && i.GetGenericTypeDefinition() == requestHandlerInterfaceType)
.Select(i => new { Interface = i, Implementation = type }));
foreach (var handler in handlerTypes)
{
services.AddScoped(handler.Interface, handler.Implementation);
}
}
}
And Registration:
var builder = WebApplication.CreateBuilder(args);
// Add services to the container.
builder.Services.AddRazorComponents()
.AddInteractiveServerComponents();
builder.Services.AddMyServices();
var app = builder.Build();
Here's a Blazor page that uses the service:
@page "/"
@inject IMyService<MyData> _service
<PageTitle>Home</PageTitle>
<h1>Hello, world! - @_service.Data.Name</h1>
Welcome to your new app.
Share
Improve this answer
Follow
edited Sep 15 at 7:00
answered Sep 14 at 10:58
MrC aka Shaun CurtisMrC aka Shaun Curtis
32.1k33 gold badges2727 silver badges5656 bronze badges
Comments
Add a comment
1
The problem comes from the fact that you capture unwanted types to register. Filter out the interfaces (and optionally abstract types):
var types = Assembly.Load("Xin.Service")
.GetExportedTypes()
.Where(a =>
a.Name.EndsWith("Service")
&& !a.IsInterface
&& !a.IsAbstract);
Personally I prefer to avoid dynamically registering services (so you don't bump into corner cases like yours), but without having full context it's hard to tell if approach is valid or not.
If you decide to go this path I would recommend to look into library like Scrutor which provides assembly scanning and decoration extensions for Microsoft.Extensions.DependencyInjection. Arguably it provides more readable API and does not require to mess with reflection directly.
Arguably Assembly.Load("Xin.Service") is not idiomatic for your case - highly likely that assembly is referenced and is not loaded manually, so you instead of using magic strings - use some type from the assembly (personally I usually create type like XinServiceAssemblyLandmark and use it). Like typeof(SomeServiceInXinService).Assembly. If you will use Scrutor this would be out of the box.
Another, probably even better, approach would be to just add method like AddXinServices in the Xin.Service project, so you don't need to get the assembly in the composition root (i.e. Program.cs):
public static class ServiceCollectionExtensions
{
public static void AddXinServices(this IServiceCollection services)
{
// ... magic here
}
}
And then call it in the Program.cs: builder.Services.AddXinServices();
Share
Improve this answer
Follow
edited Sep 15 at 8:12
answered Sep 15 at 8:06
Guru StronGuru Stron
148k1111 gold badges183183 silver badges228228 bronze badges
Comments
Add a comment
Your Answer
Thanks for contributing an answer to Stack Overflow!Please be sure to answer the question. Provide details and share your research!But avoid …Asking for help, clarification, or responding to other answers.Making statements based on opinion; back them up with references or personal experience.To learn more, see our tips on writing great answers.
Draft saved
Draft discarded
Sign up or log in
Sign up using Google
Sign up using Email and Password
Submit
Post as a guest
Name
Email
Required, but never shown
Post as a guest
Name
Email
Required, but never shown
Post Your Answer
Discard
By clicking “Post Your Answer”, you agree to our terms of service and acknowledge you have read our privacy policy.
Start asking to get answers
Find the answer to your question by asking.
Ask question
Explore related questions
c#.netasp.net-core.net-coredependency-injection
See similar questions with these tags.
The Overflow Blog
Stack Overflow is helping you learn to code with new resources
Off with your CMS’s head! Composability and security in headless CMS
Featured on Meta
Spevacus has joined us as a Community Manager
Introducing a new proactive anti-spam measure
Policy: Generative AI (e.g., ChatGPT) is banned
New and improved coding challenges
New comment UI experiment graduation
Visit chat
Related
3686
What is dependency injection?
623
Resolving instances with ASP.NET Core DI from within ConfigureServices
1315
How do I call a generic method using a Type variable?
1028
What is the difference between .NET Core and .NET Standard Class Library project types?
1466
Create Generic method constraining T to an Enum
494
How to unapply a migration in ASP.NET Core with EF Core
682
How do you create a custom AuthorizeAttribute in ASP.NET Core?
553
Dependency Injection error: Unable to resolve service for type while attempting to activate, while class is registered
734
Inversion of Control vs Dependency Injection
637
Why does one use dependency injection?
Hot Network Questions
How did "hospital" lose its first syllable in some languages?
Should you publish a new result as an appendum?
How do I handle two apps for a single Firebase Project?
Compute probability current from stochastic path integral
What is the order type of the hyperwebster?
Books about algebra in style of category theory
Why is the geometric solution of minimizing error via orthogonality called a "least squares" solution?
Weep holes or other? Should they be filled?
How can I draw this box in 3D ? I am unhappy with that I have
Can I use Heroic Inspiration on a natural 1 on an Attack roll?
How do I make the jump FROM the wooden block in Anouki Village?
Tooth cavities in 4 year old kid
Why does the Equality Act 2010 contain a provision mandating its amendment?
Apparent contradiction in Lorentz's magnetic force and Ohm's law relation
Renault duster 2000 CC is doing Fuel consumption 11.6L /100 KM on average of 23 KM/Hour
What does 我都晕肉了 mean?
How do I Shove in 5e 2014, specifically?
n white and n black balls, pairs of balls drawn one by one. Probability that each pair contains 1W & 1B.
What percentage of the town drinks liquor?
What is the probe like structure next to the static port on this cessna 172?
Time is to "eternal" as space is to what?
Movie with an alien in disguise as a human boy. Fights a bad alien
What spider is this. Found in Milwaukee WI
Productivity of 不～ prefix
more hot questions
Question feed
Subscribe to RSS
Question feed
To subscribe to this RSS feed, copy and paste this URL into your RSS reader.
lang-cs
Stack Overflow
Questions
Help
Chat
Products
Teams
Advertising
Talent
Company
About
Press
Work Here
Legal
Privacy Policy
Terms of Service
Contact Us
Your Privacy Choices
Cookie Policy
Stack Exchange Network
Technology
Culture & recreation
Life & arts
Science
Professional
Business
API
Data
Blog
Facebook
Twitter
LinkedIn
Instagram
Site design / logo © 2025 Stack Exchange Inc;
user contributions licensed under
CC BY-SA
.
rev 2025.9.22.34261