c++ - scoped_lock with a timeout? - Stack Overflow
Skip to main content
Stack Overflow
About
Products
For Teams
Stack Overflow for Teams
Where developers & technologists share private knowledge with coworkers
Advertising
Reach devs & technologists worldwide about your product, service or employer brand
Knowledge Solutions
Data licensing offering for businesses to build and improve AI tools and models
Labs
The future of collective knowledge sharing
About the company
Visit the blog
Loading…
current community
Stack Overflow
help
chat
Meta Stack Overflow
your communities
Sign up or log in to customize your list.
more stack exchange communities
company blog
Log in
Sign up
Home
Questions
AI Assist
Labs
Tags
Challenges
Chat
Articles
Users
Jobs
Companies
Collectives
Communities for your favorite technologies.
Explore all Collectives
Teams
Ask questions, find answers and collaborate at work with Stack Overflow for Teams.
Try Teams for free
Explore Teams
Teams
Ask questions, find answers and collaborate at work with Stack Overflow for Teams.
Explore Teams
Collectives™ on Stack Overflow
Find centralized, trusted content and collaborate around the technologies you use most.
Learn more about Collectives
Teams
Q&A for work
Connect and share knowledge within a single location that is structured and easy to search.
Learn more about Teams
scoped_lock with a timeout?
Ask Question
Asked
7 days ago
Modified
6 days ago
Viewed
140 times
1
Is it possible to have a scoped_lock with a timeout to wait N seconds/millis to acquire the lock?
I see no mention here:
https://en.cppreference.com/w/cpp/thread/scoped_lock.html
I can see std::timed_mutex but in all the examples it seems to be explicitly released via .unlock()?
I see Boost might have one, but then I cannot use std chrono for timeouts etc.
Otherwise I'll have to write my own
c++
Share
Improve this question
Follow
edited Sep 17 at 16:14
intrigued_66intrigued_66
asked Sep 17 at 16:05
intrigued_66intrigued_66
17.5k5151 gold badges131131 silver badges209209 bronze badges
8
1
@tkausl I'd like to try and obtain a lock for N seconds/millis etc. If I do obtain the lock, I'd like to rely on RAII to release it? If I don't acquire the lock, I raise an error. I've just used timed_mutex and forgot to explicitly unlock
intrigued_66
–
intrigued_66
2025-09-17 16:10:25 +00:00
Commented
Sep 17 at 16:10
1
I misunderstood that, sorry.
tkausl
–
tkausl
2025-09-17 16:14:11 +00:00
Commented
Sep 17 at 16:14
1
std::unique_lock<std::mutex> lock(counter_mutex, std::defer_lock); if (lock.try_lock_for(std::chrono::seconds(1))) {.
Marek R
–
Marek R
2025-09-17 16:19:05 +00:00
Commented
Sep 17 at 16:19
1
@MarekR Thank you so much. Please do feel free to put your comment as an answer
intrigued_66
–
intrigued_66
2025-09-17 16:21:00 +00:00
Commented
Sep 17 at 16:21
1
Side note, in my experience if you think you need timeouts on locks you have bigger issues. So can you explain a bit why you think you need this? Yes I've seen developers try to get locks like this and if it takes too long just do things anyway, or to "hide" deadlocks (I clearly remember a seeing a variable named "defy_deadlock" long time ago) so ;)
Pepijn Kramer
–
Pepijn Kramer
2025-09-17 16:30:12 +00:00
Commented
Sep 17 at 16:30
|
Show 3 more comments
3 Answers
3
Sorted by:
Reset to default
Highest score (default)
Trending (recent votes count more)
Date modified (newest first)
Date created (oldest first)
6
std::scoped_lock is the utility that will call unlock() in destructor on all owned mutexes. So wherever in the example you have unlock() call, you can mentally replace it by "std::scoped_lock-end-of-life".
Do note that you need std::adopt_lock if you want to use timeout versions of try_lock(), as std::scoped_lock doesn't know how to use them:
std::timed_mutex m;
if (m.try_lock_for(1s)) {
std::scoped_lock lock {std::adopt_lock, m};
// you have mutex here, it will be released automatically at the end of scope
} else {
// you didn't acquire mutex
}
Share
Improve this answer
Follow
answered Sep 17 at 16:22
YksisarvinenYksisarvinen
23.3k55 gold badges3838 silver badges7070 bronze badges
1 Comment
Add a comment
Christian Stieber Christian Stieber Sep 19 at 4:57
Of course, the reason why one would use a std::scoped_mutex instead of an std::unique_mutex is because it locks multiple mutexes... presumably in a deadlock-free fashion. Your simple example fails to take this aspect into account; that's also the reason why implementing a timed scoped lock needs some work. 2025-09-19T04:57:58.49Z+00:00
2
Reply
Copy link
4
The language of your question implies a single mutex that you are trying to perform a timed lock on with an RAII device.
If that is the case, std::unique_lock paired with a std::timed_mutex is the tool you are looking for.
#include <mutex>
#include <chrono>
#include <iostream>
std::timed_mutex mut;
int
main()
{
using namespace std::literals;
std::unique_lock lk{mut, 157ms};
// or 3s, 6ns, whatever
if (lk.owns_lock())
std::cout << "Got it\n";
else
std::cout << "Didn't get it\n";
}
If you meant a device for a timed wait on locking multiple mutexes, that is not currently in the standard.
I have seen interest in adding that functionality to the standard though.
If desired, you can use the same syntax to try until a time_point:
auto tp = std::chrono::steady_clock::now() + 3s;
// Do other work...
std::unique_lock lk{mut, tp};
if (lk.owns_lock()) // ...
In either case, lk will unlock the mutex when it goes out of scope if (and only if) it obtained the lock in the timed try lock, and has not been previously released with lk.unlock().
Share
Improve this answer
Follow
edited Sep 18 at 20:25
answered Sep 18 at 0:43
Howard HinnantHoward Hinnant
224k5555 gold badges491491 silver badges620620 bronze badges
Comments
Add a comment
0
Is it possible to have a scoped_lock with a timeout to wait N seconds/millis to acquire the lock?
std::scoped_lock does not have a built-in timeout mechanism in C++. std::scoped_lock is a simple RAII wrapper that blocks indefinitely until it acquires the lock(s).
The class scoped_lock is a mutex wrapper that provides a convenient RAII-style mechanism for owning zero or more mutexes for the duration of a scoped block.
When a scoped_lock object is created, it attempts to take ownership of the mutexes it is given. When control leaves the scope in which the scoped_lock object was created, the scoped_lock is destructed and the mutexes are released. If several mutexes are given, deadlock avoidance algorithm is used as if by std::lock.
The scoped_lock class is non-copyable.
And:
Tries to lock (i.e., takes ownership of) the associated mutex. Blocks until specified timeout_duration has elapsed or the lock is acquired, whichever comes first. On successful lock acquisition returns true, otherwise returns false. Effectively calls mutex()->try_lock_for(timeout_duration).
This function may block for longer than timeout_duration due to scheduling or resource contention delays.
The standard recommends that a steady clock is used to measure the duration. If an implementation uses a system clock instead, the wait time may also be sensitive to clock adjustments.
std::system_error is thrown if there is no associated mutex or if the mutex is already locked by this std::unique_lock.
Share
Improve this answer
Follow
answered Sep 17 at 21:15
PumpkinPie πPumpkinPie π
944 bronze badges
1 Comment
Add a comment
Scheff's Cat Scheff's Cat Sep 18 at 7:47
If you cite something you should state as well from where. The last cite (at bottom) somehow doesn't fit to std::scoped_lock but rather to try_lock(). This whole thing smells like a copy-paste from an AI answer to me. Please, note that this behavior is prohibited on Stack Overflow (and AI answers should be remarked as such in general). 2025-09-18T07:47:13.677Z+00:00
2
Reply
Copy link
Your Answer
Thanks for contributing an answer to Stack Overflow!Please be sure to answer the question. Provide details and share your research!But avoid …Asking for help, clarification, or responding to other answers.Making statements based on opinion; back them up with references or personal experience.To learn more, see our tips on writing great answers.
Draft saved
Draft discarded
Sign up or log in
Sign up using Google
Sign up using Email and Password
Submit
Post as a guest
Name
Email
Required, but never shown
Post as a guest
Name
Email
Required, but never shown
Post Your Answer
Discard
By clicking “Post Your Answer”, you agree to our terms of service and acknowledge you have read our privacy policy.
Start asking to get answers
Find the answer to your question by asking.
Ask question
Explore related questions
c++
See similar questions with these tags.
The Overflow Blog
Democratizing your data access with AI agents
The history and future of software development (part 1)
Featured on Meta
Spevacus has joined us as a Community Manager
Introducing a new proactive anti-spam measure
New and improved coding challenges
New comment UI experiment graduation
Policy: Generative AI (e.g., ChatGPT) is banned
Related
3453
What's the problem with "using namespace std;"?
0
How to correctly use boost::timed_mutex and scoped_lock
1654
Replacing a 32-bit loop counter with 64-bit introduces crazy performance deviations with _mm_popcnt_u64 on Intel CPUs
366
std::lock_guard or std::scoped_lock?
2
Is it always necessary for a notifying thread to lock the shared data during modification?
1
waiting on a condition variable in a helper function that's called from the function that acquires the lock
11
Get chrono seconds in float
0
Showing the unlock from std::condition_variable::wait
Hot Network Questions
Gentoo: how to upgrade only packages with new version released?
What license to use when extending a pre-existing library?
Are there any problems with mastering my own music?
My supervisor wants to make herself the first author on our paper, what should I do?
Could our telescopes detect a type I civilisation
Why is the geometric solution of minimizing error via orthogonality called a "least squares" solution?
How to make two signals rolling simultaneously in opposite directions on an oscilloscope?
What spider is this. Found in Milwaukee WI
Does pseudo-vitae revenants produce replenish vitae in Kindred?
Is L = { a^n b^m c^k | n,m,k > 0 and k = |n - m| } CFL or DCFL?
Why do some car key fobs use two frequencies?
Black holes, artificial creation and possible nullification
difference between dynamips and iol and Qemu images
What does "transform into the character pulled into the UFO" mean?
What is a closed condition?
From honeycombs to a cube
what does "my left a** cheek" mean?
Is there a difference between a mechanistic explanation and a nomic explanation?
Existence of maximal subgroups of even order which are not normal
Can I double-dip on Torbran's added damage in this scenario?
Probability of selections of 4 letters from 9 letters
Solve the equations to name the animal
Is vowel length phonemic in General American?
Is the Shadow Puppets third-party spell by Kobold Press balanced?
more hot questions
Question feed
Subscribe to RSS
Question feed
To subscribe to this RSS feed, copy and paste this URL into your RSS reader.
lang-cpp
Stack Overflow
Questions
Help
Chat
Products
Teams
Advertising
Talent
Company
About
Press
Work Here
Legal
Privacy Policy
Terms of Service
Contact Us
Your Privacy Choices
Cookie Policy
Stack Exchange Network
Technology
Culture & recreation
Life & arts
Science
Professional
Business
API
Data
Blog
Facebook
Twitter
LinkedIn
Instagram
Site design / logo © 2025 Stack Exchange Inc;
user contributions licensed under
CC BY-SA
.
rev 2025.9.24.34399