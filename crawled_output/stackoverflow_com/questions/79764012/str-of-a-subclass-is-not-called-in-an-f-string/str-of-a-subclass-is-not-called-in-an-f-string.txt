python - Make subclass use custom `__str__` in an f-string - Stack Overflow
Skip to main content
Stack Overflow
About
Products
For Teams
Stack Overflow for Teams
Where developers & technologists share private knowledge with coworkers
Advertising
Reach devs & technologists worldwide about your product, service or employer brand
Knowledge Solutions
Data licensing offering for businesses to build and improve AI tools and models
Labs
The future of collective knowledge sharing
About the company
Visit the blog
Loading…
current community
Stack Overflow
help
chat
Meta Stack Overflow
your communities
Sign up or log in to customize your list.
more stack exchange communities
company blog
Log in
Sign up
Home
Questions
AI Assist
Labs
Tags
Challenges
Chat
Articles
Users
Jobs
Companies
Collectives
Communities for your favorite technologies.
Explore all Collectives
Teams
Ask questions, find answers and collaborate at work with Stack Overflow for Teams.
Try Teams for free
Explore Teams
Teams
Ask questions, find answers and collaborate at work with Stack Overflow for Teams.
Explore Teams
Collectives™ on Stack Overflow
Find centralized, trusted content and collaborate around the technologies you use most.
Learn more about Collectives
Teams
Q&A for work
Connect and share knowledge within a single location that is structured and easy to search.
Learn more about Teams
Make subclass use custom `__str__` in an f-string
Ask Question
Asked
12 days ago
Modified
yesterday
Viewed
171 times
4
I wrote a subclass of Decimal to represent an amount of money. I wrote a custom __str__ to display the currency along with a sign format. My method works when calling str() but in a f-string somehow my custom __str__ is not used. What is happening here?
My goal is to have my custom __str__ being used in f-string situations. I'm also interested in understanding what is happening here. Something is going on that defies my current understanding of
__str__, __format__ and inheritance. I thought the default behavior of format with no format specified was to delegate to str, but here it sends it to str of the parent class instead.
Here is the minimal code to reproduce:
from decimal import Decimal
class Money(Decimal):
CURRENCY = "€"
def __new__(cls, number):
return super().__new__(cls, Decimal(number).quantize(Decimal("0.01")))
def __str__(self):
return f"{self:+}{self.CURRENCY}"
m = Money(10)
print("Test 1 - str():", str(m))
print("Test 2 - print():", m)
print(f"Test 3 - f-string: {m}")
print("Test 4 - f-string str():", f"{str(m)}")
This results in
Test 1 - str(): +10.00€
Test 2 - print(): +10.00€
Test 3 - f-string: 10.00 # only here is my custom str not called
Test 4 - f-string str(): +10.00€
Python version is 3.13.7.
pythonf-string
Share
Improve this question
Follow
edited Sep 17 at 14:19
Antoine GallixAntoine Gallix
asked Sep 13 at 23:45
Antoine GallixAntoine Gallix
88622 gold badges1212 silver badges3232 bronze badges
1
1
Side note, you probably want to use composition over inheritance. Any method that you do not explicitly override will return a Decimal object rather than a Money object. This can be a pernicious source of bugs, as you might forget to override a less well known method of Decimal. Even operations as simple as +Money(0) will result in a Decimal object. See also methods (eg. Money(0).quantize(Money(0))), and implied operations (eg. round(Money(0), 3)) as well.
Dunes
–
Dunes
2025-09-14 09:55:21 +00:00
Commented
Sep 14 at 9:55
Add a comment
|
3 Answers
3
Sorted by:
Reset to default
Highest score (default)
Trending (recent votes count more)
Date modified (newest first)
Date created (oldest first)
9
f-strings in Python prioritize __format__ over __str__. Since Money inherits from Decimal, you need to add __format__ to your class for expected behavior.
from decimal import Decimal
class Money(Decimal):
CURRENCY = "€"
def __new__(cls, number):
return super().__new__(cls, Decimal(number).quantize(Decimal("0.01")))
def __format__(self, format_spec: str) -> str:
if not format_spec:
format_spec = "+.2f"
formatted_number = super().__format__(format_spec)
return f"{formatted_number}{self.CURRENCY}"
def __str__(self) -> str:
formatted_number = super().__format__("+.2f")
return f"{formatted_number}{self.CURRENCY}"
Share
Improve this answer
Follow
edited Sep 14 at 0:35
answered Sep 14 at 0:04
pixel-processpixel-process
33577 bronze badges
Comments
Add a comment
3
The __format__ method is not meant to be called explicitly as pointed out in this post
I would suggest:
from decimal import Decimal
class Money(Decimal):
QUANT = Decimal("0.01")
FORMAT = "+.2f"
def __new__(cls, number):
return super().__new__(cls, Decimal(number).quantize(Money.QUANT))
def __format__(self, format_spec):
return super().__format__(format_spec or Money.FORMAT) + "€"
def __str__(self):
return f"{self:{Money.FORMAT}}"
money = Money("1.123")
print(f"{money}")
print(f"{money:+.4f}")
print(money)
Output:
+1.12€
+1.1200€
+1.12€
Share
Improve this answer
Follow
answered Sep 14 at 8:07
RamrabRamrab
28.9k33 gold badges99 silver badges2727 bronze badges
Comments
Add a comment
1
First, you should know the whole process
F-strings use __format__() method, not directly __str__()
When __format__() is not defined, Python falls back to str()
If a parent class defines __format__(), it takes precedence over the subclass's __str__()
Use !s specifier to force string conversion: f"{obj!s}"
The most robust solution is to override __format__() in your subclass
So you can use these solutions to fix your problem
Override __format__ method
class Parent:
def __str__(self):
return "Parent string"
def __format__(self, format_spec):
return str(self)
class Child(Parent):
def __str__(self):
return "Child string"
def __format__(self, format_spec):
return str(self)
# This ensures __str__ is called
# Test
child = Child()
print(f"{child}")
# Output: Child string
Share
Improve this answer
Follow
edited Sep 14 at 8:43
Serge Ballesta
150k1313 gold badges137137 silver badges267267 bronze badges
answered Sep 14 at 5:17
Marc StevenMarc Steven
57055 silver badges1717 bronze badges
1 Comment
Add a comment
Ramrab Ramrab Sep 15 at 14:29
But this doesn't facilitate any kind of formatting. For example print(f"{child:>16}") 2025-09-15T14:29:26.707Z+00:00
1
Reply
Copy link
Your Answer
Thanks for contributing an answer to Stack Overflow!Please be sure to answer the question. Provide details and share your research!But avoid …Asking for help, clarification, or responding to other answers.Making statements based on opinion; back them up with references or personal experience.To learn more, see our tips on writing great answers.
Draft saved
Draft discarded
Sign up or log in
Sign up using Google
Sign up using Email and Password
Submit
Post as a guest
Name
Email
Required, but never shown
Post as a guest
Name
Email
Required, but never shown
Post Your Answer
Discard
By clicking “Post Your Answer”, you agree to our terms of service and acknowledge you have read our privacy policy.
Start asking to get answers
Find the answer to your question by asking.
Ask question
Explore related questions
pythonf-string
See similar questions with these tags.
The Overflow Blog
Democratizing your data access with AI agents
The history and future of software development (part 1)
Featured on Meta
Spevacus has joined us as a Community Manager
Introducing a new proactive anti-spam measure
New and improved coding challenges
New comment UI experiment graduation
Policy: Generative AI (e.g., ChatGPT) is banned
Linked
75
f-string representation different than str()
1
Is there a way to override __format__ method
Related
3816
What is the difference between __str__ and __repr__?
5481
How do I make a flat list out of a list of lists?
3876
Convert bytes to a string in Python 3
4040
How can I use a global variable in a function?
3586
Does Python have a string 'contains' substring method?
1468
String formatting: % vs. .format vs. f-string literal
3196
How do I make function decorators and chain them together?
3000
Convert string "Jun 1 2005 1:33PM" into datetime
2579
How do I lowercase a string in Python?
Hot Network Questions
Space Princess Space Tours: Black Holes merging - what would you visually see?
On Manolakis & Ingle's definition of the discrete-time unit step signal
What does it mean for a museum exhibit "not to have a Soviet anniversary"?
Stretch an elastic band around three nails so that it relaxes when any nail is removed
Lock icon to convey disabled but has a clickable feature?
Which driving direction syncs with Quebec’s and Maritime Canada’s autumn leaf colors?
Why would disembarking a few passengers delay a flight by 3 hours?
How do I make the middle of the bill curve up?
Simplification of an analytically evaluated integral expressed in terms of elliptic integrals
What does "my left a** cheek" mean?
Using Switch to return a value depending on the sign of a real number
Separating trefoil knot on torus
"Dubito, ergo cognosco". Could we argue that the very fact of doubting, sets a limit to the epistemological notions we can actually doubt?
What is this glass device I found next to drinking glasses in the south of France
How to convert square wave to sine wave
What is the effectiveness of using a miniature (ground) plane to route vias through as opposed to using separate paths and vias?
At high pressures, is aromaticity affected?
failed to resolve source metadata for docker.io/library/openjdk:21-slim-buster
Return sum of last 3 odd numbers
What does it mean for work to be done ON a system?
Plotting functions without sampling artefacts
How do trees drop their leaves?
Was King George VI’s lung surgery performed at Buckingham Palace as shown?
Foundry versions starting from `1.3.0`, not allowing base constructor call without arguments
more hot questions
Question feed
Subscribe to RSS
Question feed
To subscribe to this RSS feed, copy and paste this URL into your RSS reader.
lang-py
Stack Overflow
Questions
Help
Chat
Products
Teams
Advertising
Talent
Company
About
Press
Work Here
Legal
Privacy Policy
Terms of Service
Contact Us
Your Privacy Choices
Cookie Policy
Stack Exchange Network
Technology
Culture & recreation
Life & arts
Science
Professional
Business
API
Data
Blog
Facebook
Twitter
LinkedIn
Instagram
Site design / logo © 2025 Stack Exchange Inc;
user contributions licensed under
CC BY-SA
.
rev 2025.9.25.34480