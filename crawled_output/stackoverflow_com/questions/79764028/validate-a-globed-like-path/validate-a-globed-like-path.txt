python - Validate a globed-like path - Stack Overflow
Skip to main content
Stack Overflow
About
Products
For Teams
Stack Overflow for Teams
Where developers & technologists share private knowledge with coworkers
Advertising
Reach devs & technologists worldwide about your product, service or employer brand
Knowledge Solutions
Data licensing offering for businesses to build and improve AI tools and models
Labs
The future of collective knowledge sharing
About the company
Visit the blog
Loading…
current community
Stack Overflow
help
chat
Meta Stack Overflow
your communities
Sign up or log in to customize your list.
more stack exchange communities
company blog
Log in
Sign up
Home
Questions
AI Assist
Labs
Tags
Challenges
Chat
Articles
Users
Jobs
Companies
Collectives
Communities for your favorite technologies.
Explore all Collectives
Teams
Ask questions, find answers and collaborate at work with Stack Overflow for Teams.
Try Teams for free
Explore Teams
Teams
Ask questions, find answers and collaborate at work with Stack Overflow for Teams.
Explore Teams
Collectives™ on Stack Overflow
Find centralized, trusted content and collaborate around the technologies you use most.
Learn more about Collectives
Teams
Q&A for work
Connect and share knowledge within a single location that is structured and easy to search.
Learn more about Teams
Validate a globed-like path
Ask Question
Asked
7 days ago
Modified
6 days ago
Viewed
88 times
0
I am writing a API for a program. The program has a native support of "globed" paths such as img-0*.png. I would like to know how to be sure that there is at least a file satisfying that pattern, a kind of is_globable(path) method.
path = 'img-0*.png'
if os.path.isfile(path):
pass
elif is_globable(path):
pass
else:
raise Exception(...)
Neither glob or pathlib provide such a functionality.
The most related method I found is pathlib.PurePath.full_match but solves the opposite problem.
pythonvalidationpathglob
Share
Improve this question
Follow
asked Sep 14 at 0:28
cardscards
5,21511 gold badge1313 silver badges2828 bronze badges
2
yes, for example. Even img-0?.png and other combinations. I want to know a way to validate globed-paths
cards
–
cards
2025-09-14 00:31:03 +00:00
Commented
Sep 14 at 0:31
got it! Makes sense now.
Aadvik
–
Aadvik
2025-09-14 00:42:31 +00:00
Commented
Sep 14 at 0:42
Add a comment
|
4 Answers
4
Sorted by:
Reset to default
Highest score (default)
Trending (recent votes count more)
Date modified (newest first)
Date created (oldest first)
2
Actually, this can be done using the glob library using glob.glob:
path = 'img-0*.png'
def is_globable(path):
return glob.glob(path)
if os.path.isfile(path):
pass
elif is_globable(path):
pass
else:
raise Exception(...)
Here are the docs:
https://docs.python.org/3/library/glob.html (first thing)
Share
Improve this answer
Follow
edited Sep 14 at 2:19
answered Sep 14 at 0:40
AadvikAadvik
1,53133 silver badges3030 bronze badges
3 Comments
Add a comment
John Gordon John Gordon Sep 14 at 1:45
Why bother calling bool()?
glob.glob() returns a list, and lists already evaluate as "falsey" (an empty list) or "truthy" (a list containing at least one item). 2025-09-14T01:45:19.457Z+00:00
2
Reply
Copy link
Aadvik Aadvik Sep 14 at 2:18
Good point, I edited my answer. 2025-09-14T02:18:58.777Z+00:00
0
Reply
Copy link
rasjani rasjani Sep 15 at 7:57
That would rely on the glob pattern
to be match from cwd. Stuff like that can lead to problems if the op does not know what he's doing. 2025-09-15T07:57:18.77Z+00:00
0
Reply
Copy link
1
I suggest taking look at fnmatch. Note that unlike glob.glob, functions from fnmatch do not scan directory automatically, but this might be advantage if your API is only for reading (no need to repeat scan) or if you wish to restrict files available, simple example
import fnmatch
def has_match(pattern, files):
for file in files:
if fnmatch.fnmatch(file, pattern):
return True
return False
files = ["01.jpg", "02.jpg", "03.jpg"]
has_match("*.jpg", files)
# True
has_match("*.txt", files)
# False
Share
Improve this answer
Follow
answered Sep 14 at 5:48
DaweoDaweo
38.1k33 gold badges1717 silver badges3232 bronze badges
Comments
Add a comment
0
Using the iterator form, glob.iglob.
For sake of completeness I recall its full signature:
glob.iglob(pathname, *, root_dir=None, dir_fd=None, recursive=False, include_hidden=False)
It is based on os.scandir and fnmatch.fnmatch to walk the tree and filter the names.
It also support the
? single character,
* for any characters with 0 or more repetitions and
[] for grouping
in both basename and directories.
Example of path: ./images-*/doc-00[4-7]_?.png
from glob import iglob
def is_globable(path):
return bool(next(iglob(path), False))
Share
Improve this answer
Follow
edited Sep 14 at 1:47
answered Sep 14 at 0:51
cardscards
5,21511 gold badge1313 silver badges2828 bronze badges
Comments
Add a comment
-1
This is my solution, it has several features as follows:
✅ Validates all common glob patterns (*, ?, [], {}, **)
✅ Checks for invalid characters and path length
✅ Validates bracket matching and pattern sanity
✅ Supports both Windows and Unix path styles
✅ Detailed error messages
✅ Batch validation support
✅ Performance optimized with caching
import re
from typing import Union, List, Tuple, Set, Optional
from functools import lru_cache
import time
class GlobPathValidator:
"""
Optimized glob path validator with comprehensive pattern validation
"""
# Precompiled regex patterns for performance
_INVALID_CHARS_PATTERN = re.compile(r'[<>:"|?*\x00-\x1f]')
_MULTI_ASTERISK_PATTERN = re.compile(r'\*\*+')
_VALID_GLOB_CHARS = re.compile(r'^[a-zA-Z0-9_\-\.\/\*\?\[\]\{\}\!\{\}]+$')
_WINDOWS_DRIVE_PATTERN = re.compile(r'^[a-zA-Z]:')
_CONSECUTIVE_SLASHES = re.compile(r'/{2,}')
def __init__(self, max_path_length: int = 4096, allow_windows_path: bool = False):
self.max_path_length = max_path_length
self.allow_windows_path = allow_windows_path
@lru_cache(maxsize=1024)
def validate_glob_path(self, path: str) -> Tuple[bool, str]:
"""
Validate a glob path pattern
Args:
path: Path string to validate
Returns:
Tuple[is_valid, error_message]
"""
# 1. Basic null and type checks
if not path:
return False, "Path cannot be empty"
if not isinstance(path, str):
return False, "Path must be a string"
# 2. Length validation
if len(path) > self.max_path_length:
return False, f"Path exceeds maximum length ({self.max_path_length} characters)"
# 3. Invalid character detection
invalid_chars = self._INVALID_CHARS_PATTERN.findall(path)
if invalid_chars:
return False, f"Path contains invalid characters: {set(invalid_chars)}"
# 4. Multiple asterisk validation
if self._MULTI_ASTERISK_PATTERN.search(path):
return False, "Consecutive asterisks beyond '**' are not allowed"
# 5. Basic glob pattern character validation
if not self._VALID_GLOB_CHARS.match(path.replace('\\', '/')):
return False, "Path contains invalid glob pattern characters"
# 6. Windows path specific validation
if self.allow_windows_path and self._is_windows_path_invalid(path):
return False, "Invalid Windows path format"
# 7. Bracket matching validation
bracket_error = self._validate_bracket_matching(path)
if bracket_error:
return False, bracket_error
# 8. Glob pattern sanity checks
pattern_error = self._validate_glob_patterns(path)
if pattern_error:
return False, pattern_error
# 9. Path separator validation
if self._CONSECUTIVE_SLASHES.search(path.replace('\\', '/')):
return False, "Path contains consecutive separators"
return True, "Path is valid"
def _is_windows_path_invalid(self, path: str) -> bool:
"""Check for Windows-specific path issues"""
if path.startswith('\\\\'):
# UNC path validation
return len(path) < 3 or '\\' not in path[2:]
elif ':' in path:
return not self._WINDOWS_DRIVE_PATTERN.match(path)
return False
def _validate_bracket_matching(self, path: str) -> Optional[str]:
"""Validate proper bracket matching in glob patterns"""
bracket_pairs = {'[': ']', '{': '}', '(': ')'}
stack = []
for position, char in enumerate(path):
if char in bracket_pairs:
stack.append((char, position))
elif char in bracket_pairs.values():
if not stack:
return f"Unmatched closing bracket '{char}' at position {position}"
opening_char, opening_pos = stack.pop()
expected_closing = bracket_pairs[opening_char]
if char != expected_closing:
return f"Bracket mismatch: '{opening_char}' at {opening_pos} with '{char}' at {position}"
if stack:
char, pos = stack[0]
return f"Unclosed bracket '{char}' at position {pos}"
return None
def _validate_glob_patterns(self, path: str) -> Optional[str]:
"""Validate glob pattern sanity"""
# Check for excessive recursive patterns
if path.count('**') > 3:
return "Too many recursive directory patterns (**)"
# Check for invalid character class patterns
if '[]' in path or '[!' in path and ']' not in path.split('[!', 1)[1]:
return "Invalid character class pattern"
return None
def validate_multiple_paths(self, paths: List[str]) -> List[Tuple[str, bool, str]]:
"""
Batch validate multiple paths
Args:
paths: List of path strings to validate
Returns:
List of validation results (path, is_valid, message)
"""
return [(path, *self.validate_glob_path(path)) for path in paths]
# Utility functions
def is_valid_glob_path(path: str, **kwargs) -> bool:
"""Quick validation check for glob paths"""
validator = GlobPathValidator(**kwargs)
return validator.validate_glob_path(path)[0]
def validate_glob_path_details(path: str, **kwargs) -> dict:
"""Get detailed validation information for a glob path"""
validator = GlobPathValidator(**kwargs)
is_valid, message = validator.validate_glob_path(path)
return {
'path': path,
'is_valid': is_valid,
'message': message,
'length': len(path),
'has_wildcards': any(char in path for char in '*?[{'),
'is_recursive': '**' in path,
'character_count': len(path),
'contains_patterns': any(pattern in path for pattern in ['*', '?', '[', ']', '{', '}'])
}
# Test functions
def run_validation_tests():
"""Execute comprehensive validation tests"""
validator = GlobPathValidator()
test_cases = [
# (path, expected_result, description)
("*.txt", True, "Basic wildcard"),
("**/*.py", True, "Recursive wildcard"),
("data/[0-9].json", True, "Character range"),
("file{1,2}.txt", True, "Brace expansion"),
("path/to/file", True, "Normal path"),
("", False, "Empty path"),
("file*.txt", True, "Asterisk wildcard"),
("file?.txt", True, "Question mark wildcard"),
("file**txt", False, "Invalid consecutive asterisks"),
("file<>.txt", False, "Invalid characters"),
("path//to/file", False, "Consecutive separators"),
("path/[open/file", False, "Unclosed bracket"),
("path/]file", False, "Unmatched closing bracket"),
("a" * 5000, False, "Excessive length"),
("C:/Windows/*.exe", True, "Windows path style"),
("/usr/lib/**/*.so", True, "Unix path style"),
("src/**/*.py", True, "Complex recursive pattern"),
("data/*.json", True, "Simple wildcard pattern"),
]
print("Glob Path Validator Test Results:")
print("=" * 65)
all_passed = True
passed_count = 0
for test_path, expected, description in test_cases:
is_valid, error_msg = validator.validate_glob_path(test_path)
test_passed = is_valid == expected
status = "PASS" if test_passed else "FAIL"
marker = "✓" if test_passed else "✗"
if test_passed:
passed_count += 1
else:
all_passed = False
print(f"{marker} {status:4} {description:25} | '{_truncate_text(test_path, 25)}'")
if not test_passed:
print(f"
Expected: {expected}, Got: {is_valid}")
if error_msg:
print(f"
Error: {error_msg}")
print("=" * 65)
total_tests = len(test_cases)
print(f"Results: {passed_count}/{total_tests} tests passed")
print(f"Status: {'ALL TESTS PASSED' if all_passed else 'SOME TESTS FAILED'}")
def _truncate_text(text: str, max_length: int) -> str:
"""Helper function to truncate text for display"""
if len(text) <= max_length:
return text
return text[:max_length-3] + '...'
def performance_benchmark():
"""Performance benchmark tests"""
validator = GlobPathValidator()
# Test paths for performance measurement
test_paths = [
"*.txt", "**/*.py", "data/[0-9].json", "file{1,2}.txt",
"src/**/*.py", "docs/*.md", "test/**/test_*.py"
] * 500
# Repeat for larger test set
print("\nPerformance Benchmark:")
print("-" * 40)
# Warm up cache
for path in test_paths[:100]:
validator.validate_glob_path(path)
# Actual performance test
start_time = time.perf_counter()
for path in test_paths:
validator.validate_glob_path(path)
end_time = time.perf_counter()
total_paths = len(test_paths)
total_time = end_time - start_time
avg_time = (total_time * 1000) / total_paths
print(f"Validated {total_paths:,} paths in {total_time:.3f} seconds")
print(f"Average time per path: {avg_time:.6f} ms")
print(f"Paths per second: {total_paths / total_time:,.0f}")
# Example usage demonstration
def demonstrate_usage():
"""Show example usage of the validator"""
print("\nUsage Examples:")
print("-" * 40)
examples = [
"src/**/*.py",
"data/*.json",
"invalid/path//file",
"file<>.txt",
"docs/[a-z].md",
"logs/**/*.log"
]
validator = GlobPathValidator()
for example_path in examples:
is_valid, message = validator.validate_glob_path(example_path)
status = "VALID" if is_valid else "INVALID"
print(f"Path: '{example_path}'")
print(f"Status: {status}")
if not is_valid:
print(f"Reason: {message}")
print()
if __name__ == "__main__":
# Run comprehensive tests
run_validation_tests()
# Performance benchmarking
performance_benchmark()
# Usage demonstration
demonstrate_usage()
Share
Improve this answer
Follow
answered Sep 14 at 5:10
Marc StevenMarc Steven
56055 silver badges1717 bronze badges
Comments
Add a comment
Your Answer
Thanks for contributing an answer to Stack Overflow!Please be sure to answer the question. Provide details and share your research!But avoid …Asking for help, clarification, or responding to other answers.Making statements based on opinion; back them up with references or personal experience.To learn more, see our tips on writing great answers.
Draft saved
Draft discarded
Sign up or log in
Sign up using Google
Sign up using Email and Password
Submit
Post as a guest
Name
Email
Required, but never shown
Post as a guest
Name
Email
Required, but never shown
Post Your Answer
Discard
By clicking “Post Your Answer”, you agree to our terms of service and acknowledge you have read our privacy policy.
Start asking to get answers
Find the answer to your question by asking.
Ask question
Explore related questions
pythonvalidationpathglob
See similar questions with these tags.
The Overflow Blog
Stack Overflow is helping you learn to code with new resources
Off with your CMS’s head! Composability and security in headless CMS
Featured on Meta
Spevacus has joined us as a Community Manager
Introducing a new proactive anti-spam measure
New comment UI experiment graduation
New and improved coding challenges
Policy: Generative AI (e.g., ChatGPT) is banned
Related
2571
Validate decimal numbers in JavaScript - IsNumeric()
1781
How do I get the filename without the extension from a path in Python?
1385
Extract file name from path, no matter what the os/path format
1076
How to get an absolute file path in Python
1864
How can I import a module dynamically given the full path?
1060
How to validate phone numbers using regex
1093
How to get full path of a file?
673
Find full path of the Python interpreter (Python executable)?
Hot Network Questions
How to end mob silencing? Targeted Canceling? Negative Votes require Feedback suggestion
Application of DCT and an interesting integral.
What species of plum is this? (France, mid-September)
Why does temperature increase mass?
How does energy abundance affect materials science?
Unable to Access CPU Model Name in Debian VMWare
How to block an entire page with uBlock Origin?
How to scale down a TikZ/PGFPlots figure with matching font size and good PNG quality
How to typeset the complete structure of deeply nested formulas?
Can I use Heroic Inspiration on a natural 1 on an Attack roll?
post hoc tests after running repeated measures ANOVA
PCIe to SGMII/RGMII for Automotive Ethernet card
Implementation of a kd-tree header-only library
"Saying who or what did the action would be clearer": passive voice vs. active voice in a technical document/checklist?
Does every ultrafilter on real numbers contain a meager set?
How to directly reboot into the EFI GUI via an EFI shell?
What was so bad about what Kimmel said about Charlie Kirk?
Analyzing test result using test statistic vs p-value?
How does boss dialogue change if fought at max level?
Two definitions of regularity for ultrafilters
New larger artificial satellite created from natural gravity and existing space debris
Ever in an affirmative context?
Submitted the same research article in two journals, now I'm scared
Why hasn’t LIGO detected more kilonova events after GW170817?
more hot questions
Question feed
Subscribe to RSS
Question feed
To subscribe to this RSS feed, copy and paste this URL into your RSS reader.
lang-py
Stack Overflow
Questions
Help
Chat
Products
Teams
Advertising
Talent
Company
About
Press
Work Here
Legal
Privacy Policy
Terms of Service
Contact Us
Your Privacy Choices
Cookie Policy
Stack Exchange Network
Technology
Culture & recreation
Life & arts
Science
Professional
Business
API
Data
Blog
Facebook
Twitter
LinkedIn
Instagram
Site design / logo © 2025 Stack Exchange Inc;
user contributions licensed under
CC BY-SA
.
rev 2025.9.19.34211