c# - Why does the NetworkStream.ReadAsync call end the loop - Stack Overflow
Skip to main content
Stack Overflow
About
Products
For Teams
Stack Overflow for Teams
Where developers & technologists share private knowledge with coworkers
Advertising
Reach devs & technologists worldwide about your product, service or employer brand
Knowledge Solutions
Data licensing offering for businesses to build and improve AI tools and models
Labs
The future of collective knowledge sharing
About the company
Visit the blog
Loading…
current community
Stack Overflow
help
chat
Meta Stack Overflow
your communities
Sign up or log in to customize your list.
more stack exchange communities
company blog
Log in
Sign up
Home
Questions
AI Assist
Labs
Tags
Challenges
Chat
Articles
Users
Jobs
Companies
Collectives
Communities for your favorite technologies.
Explore all Collectives
Teams
Ask questions, find answers and collaborate at work with Stack Overflow for Teams.
Try Teams for free
Explore Teams
Teams
Ask questions, find answers and collaborate at work with Stack Overflow for Teams.
Explore Teams
Collectives™ on Stack Overflow
Find centralized, trusted content and collaborate around the technologies you use most.
Learn more about Collectives
Teams
Q&A for work
Connect and share knowledge within a single location that is structured and easy to search.
Learn more about Teams
Why does the NetworkStream.ReadAsync call end the loop
Ask Question
Asked
3 days ago
Modified
3 days ago
Viewed
66 times
1
I have a Task that should continuously read from a Tcp stream and place the data into a ConcurrentQueue for processing. Stepping through the function I notice that the ReadAsync Call does not return.
For reference there is no data currently going across the network but I would still like to attempt to read from the stream so long as the loop is active.
Receive Loop
If I step through this loop, I make it to the _stream.ReadAsync line and then the application window pops up skipping the rest of the loop.
private async Task ReceiveLoop()
{
byte[] buffer = new byte[1024];
while (_isConnected)
{
if(_stream != null && _stream.CanRead)
{
try
{
int bytesRead = await _stream.ReadAsync(buffer, 0, buffer.Length);
if (bytesRead > 0)
{
byte[] receivedData = new byte[bytesRead];
Buffer.BlockCopy(buffer, 0, receivedData, 0, bytesRead);
if(_receiveQueue != null)
{
_receiveQueue.Enqueue(receivedData);
}
}
}
catch (ObjectDisposedException ex)
{
// Log[Error] - ex
_isConnected = false;
}
catch(InvalidOperationException ex)
{
//Log[Warning] - ex
}
}
// Console.WriteLine("ReceiveLoop is alive");
}
}
c#tcptasktcpclientnetworkstream
Share
Improve this question
Follow
edited Sep 17 at 17:57
gwiz_kidgwiz_kid
asked Sep 17 at 17:47
gwiz_kidgwiz_kid
12377 bronze badges
3
What is calling this code? Sounds like something is not awaited somewhere. Side notes: _stream != null is always true. You should break out of the loop with if (bytesRead == 0) break; which will only happen if the socket is closed. Instead of _isConnected just break; out of the loop or throw.
Charlieface
–
Charlieface
2025-09-17 20:46:58 +00:00
Commented
Sep 17 at 20:46
The answer depends on how you're calling ReceiveLoop(). It's implied it's a console app, and you're simply "falling through" to the end. There is no "standard wait state" for a console app; and since you did not mention yours ... (Try it from a Windows form or other "window" which has a built-in "loop")
Gerry Schmitz
–
Gerry Schmitz
2025-09-17 20:48:21 +00:00
Commented
Sep 17 at 20:48
1
Side note; this is not a great way of handling network buffering. If it is low throughout, it'll work, sure, but: it'll struggle beyond fairly basic scenarios. Also, keep in mind that TCP is a streaming protocol, not a message protocol - your receive queue needs to be considered as a whole.
Marc Gravell
–
Marc Gravell
2025-09-17 22:44:37 +00:00
Commented
Sep 17 at 22:44
Add a comment
|
1 Answer
1
Sorted by:
Reset to default
Highest score (default)
Trending (recent votes count more)
Date modified (newest first)
Date created (oldest first)
3
I notice that the ReadAsync Call does not return.
That is normal and expected. ReadAsync has four expected outcomes:
either immediately or after some time (synchronous for Read, asynchronous for ReadAsync) reads some positive amount of data
it returns a non-positive result to indicate an EOF condition
it results in an exception for a non-graceful failure
in a niche zero-length read case (provided a zero-length buffer to populate), it returns zero to indicate that data is now available to be read, or an EOF - perform another read with a non-empty buffer to find out which (this scenario is somewhat OS-dependent)
If no data is available, the stream hasn't terminated, and nothing has exploded: we expect ReadAsync to simply not return (or rather: to return an incomplete awaitable).
Share
Improve this answer
Follow
edited Sep 17 at 22:48
answered Sep 17 at 22:39
Marc GravellMarc Gravell
1.1m273273 gold badges2.6k2.6k silver badges3k3k bronze badges
Comments
Add a comment
Your Answer
Thanks for contributing an answer to Stack Overflow!Please be sure to answer the question. Provide details and share your research!But avoid …Asking for help, clarification, or responding to other answers.Making statements based on opinion; back them up with references or personal experience.To learn more, see our tips on writing great answers.
Draft saved
Draft discarded
Sign up or log in
Sign up using Google
Sign up using Email and Password
Submit
Post as a guest
Name
Email
Required, but never shown
Post as a guest
Name
Email
Required, but never shown
Post Your Answer
Discard
By clicking “Post Your Answer”, you agree to our terms of service and acknowledge you have read our privacy policy.
Start asking to get answers
Find the answer to your question by asking.
Ask question
Explore related questions
c#tcptasktcpclientnetworkstream
See similar questions with these tags.
The Overflow Blog
Stack Overflow is helping you learn to code with new resources
Off with your CMS’s head! Composability and security in headless CMS
Featured on Meta
Spevacus has joined us as a Community Manager
Introducing a new proactive anti-spam measure
New comment UI experiment graduation
New and improved coding challenges
Policy: Generative AI (e.g., ChatGPT) is banned
Related
7590
What is the difference between String and string in C#?
1808
What does the [Flags] Enum Attribute mean in C#?
2922
What are the correct version numbers for C#?
1348
How do you get the index of the current iteration of a foreach loop?
1357
Call one constructor from another
1738
Why not inherit from List<T>?
1509
Virtual member call in a constructor
2436
Should 'using' directives be inside or outside the namespace in C#?
992
What does "connection reset by peer" mean?
Hot Network Questions
What species of plum is this? (France, mid-September)
Can I make CC-BY-NC-ND documents searchable?
How should we understand **God is Just** in relation to him killing Davids child due to his sins?
Infinite hyperbolic group contains infinite order elements
Analyzing test result using test statistic vs p-value?
What happens when a creature with the See Invisibility spell is blinded?
Why it takes so long to referee a paper in some journals?
What is this circuit box for
How to remove BitLocker encryption for a volume that does not have a drive-letter
Number of prime factors modulo residue classes
Unable to Access CPU Model Name in Debian VMWare
Is there a substance that passes through gasses, but reacts violently (explosive) when confronted with solid matter?
Trying to understand the fundamental behavior of parallel connections
Two definitions of regularity for ultrafilters
What does ripe fig falling into the eater's mouth in Nahum 3:12 signify?
What would be the impact of a being that is so hot it melts metal from 1km away. How far away would be habitable? (On Earth btw)
Differences, distributions, and definitions
Is "allowed" a past participle or an adjective?
Tooth cavities in 4 year old kid
How to completely disable Google Chrome page translate function?
What does, "as having nothing" mean in 2 Corinthians 6:10?
A logic grid puzzle that is tougher than it looks.
How to end mob silencing? Targeted Canceling? Negative Votes require Feedback suggestion
Swapping honey for sugar in whole wheat bread recipe
more hot questions
Question feed
Subscribe to RSS
Question feed
To subscribe to this RSS feed, copy and paste this URL into your RSS reader.
lang-cs
Stack Overflow
Questions
Help
Chat
Products
Teams
Advertising
Talent
Company
About
Press
Work Here
Legal
Privacy Policy
Terms of Service
Contact Us
Your Privacy Choices
Cookie Policy
Stack Exchange Network
Technology
Culture & recreation
Life & arts
Science
Professional
Business
API
Data
Blog
Facebook
Twitter
LinkedIn
Instagram
Site design / logo © 2025 Stack Exchange Inc;
user contributions licensed under
CC BY-SA
.
rev 2025.9.19.34211