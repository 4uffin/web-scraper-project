python - Why is my Button's command executed immediately when I create the Button, and not when I click it? - Stack Overflow
Skip to main content
Stack Overflow
About
Products
For Teams
Stack Overflow for Teams
Where developers & technologists share private knowledge with coworkers
Advertising
Reach devs & technologists worldwide about your product, service or employer brand
Knowledge Solutions
Data licensing offering for businesses to build and improve AI tools and models
Labs
The future of collective knowledge sharing
About the company
Visit the blog
Loading…
current community
Stack Overflow
help
chat
Meta Stack Overflow
your communities
Sign up or log in to customize your list.
more stack exchange communities
company blog
Log in
Sign up
Home
Questions
AI Assist
Labs
Tags
Challenges
Chat
Articles
Users
Jobs
Companies
Collectives
Communities for your favorite technologies.
Explore all Collectives
Teams
Ask questions, find answers and collaborate at work with Stack Overflow for Teams.
Try Teams for free
Explore Teams
Teams
Ask questions, find answers and collaborate at work with Stack Overflow for Teams.
Explore Teams
Collectives™ on Stack Overflow
Find centralized, trusted content and collaborate around the technologies you use most.
Learn more about Collectives
Teams
Q&A for work
Connect and share knowledge within a single location that is structured and easy to search.
Learn more about Teams
Why is my Button's command executed immediately when I create the Button, and not when I click it? [duplicate]
Ask Question
Asked
14 years, 5 months ago
Modified
1 year, 3 months ago
Viewed
44k times
108
This question already has answers here:
How to pass arguments to a Button command in Tkinter?
(14 answers)
How can I bind arguments to a function in Python?
(7 answers)
How does using a function (callback) as an argument to another function work in Python?
(11 answers)
Closed 2 years ago.
My code is:
from Tkinter import *
admin = Tk()
def button(an):
print(an)
print('het')
b = Button(admin, text='as', command=button('hey'))
b.pack()
mainloop()
The button doesn't work, it prints 'hey' and 'het' once without my command, and then, when I press the button nothing happens.
pythontkintercallback
Share
Improve this question
Follow
edited Oct 13, 2022 at 18:35
Karl Knechtel
61.2k1414 gold badges131131 silver badges192192 bronze badges
asked Apr 23, 2011 at 21:59
salksalk
1,09922 gold badges88 silver badges44 bronze badges
1
12
@Mike-SMT That's exactly why. I want to reward people for posting good answers to common questions - especially if the questions are easy. Many people post half-baked, unmotivated answers to easy questions. I want people to realize that you don't have to be a programming expert to write outstanding answers.
Aran-Fey
–
Aran-Fey
2018-10-27 07:20:53 +00:00
Commented
Oct 27, 2018 at 7:20
Add a comment
|
5 Answers
5
Sorted by:
Reset to default
Highest score (default)
Trending (recent votes count more)
Date modified (newest first)
Date created (oldest first)
126
+300
Consider this code:
b = Button(admin, text='as', command=button('hey'))
It does exactly the same as this:
result = button('hey')
b = button(admin, text='as', command=result)
Likewise, if you create a binding like this:
listbox.bind("<<ListboxSelect>>", some_function())
... it's the same as this:
result = some_function()
listbox.bind("<<ListboxSelect>>", result)
The command option takes a reference to a function, which is a fancy way of saying you need to pass it the name of the function.
To pass a reference you must use the name only, without using parenthesis or arguments. For example:
b = Button(... command = button)
If you want to pass a parameter such as "hey" you must use a little extra code:
You can create an intermediate function that can be called without your argument and which then calls your button function,
You can use lambda to create what is referred to as an anonymous function. In every way it's a function except it doesn't have a name. When you call the lambda command it returns a reference to the created function, which means it can be used for the value of the command option to the button.
You can use functools.partial
For me, lambda is the simplest since it doesn't require any additional imports like functools.partial does, though some people think that functools.partial is easier to understand.
To create a lambda function that calls your button function with an argument you would do something like this:
lambda: button('hey')
You end up with a function that is functionally equivalent to:
def some_name():
return button('hey')
As I said earlier, lambda returns a reference to this nameless function. Since a reference is what the command option expects you can use lambda directly in the creation of the button:
b = Button(... command = lambda: button('hey'))
There's a question on this site that has a lot of interesting comments about lambda, in general. See the question Why Python lambdas are useful?. That same discussion has an answer that shows how to use lambdas in a loop when you need to pass in a variable to the callback.
Finally, see the zone.effbot.org article titled Tkinter Callbacks for a nice tutorial. The coverage of lambda is pretty lean, but the information there might still be useful.
Share
Improve this answer
Follow
edited Dec 19, 2021 at 9:07
martineau
124k2929 gold badges180180 silver badges317317 bronze badges
answered Apr 24, 2011 at 16:35
Bryan OakleyBryan Oakley
388k5353 gold badges580580 silver badges738738 bronze badges
Comments
Add a comment
16
You need to create a function without parameters that you can use as the command:
b = Button(admin, text='as', command=lambda: button('hey'))
See the "Passing Argument to Callbacks" section of this document.
Share
Improve this answer
Follow
edited Dec 19, 2021 at 9:29
martineau
124k2929 gold badges180180 silver badges317317 bronze badges
answered Apr 23, 2011 at 22:04
Lukáš LalinskýLukáš Lalinský
41.4k66 gold badges109109 silver badges128128 bronze badges
Comments
Add a comment
15
Example GUI:
Let's say I have the GUI:
import tkinter as tk
root = tk.Tk()
btn = tk.Button(root, text="Press")
btn.pack()
root.mainloop()
What Happens When a Button Is Pressed
See that when btn is pressed it calls its own function which is very similar to button_press_handle in the following example:
def button_press_handle(callback=None):
if callback:
callback() # Where exactly the method assigned to btn['command'] is being callled
with:
button_press_handle(btn['command'])
You can simply think that command option should be set as, the reference to the method we want to be called, similar to callback in button_press_handle.
Calling a Method (a Callback) When the Button is Pressed
Without arguments
So if I wanted to print something when the button is pressed I would need to set:
btn['command'] = print # default to print is new line
Pay close attention to the lack of () with the print method which is omitted in the meaning that: "This is the method's name which I want you to call when pressed but don't call it just this very instant." However, I didn't pass any arguments for the print so it printed whatever it prints when called without arguments.
With Argument(s)
Now If I wanted to also pass arguments to the method I want to be called when the button is pressed I could make use of the anonymous functions, which can be created with lambda statement, in this case for print built-in method, like the following:
btn['command'] = lambda arg1="Hello", arg2=" ", arg3="World!" : print(arg1 + arg2 + arg3)
Calling Multiple Methods when the Button Is Pressed
Without Arguments
You can also achieve that using lambda statement but it is considered bad practice and thus I won't include it here. The good practice is to define a separate method, multiple_methods, that calls the methods wanted and then set it as the callback to the button press:
def multiple_methods():
print("Vicariously") # the first inner callback
print("I") # another inner callback
With Argument(s)
In order to pass argument(s) to method that calls other methods, again make use of lambda statement, but first:
def multiple_methods(*args, **kwargs):
print(args[0]) # the first inner callback
print(kwargs['opt1']) # another inner callback
and then set:
btn['command'] = lambda arg="live", kw="as the" : a_new_method(arg, opt1=kw)
Returning Object(s) From the Callback
Also further note that callback can't really return because it's only called inside button_press_handle with callback() as opposed to return callback(). It does return but not anywhere outside that function. Thus you should rather modify object(s) that are accessible in the current scope.
Complete Example with global Object Modification(s)
Below example will call a method that changes btn's text each time the button is pressed:
import tkinter as tk
i = 0
def text_mod():
global i, btn
# btn can be omitted but not sure if should be
txt = ("Vicariously", "I", "live", "as", "the", "whole", "world", "dies")
btn['text'] = txt[i]
# the global object that is modified
i = (i + 1) % len(txt)
# another global object that gets modified
root = tk.Tk()
btn = tk.Button(root, text="My Button")
btn['command'] = text_mod
btn.pack(fill='both', expand=True)
root.mainloop()
Mirror
Share
Improve this answer
Follow
edited Dec 19, 2021 at 9:34
martineau
124k2929 gold badges180180 silver badges317317 bronze badges
answered Dec 26, 2017 at 15:18
NaeNae
15.4k88 gold badges6161 silver badges8787 bronze badges
Comments
Add a comment
4
The engine evaluates the result of the function when it is assigning the value at the line "... command = ..."
The "command" expects a function to be returned, that's why using a lambda can do the job because it is creating an anomymous function that is returned to the "command" during evaluation.
You can also code your own function, it will do the job also.
this is an example with lambda and without lambda:
#!/usr/bin/python
# coding=utf-8
from Tkinter import *
# Creation de la fenêtre principale (main window)
Mafenetre = Tk()
res1 = StringVar()
res2 = StringVar()
def isValidInput(obj):
if hasattr(obj, 'get') and callable(getattr(obj, 'get')):
return TRUE
return FALSE
# stupid action 2 (return 12 on purpose to show potential mistake)
def action1(*arguments):
print "action1 running"
for arg in arguments:
if isValidInput(arg):
print "input value: ", arg.get()
res1.set(arg.get())
else:
print "other value:", arg
print "\n"
return 12
# stupid action 2
def action2(*arguments):
print "action2 running"
a = arguments[0]
b = arguments[1]
if isValidInput(a) and isValidInput(b):
c = a.get() + b.get()
res2.set(c)
print c
print "\n"
# a stupid workflow manager ordered by name
def start_tasks(*arguments, **keywords):
keys = sorted(keywords.keys())
for kw in keys:
print kw, "plugged "
keywords[kw](*arguments)
# valid callback wrapper with lambda
def action1_callback(my_input):
return lambda args=[my_input]: action1(*args)
# valid callback wrapper without lambda
def action1_callback_nolambda(*args, **kw):
def anon():
action1(*args)
return anon
# first input string
input1 = StringVar()
input1.set("delete me...")
f1 = Entry(Mafenetre, textvariable=input1, bg='bisque', fg='maroon')
f1.focus_set()
f1.pack(fill="both", expand="yes", padx="5", pady=5)
# failed callback because the action1 function is evaluated, it will return 12.
# in this case the button won't work at all, because the assignement expect a function
# in order to have the button command to execute something
ba1 = Button(Mafenetre)
ba1['text'] = "show input 1 (ko)"
ba1['command'] = action1(input1)
ba1.pack(fill="both", expand="yes", padx="5", pady=5)
# working button using a wrapper
ba3 = Button(Mafenetre)
ba3['text'] = "show input 1 (ok)"
# without a lambda it is also working if the assignment is a function
#ba1['command'] = action1_callback_nolambda(input1)
ba3['command'] = action1_callback(input1)
ba3.pack(fill="both", expand="yes", padx="5", pady=5)
# display result label
Label1 = Label(Mafenetre, text="Action 1 result:")
Label1.pack(fill="both", expand="yes", padx="5", pady=5)
# display result value
resl1 = Label(Mafenetre, textvariable=res1)
resl1.pack(fill="both", expand="yes", padx="5", pady=5)
# second input string
input2 = StringVar()
f2 = Entry(Mafenetre, textvariable=input2, bg='bisque', fg='maroon')
f2.focus_set()
f2.pack(fill="both", expand="yes", padx="5", pady=5)
# third test without wrapper, but making sure that several arguments are well handled by a lambda function
ba2 = Button(Mafenetre)
ba2['text'] = "execute action 2"
ba2['command'] = lambda args=[input1, input2], action=action2: start_tasks(*args, do=action)
ba2.pack(fill="both", expand="yes", padx="5", pady=5)
# display result label
Label2 = Label(Mafenetre, text="Action 2 result:")
Label2.pack(fill="both", expand="yes", padx="5", pady=5)
# display result value
resl2 = Label(Mafenetre, textvariable=res2)
resl2.pack(fill="both", expand="yes", padx="5", pady=5)
Mafenetre.mainloop()
Share
Improve this answer
Follow
answered Oct 31, 2018 at 23:34
C.VergnaudC.Vergnaud
87566 silver badges1616 bronze badges
Comments
Add a comment
3
I think the best way to solve this problem is to use a lambda function.
from tkinter import *
admin= Tk()
def button(an):
print(an)
print("het")
b = Button(admin, text="as", command=lambda: button("hey"))
b.pack()
mainloop()
If you don't want to use the command keyword, you can use the .bind() method instead:
from tkinter import *
admin= Tk()
def button(an):
print(an)
print("het")
b = Button(admin, text="as")
b.pack()
b.bind("<Button-1>", lambda bb: button("hey"))
mainloop()
Using a mother function (no parameter) which owns the child function (at least 1 parameter) you want to call is stupid.
Just to share with you, this is one of my program:
import tkinter
window = tkinter.Tk()
def plus_them(field_1, field_2, field_3):
field_3.delete(0, 'end')
num1 = 0
num2 = 0
try:
num1 = int(field_1.get())
num2 = int(field_2.get())
except:
print("Exception occurs")
else:
print("Continue")
result = num1 + num2
field_3.insert(tkinter.END, str(result))
return result
def minus_them(field_1, field_2, field_3):
field_3.delete(0, 'end')
num1 = 0
num2 = 0
try:
num1 = int(field_1.get())
num2 = int(field_2.get())
except:
print("Exception occurs")
else:
print("Continue")
result = num1 - num2
field_3.insert(tkinter.END, str(result))
return result
#Input Panel:
label_1 = tkinter.Label(window, text="First Number:")
label_1.grid(row=0, column=0)
label_2 = tkinter.Label(window, text="Second Number:")
label_2.grid(row=1, column=0)
entry_1 = tkinter.Entry(window)
entry_1.grid(row=0, column=1)
entry_2 = tkinter.Entry(window)
entry_2.grid(row=1, column=1)
#Button Panel:
button_1 = tkinter.Button(window, text="Plus")
button_1.grid(row=2, column=0)
button_2 = tkinter.Button(window, text="Minus")
button_2.grid(row=2, column=1)
#Answer Panel:
label_3 = tkinter.Label(window, text="The Answer:")
label_3.grid(row=3, column=0)
entry_3 = tkinter.Entry(window)
entry_3.grid(row=3, column=1)
#Event Handling:
button_1.bind("<Button-1>", lambda p: plus_them(entry_1, entry_2, entry_3))
button_2.bind("<Button-1>", lambda m: minus_them(entry_1, entry_2, entry_3))
#Window Stuff:
window.title("Plus and Minus Calculator")
window.mainloop()
That's it.
Share
Improve this answer
Follow
answered Aug 28, 2020 at 17:26
Deer LawsonDeer Lawson
5166 bronze badges
Comments
Add a comment
Start asking to get answers
Find the answer to your question by asking.
Ask question
Explore related questions
pythontkintercallback
See similar questions with these tags.
The Overflow Blog
Stack Overflow is helping you learn to code with new resources
Off with your CMS’s head! Composability and security in headless CMS
Featured on Meta
Spevacus has joined us as a Community Manager
Introducing a new proactive anti-spam measure
New comment UI experiment graduation
New and improved coding challenges
Policy: Generative AI (e.g., ChatGPT) is banned
Linked
281
How to pass arguments to a Button command in Tkinter?
143
How does using a function (callback) as an argument to another function work in Python?
91
How can I bind arguments to a function in Python?
30
Tkinter button command activates upon running program?
16
Why is Button parameter "command" executed when declared?
5
tkinter button command runs function without clicking?
5
Display Path of a file in Tkinter using "browse" Button - Python
4
Python tkinter find which button is clicked
4
Tkinter Button command getting executed before clicking the button
2
Tkinter command for button not working
See more linked questions
Related
1884
Relative imports for the billionth time
1482
Running shell command and capturing the output
1516
UnicodeEncodeError: 'ascii' codec can't encode character u'\xa0' in position 20: ordinal not in range(128)
765
What can I do about "ImportError: Cannot import name X" or "AttributeError: ... (most likely due to a circular import)"?
281
How to pass arguments to a Button command in Tkinter?
565
What happens when using mutual or circular (cyclic) imports?
725
How can I import a module dynamically given its name as string?
511
How can I clear the interpreter console?
Hot Network Questions
Can I make CC-BY-NC-ND documents searchable?
Can I use Heroic Inspiration on a natural 1 on an Attack roll?
Is "allowed" a past participle or an adjective?
Historical Survey: What elements in D&D can affect a character's level outside of leveling up?
What species of plum is this? (France, mid-September)
Update docker service volume
A logic grid puzzle that is tougher than it looks.
Trying to understand the fundamental behavior of parallel connections
Can we reach a stage where there are 105 piles with 1 tile in each pile?
How did "hospital" lose its first syllable in some languages?
A man you don't meet every day
When was God featured in The Simpsons?
How to remove BitLocker encryption for a volume that does not have a drive-letter
Is the carry-on maximum weight limit applied at check-in or at boarding?
What would be the impact of a being that is so hot it melts metal from 1km away. How far away would be habitable? (On Earth btw)
Scifi story set in a spaceship around a weird star
I have so many results I don't know how to write the results in my research paper
Maximum distance with 100 motorbikes carrying limited fuel and consuming 1L/km - Interview
git says Bad key types '+ssh-rsa,ssh-dss' when trying to do git fetch on my MacBook. How do I fix?
Interpretation of slope coefficient when a variable appears in multiple powers
What is the probe like structure next to the static port on this cessna 172?
Does modern physics hold "force" to be a syntactic construct, not a "thing"?
Maximizing profit given a PMF
New larger artificial satellite created from natural gravity and existing space debris
more hot questions
lang-py
Stack Overflow
Questions
Help
Chat
Products
Teams
Advertising
Talent
Company
About
Press
Work Here
Legal
Privacy Policy
Terms of Service
Contact Us
Your Privacy Choices
Cookie Policy
Stack Exchange Network
Technology
Culture & recreation
Life & arts
Science
Professional
Business
API
Data
Blog
Facebook
Twitter
LinkedIn
Instagram
Site design / logo © 2025 Stack Exchange Inc;
user contributions licensed under
CC BY-SA
.
rev 2025.9.19.34211