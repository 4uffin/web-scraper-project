Using my own NTP server for precise time synchronization
Menu
Sign in now
Close
News
PC Hardware
Submenu
CPU
GPU
Storage
Monitors
Keyboards & Mice
Software
Submenu
Productivity
Other Software
Operating Systems
Submenu
Windows
Linux
macOS
Devices
Submenu
Single-Board Computers
Laptops
Gaming Handheld
Prebuilt PC
Home
Submenu
Networking
Smart Home
Gaming
Submenu
Game Reviews
Sign in
Newsletter
Menu
Follow
Followed
Like
Threads
More Action
Summary
Generate a summary of this story
Sign in now
Switch 2
RTX 5060
Windows 11
Gaming
Forums
Close
I set up my own NTP server to keep all of my devices totally synchronized
By
Rich Edmonds
Published 3 hours ago
Richard is the PC Hardware Lead at XDA and has been covering the technology industry for almost two decades. He's been building PCs since young, and when not creating content, you can often find him inside a chassis somewhere.
Sign in to your XDA account
Summary
Generate a summary of this story
follow
Follow
followed
Followed
Like
Like
Thread
Log in
Here is a fact-based summary of the story contents:
Try something different:
Show me the facts
Explain it like I’m 5
Give me a lighthearted recap
The Network Time Protocol (NTP) is an internet-based protocol that synchronizes the clocks of all devices to Coordinated Universal Time (UTC) through the use of a public-facing time server. By using a public NTP server with an atomic clock as a reference, devices can synchronize for accurate and consistent time across a wide range of hardware. It's essentially how all our devices are able to accurately tell the time. But what if you wanted to ensure all your devices use the same upstream server and are fully synchronized on the LAN? Some choose to self-host their own NTP server, which is where the concept comes into play.
Why self-host your own NTP?
Control, accuracy, and reliability
If these public servers are perfectly servicable for keeping the clocks synchronized on all your connected devices, why would you want to both self-host an NTP server? Like other things that can be self-hosted, it usually boils down to control, customization, reliability, and security. For a self-hosted NTP server, this can expand to cover accuracy and precision, which can be handy for running various devices within a home lab, and can even utilize hardware such as a GPS receiver. It also provides more choice for synchronizing all your internal network hardware with trusted upstream NTP servers, which could then be incredibly accurate through the use of atomic reference clocks. Like DNS, you're also not dependent on third-party NTP services and have the option to switch when required. By using your own NTP server, you can configure the upstream NTP source once, and all devices on your network will synchronize with it, ensuring consistency across your infrastructure. Even high-end desktop PCs experience clock drift over time, and this drift varies between devices. This can lead to synchronization issues if not managed properly. This can be especially problematic if you require specific hardware to be fully synchronized. Using a single point, such as an Ubuntu Server VM or even an OPNsense firewall, can ensure all your downstream clients are on the same time, literally.
How to set up your own NTP server
It's easier than you think
So, you've decided to create and launch your own NTP server. Thankfully, there are a few easy ways to go about this, depending on what you plan to use for running the protocol. It could be anything from an old laptop to a single-board computer (SBC). Just know that it needs to be online all the time to ensure all your network hardware is synchronized correctly. I'll be showcasing a few ways, including an Ubuntu Server VM and OPNsense.
Create a Ubuntu VM on Proxmox
This route is recommended for isolation and scalability through using Proxmox's sandboxing nature. It's a fantastic way to keep the NTP separate from your network and the underlying host, but this does mean the VM needs to run 24/7, and you will lose the NTP should the Proxmox server go offline. It's a great way to learn the ropes about NTP and getting one up and running.
Log in to Proxmox.
Create a Ubuntu Server VM (2 vCPU cores and 1GB RAM).
Boot up the VM and install Ubuntu Server.
Install OS updates: sudo apt update && sudo apt upgrade -y
Credit:
Assign the VM a reserved IP through DHCP.
Reboot the Ubuntu Server VM.
Install an NTP server (using chrony): sudo apt install chrony -y
Credit:
Configure chrony. (Replace the public NTP servers with your own or selected ideal public sources. I recommend choosing servers closely located to your network, an example, "pool 0.europe.pool.ntp.org","pool 1.europe.pool.ntp.org", etc.): sudo nano /etc/chrony/chrony.conf
Credit:
Verify chrony is running: sudo systemctl status chrony
Your NTP server should now be up and running! You'll now need to configure all the devices on your network to point to your newly created NTP server instead of routing to their public source of choice.
Use your OPNsense firewall
Don't have an OPNsense-powered firewall? Now may be a great time to build one yourself. The firewall is a great device to load up the NTP server on, since this device will likely always be online, and should it go offline, your entire network is down anyway. It's also fairly straightforward and is even enabled by default, so if you're using OPNsense, your NTP server is already live. You can check it by following these steps:
Log in to your OPNsense web GUI.
Go to Services > Network Time.
Credit:
Click General to see all the time servers, interfaces, and other settings.
Status will show how everything is working.
Credit:
Now you'd need to configure all your devices to use the OPNsense NTP (gateway IP), similarly to how we'd configure them for the Ubuntu Server and Proxmox examples. This has the added benefit of being located on the firewall and so should remain live.
Creating your own NTP server
Self-hosting a local NTP server offers unparalleled control and accuracy for your network. Whether you choose to run it on an Ubuntu VM, OPNsense, or another platform, it can be a rewarding project. By ensuring all devices synchronize to a trusted internal source, you can eliminate reliance on public servers per client, reduce latency, and ensure all hardware clocks are synchronized.
Networking
Network
Follow
Followed
Like
Share
Facebook
X
LinkedIn
Reddit
Flipboard
Copy link
Email
Close
Thread
Sign in to your XDA account
We want to hear from you! Share your opinions in the thread below and remember to keep it respectful.
Be the first to post
Images
Attachment(s)
Please respect our community guidelines. No links, inappropriate language, or spam.
Your comment has not been saved
Send confirmation email
This thread is open for discussion.
Be the first to post your thoughts.
Terms
Privacy
Feedback
Recommended
3 days ago
I'm staying cautious about game-key cards despite Star Wars Outlaws releasing on Nintendo Switch 2
4 days ago
Why relying on USB-to-Ethernet adapters can cost you more in the long run
4 days ago
I built my own video platform like YouTube by self-hosting this tool
4 days ago
Someone tried to host a web server inside Portal 2, and it actually works
Today's best deals
This retro-inspired mechanical keyboard is all vibes and now just $44
1 hour ago
This rare discount makes the AMD Ryzen 7 9800X3D the ultimate CPU for your next gaming PC build
4 hours ago
This legendary triple-A FPS series is currently $10 for six games on Steam
21 hours ago
See More
Trending Now
Windows 10 goes out with a whimper as its final non-security update clears up a few loose ends
Even with the world's highest electricity prices, my high-end PC isn't the energy hog I expected
5 problems you didn't know a CMOS reset could fix
Join Our Team
Our Audience
About Us
Press & Events
Contact Us
Follow Us
Advertising
Careers
Terms
Privacy
Policies
XDA is part of the
Valnet Publishing Group
Copyright © 2025 Valnet Inc.