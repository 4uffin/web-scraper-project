How to implement caching in ASP.NET Core minimal APIs | InfoWorld
Topics
Spotlight: IT CareersVideosNewslettersResources
AboutAbout UsAdvertiseContact UsEditorial Ethics PolicyFoundry CareersNewslettersContribute to InfoWorldReprintsPoliciesTerms of ServicePrivacy PolicyCookie PolicyCopyright NoticeMember PreferencesAbout AdChoicesYour California Privacy RightsOur NetworkCIOComputerworldCSONetwork WorldMoreNewsFeaturesBlogsBrandPostsEventsVideosEnterprise Buyer’s Guides
Close
AnalyticsArtificial IntelligenceGenerative AICareersCloud ComputingData ManagementDatabasesEmerging TechnologyTechnology IndustrySecuritySoftware Development Microsoft .NETDevelopment ToolsDevopsOpen SourceProgramming LanguagesJavaJavaScriptPythonIT LeadershipEnterprise Buyer’s Guides
Back
Close
Back
Close
Popular Topics
Artificial IntelligenceCloud ComputingData ManagementSoftware Development
Search
Topics
Spotlight: IT CareersVideosNewslettersResourcesAboutPoliciesOur NetworkMore
Back
Topics
AnalyticsArtificial IntelligenceGenerative AICareersCloud ComputingData ManagementDatabasesEmerging TechnologyTechnology IndustrySecuritySoftware DevelopmentMicrosoft .NETDevelopment ToolsDevopsOpen SourceProgramming LanguagesJavaJavaScriptPythonIT LeadershipEnterprise Buyer’s Guides
Back
AboutAbout UsAdvertiseContact UsEditorial Ethics PolicyFoundry CareersNewslettersContribute to InfoWorldReprints
Back
PoliciesTerms of ServicePrivacy PolicyCookie PolicyCopyright NoticeMember PreferencesAbout AdChoicesYour California Privacy Rights
Back
Our NetworkCIOComputerworldCSONetwork World
Back
MoreNewsFeaturesBlogsBrandPostsEventsVideosEnterprise Buyer’s Guides
Home
Blogs
.NET Programming
How to implement caching in ASP.NET Core minimal APIs
by									Joydip Kanjilal
Contributor
How to implement caching in ASP.NET Core minimal APIs
how-to
Sep 11, 20258 minsC#Development Libraries and FrameworksMicrosoft .NET
Learn how to use in-memory caching, distributed caching, hybrid caching, response caching, or output caching in ASP.NET Core to boost the performance and scalability of your minimal API applications.
Credit: 															Summit Art Creations / Shutterstock
When working with ASP.NET Core applications, there are several ways in which you can enhance your application’s performance. Caching is one of the most widely used and proven strategies that can significantly boost your application’s scalability and performance.
In this post, we’ll examine how we can work with caching in minimal APIs in ASP.NET Core. ASP.NET Core offers the flexibility to cache server responses on the client (response caching) or on the server (output caching). In addition, you can choose to cache the data in the memory of the application server (in-memory caching), or in an external data store such as Redis or SQL Server (distributed caching), or a combination of both (hybrid caching). We’ll examine all of these options here.
To use the code examples provided in this article, you should have Visual Studio 2022 installed in your system. If you don’t already have a copy, you can download Visual Studio 2022 here.
Create an ASP.NET Core Web API project in Visual Studio 2022
To create an ASP.NET Core Web API project in Visual Studio 2022, follow the steps outlined below.
Launch the Visual Studio 2022 IDE.
Click on “Create new project.”
In the “Create new project” window, select “ASP.NET Core Web API” from the list of templates displayed.
Click “Next.”
In the “Configure your new project” window, specify the name and location for the new project. Optionally check the “Place solution and project in the same directory” check box, depending on your preferences.
Click “Next.”
In the “Additional Information” window shown next, select “.NET 9.0 (Standard Term Support)” as the framework version and uncheck the check box that says “Use controllers,” as we’ll be using minimal APIs in this project.
Elsewhere in the “Additional Information” window, leave the “Authentication Type” set to “None” (the default) and make sure the check boxes “Enable Open API Support,” “Configure for HTTPS,” and “Enable Docker” remain unchecked. We won’t be using any of those features here.
Click “Create.”
We’ll use this ASP.NET Core Web API project to work with the code examples given in the sections below.
Caching in ASP.NET Core
ASP.NET Core provides support for several types of caching. In-memory caching uses the memory of a single server to store cached data. Distributed caching shares cached data across a group of servers. Hybrid caching combines the speed of in-memory caching and the durability of distributed caching. Finally, while response caching enables caching of server responses based on HTTP headers, output caching offers more flexibility in caching server responses. We’ll examine each of these caching methods below.
In-memory caching in minimal APIs
ASP.NET Core provides support for two abstractions for working with caching, IMemoryCache and IDistributedCache. While the former is used to implement in-memory caching, the latter is used to implement distributed caching.
The following use of IMemoryCache shows how you can retrieve data from the cache if the requested data is available. If the data requested is not present in the in-memory cache, the application will retrieve the data from the data store (using a repository), store the data in the in-memory cache, and return it.
app.MapGet("authors/getall", (IMemoryCache cache,
IAuthorRepository authorRepository) =>
{
if (!cache.TryGetValue("get-authors",
out List authors))
{
authors = authorRepository.GetAll();
var cacheEntryOptions = new MemoryCacheEntryOptions()
.SetAbsoluteExpiration(TimeSpan.FromMinutes(5))
.SetSlidingExpiration(TimeSpan.FromMinutes(1));
cache.Set("get-authors", authors, cacheEntryOptions);
}
return Results.Ok(authors);
});
As you can see in the preceding code snippet, the cached content will reside in the memory for a maximum of 30 seconds.
Distributed caching in minimal APIs
Distributed caching enhances the performance and scalability of applications by distributing the load across multiple nodes or servers. The servers can be located either in the same network or in different networks that are spread across geographical distances.
The following code demonstrates how to implement distributed caching in a minimal API endpoint in ASP.NET Core. In this example, the endpoint returns all author records from the distributed cache if the data is available in the cache. If the requested data is not available in the distributed cache, the endpoint adds the data to the cache and then returns the data.
app.MapGet("/getallauthors", async (IDistributedCache cache) =>
{
var cacheKey = "get-all-authors";
var cachedMessage = await cache.GetStringAsync(cacheKey);
if (cachedMessage == null)
{
cachedMessage = $"The data has been cached at {DateTime.Now}";
await cache.SetStringAsync(cacheKey, cachedMessage, new DistributedCacheEntryOptions
{
AbsoluteExpirationRelativeToNow = TimeSpan.FromSeconds(60)
});
}
return Results.Ok(cachedMessage);
});
Hybrid caching in minimal APIs
Starting from .NET 9, you can take advantage of hybrid caching in your ASP.NET Core applications. The HybridCache API, as the name suggests, blends the capabilities of both in-memory caching and distributed caching, thereby addressing the shortcomings of each.
The following code snippet shows how you can configure hybrid caching in the Program.cs file of your ASP.NET Core application.
services.AddHybridCache(options => {
options.DefaultEntryOptions = new HybridCacheEntryOptions
{
Expiration = TimeSpan.FromMinutes(5),
LocalCacheExpiration = TimeSpan.FromMinutes(5)
};
});
Response caching in minimal APIs
Response caching uses cache-related HTTP headers to cache server responses. Response caching reduces the number of requests made to the web server, thereby reducing latency and improving application scalability. You can implement response caching in ASP.NET Core in two ways. You can use the[ResponseCache] attribute to enable response caching on the client side, or you can use the Response Caching Middleware to enable response caching on the server.
The line of code below shows how you can add the Response Caching Middleware to the services collection in ASP.NET Core.
builder.Services.AddResponseCaching();
The following line of code shows how you can add the Response Caching Middleware to the request processing pipeline.
app.UseResponseCaching();
Output caching in minimal APIs
With output caching, the output of a request is cached so that all subsequent requests can return data from the cache. Output caching is implemented in ASP.NET Core by calling CacheOutput or by applying the [OutputCache] attribute.
Output caching differs from response caching in several ways. Most importantly, whereas response caching is based on HTTP headers, output caching is configured on the server. This means that you can invalidate cache entries programmatically and that clients can’t override your desired caching behavior.
The following code snippet shows how you can implement output caching for a minimal API endpoint in ASP.NET Core.
app.MapPost("/author/getauthors", ([FromServices] IAuthorRepository authorRepository) =>
{
return authorRepository.GetAll();
}).CacheOutput(x => x.Expire(TimeSpan.FromSeconds(30)));
Note that, while response caching is limited to memory, output caching allows you to configure your cache storage. Hence, whereas you can use response caching only with in-memory caching, you can use output caching with in-memory, distributed, or hybrid caching.
Caching best practices in ASP.NET Core minimal APIs
The following are the key practices you should follow to make the best use of caching in your ASP.NET Core applications:
You should choose the right caching strategy, i.e., use in-memory cache for applications that handle fewer amount of data, distributed cache if the application is resource intensive and needs to scale in a distributed environment.
You should set proper expiration policies per your application’s requirements.
You should not cache sensitive data.
You should use cache invalidation whenever it is appropriate.
You should keep an eye on cache hit/miss ratios to understand how your caching strategy is working in real-time.
Besides using the right caching strategy (i.e., in-memory, distributed, or hybrid), based on your application’s requirements, you should also use an appropriate cache expiration strategy to have better control over cache lifetimes. A cache lifetime denotes the amount of time a cached object would remain in the cache. I’ll discuss this further in another post soon.
Related content
how-to
Reactive Java with Spring WebFlux and Reactor By Matthew Tyson
Sep 24, 2025 9 mins
Java
React
Web Development
news
.NET 10 moves to release candidate stage By Paul Krill
Sep 10, 2025 3 mins
Development Libraries and Frameworks
Microsoft .NET
Software Development
how-to
Chat with data the easy way in R or Python By Sharon Machlis
Sep 4, 2025 13 mins
Generative AI
Python
R Language
Other Sections
Resources
Videos
Spotlight: IT Careers
by
Joydip Kanjilal
Contributor
Follow Joydip Kanjilal on X
Follow Joydip Kanjilal on LinkedIn
Joydip Kanjilal is a Microsoft Most Valuable Professional (MVP) in ASP.NET, as well as a speaker and the author of several books and articles. He received the prestigious MVP award for 2007, 2008, 2009, 2010, 2011, and 2012.
He has more than 20 years of experience in IT, with more than 16 years in Microsoft .Net and related technologies. He has been selected as MSDN Featured Developer of the Fortnight (MSDN) and as Community Credit Winner several times.
He is the author of eight books and more than 500 articles. Many of his articles have been featured at Microsoft’s Official Site on ASP.Net.
He was a speaker at the Spark IT 2010 event and at the Dr. Dobb’s Conference 2014 in Bangalore. He has also worked as a judge for the Jolt Awards at Dr. Dobb's Journal. He is a regular speaker at the SSWUG Virtual Conference, which is held twice each year.
More from this author
how-toHow to upload files using minimal APIs in ASP.NET Core Aug 21, 2025 7 minshow-toHow to use Dapper Plus in .NET Core Jul 25, 2025 8 minshow-toHow to inline methods using MethodImplAttribute in C# Jul 10, 2025 9 minshow-toHow to use route constraints in ASP.NET Core minimal APIs Jun 26, 2025 9 minshow-toHow to use frozen collections in C# Jun 12, 2025 11 minshow-toHow to add user context to request traces in ASP.NET Core May 22, 2025 7 minshow-toHow to use the IServiceProvider interface in ASP.NET Core May 1, 2025 10 minshow-toHow to use guard clauses in C# Apr 3, 2025 8 mins
Show me morePopularArticlesVideos
news
Open source registries signal shift toward paid models as AI strains infrastructure By Gyana SwainSep 24, 20255 mins
Artificial IntelligenceOpen Source
opinion
How immutability tamed the Wild West By Nick HodgesSep 24, 20255 mins
CareersDeveloperSoftware Development
news
GraalVM 25 arrives, backed by JDK 25 By Paul KrillSep 24, 20253 mins
JavaJavaScriptPython
video
Python 3.14's live debugging interface Sep 23, 20254 mins
Python
video
Easier Chrome browser automation with PyDoll Sep 16, 20254 mins
Python
video
How to use Rust workspaces to speed up compile times Sep 9, 20253 mins
Python
Sponsored Links
Empower your cybersecurity team with expert insights from Palo Alto Networks.
Secure AI by Design: Unleash the power of AI and keep applications, usage and data secure.
Solve your most complex IT challenges with solutions that simplify your modernization journey.
About
About Us
Advertise
Contact Us
Editorial Ethics Policy
Foundry Careers
Reprints
Newsletters
BrandPosts
Policies
Terms of Service
Privacy Policy
Cookie Policy
Copyright Notice
Member Preferences
About AdChoices
Your California Privacy Rights
Privacy Settings
Our Network
CIO
Computerworld
CSO
Network World
FacebookXYouTubeGoogle NewsLinkedIn
© 2025
FoundryCo, Inc. All Rights Reserved.