Survey pinpoints Rust compiler pain points | InfoWorld
Topics
Spotlight: IT CareersVideosNewslettersResources
AboutAbout UsAdvertiseContact UsEditorial Ethics PolicyFoundry CareersNewslettersContribute to InfoWorldReprintsPoliciesTerms of ServicePrivacy PolicyCookie PolicyCopyright NoticeMember PreferencesAbout AdChoicesYour California Privacy RightsOur NetworkCIOComputerworldCSONetwork WorldMoreNewsFeaturesBlogsBrandPostsEventsVideosEnterprise Buyer’s Guides
Close
AnalyticsArtificial IntelligenceGenerative AICareersCloud ComputingData ManagementDatabasesEmerging TechnologyTechnology IndustrySecuritySoftware Development Microsoft .NETDevelopment ToolsDevopsOpen SourceProgramming LanguagesJavaJavaScriptPythonIT LeadershipEnterprise Buyer’s Guides
Back
Close
Back
Close
Popular Topics
Artificial IntelligenceCloud ComputingData ManagementSoftware Development
Search
Topics
Spotlight: IT CareersVideosNewslettersResourcesAboutPoliciesOur NetworkMore
Back
Topics
AnalyticsArtificial IntelligenceGenerative AICareersCloud ComputingData ManagementDatabasesEmerging TechnologyTechnology IndustrySecuritySoftware DevelopmentMicrosoft .NETDevelopment ToolsDevopsOpen SourceProgramming LanguagesJavaJavaScriptPythonIT LeadershipEnterprise Buyer’s Guides
Back
AboutAbout UsAdvertiseContact UsEditorial Ethics PolicyFoundry CareersNewslettersContribute to InfoWorldReprints
Back
PoliciesTerms of ServicePrivacy PolicyCookie PolicyCopyright NoticeMember PreferencesAbout AdChoicesYour California Privacy Rights
Back
Our NetworkCIOComputerworldCSONetwork World
Back
MoreNewsFeaturesBlogsBrandPostsEventsVideosEnterprise Buyer’s Guides
Home
Software Development
Survey pinpoints Rust compiler pain points
by									Paul Krill
Editor at Large
Survey pinpoints Rust compiler pain points
news
Sep 15, 20253 minsProgramming LanguagesRustSoftware Development
Although many users are satisfied with Rust build performance, a significant fraction of users report that slow builds and rebuilds in several common workflows are a ‘big problem’ for them.
Credit: 															GagoDesign / Shutterstock
Overall, developers using Rust are satisfied with Rust compilation performance, but slow builds and rebuilds in several common workflows limit the productivity for a significant fraction of Rust users, according to the Rust Compiler Performance Survey, which was conducted the past two months by the Rust compiler performance working group.
Results of the survey, which received more than 3,700 responses, were reported in a September 10 blog post. To gauge overall sentiment, participants were asked to rate their satisfaction with build performance on a scale of zero (worst) to 10 (best). The average rating was six, with most respondents rating their experience with seven out of 10. “While it is great to see some developers being happy with the state we have today, it is clear that many people are not so lucky, and Rust’s build performance limits their productivity,” said Jakub Beranek on behalf of the working group. “Around 45% of respondents who answered that they are no longer using Rust said that at least one of the reasons why they stopped were long compile times.”
The survey found that the Rust build experience “differs wildly across users and workflows” and is not as clear-cut as “Rust builds are slow,” Beranek said. “We actually received many positive comments about users being happy with Rust build performance, and appreciation for it being improved vastly over the past several years to the point where it stopped being a problem.” But some survey respondents said the build performance of Rust was inferior to languages such as Go or Zig.
Challenges developers face with Rust build performance were not always as simple as slow compiler performance, said Beranek. “There are many diverse workflows with competing trade-offs, and optimizing build performance for them might require completely different solutions,” he said. “Some approaches for improving build performance can also be quite unintuitive. For example, stabilizing certain language features could help remove the need for certain build scripts or proc macros, and thus speed up compilation across the Rust ecosystem.”
Other findings of the Rust Compiler Performance Survey:
Waiting too long for an incremental rebuild after making a small source code change was by far the most common complaint in open answers received.
The incremental build of a single Rust compilation crate was too slow.
Several users mentioned that they would like to see Rust perform hot patching.
When Rust developers experience slow builds, it can be challenging to identify where exactly the compilation process is spending time, and what the bottleneck could be.
Beranek said that, while the Rust compiler is getting faster every year, the Rust compiler working group understands that many Rust developers need truly significant improvements to improve their productivity, rather than “just” incremental performance wins. The goal for the future is to stabilize long-standing initiatives that could improve build performance a lot, he said.
Related content
news
Rust 1.90 brings workspace publishing support to Cargo By Paul Krill
Sep 19, 2025 2 mins
Apple
Programming Languages
Rust
analysis
Adding up the hidden costs of generative AI By Josh Fruhlinger
Sep 19, 2025 3 mins
Artificial Intelligence
Generative AI
Technology Industry
news
Wasm 3.0 adds 64-bit backing, language support By Paul Krill
Sep 19, 2025 3 mins
Java
Kotlin
Scala
news
AI Alliance forges agent-native language, knowledge base By Paul Krill
Sep 18, 2025 2 mins
Artificial Intelligence
Generative AI
Programming Languages
Other Sections
Resources
Videos
Spotlight: IT Careers
by
Paul Krill
Editor at Large
Follow Paul Krill on X
Paul Krill is editor at large at InfoWorld. Paul has been covering computer technology as a news and feature reporter for more than 35 years, including 30 years at InfoWorld. He has specialized in coverage of software development tools and technologies since the 1990s, and he continues to lead InfoWorld’s news coverage of software development platforms including Java and .NET and programming languages including JavaScript, TypeScript, PHP, Python, Ruby, Rust, and Go. Long trusted as a reporter who prioritizes accuracy, integrity, and the best interests of readers, Paul is sought out by technology companies and industry organizations who want to reach InfoWorld’s audience of software developers and other information technology professionals. Paul has won a “Best Technology News Coverage” award from IDG.
More from this author
newsSan Francisco AI technology conference draws protests Sep 18, 2025 2 minsnewsVisual Studio 2026 doubles down on AI-assisted coding Sep 16, 2025 2 minsnewsJDK 25: The new features in Java 25 Sep 16, 2025 13 minsnewsKotlin 2.2.20 boosts WebAssembly support Sep 12, 2025 2 minsnewsVS Code 1.104 emphasizes AI model selection, agent security Sep 11, 2025 3 minsnewsJFrog announces ‘agentic repo’ for AI-driven development Sep 10, 2025 2 minsnews.NET 10 moves to release candidate stage Sep 10, 2025 3 minsnewsJDK 26: The new features in Java 26 Sep 9, 2025 3 mins
Show me morePopularArticlesVideos
analysis
How Oracle became a cloud player By David LinthicumSep 19, 20257 mins
Artificial IntelligenceCloud ArchitectureCloud Computing
feature
How AI changes the data analyst role By Carl PerrySep 19, 20256 mins
AnalyticsBusiness AnalystCareers
news
Replit update sparks developers’ dissatisfaction over pricing By Anirban GhoshalSep 19, 20254 mins
Artificial IntelligenceDeveloper
video
Easier Chrome browser automation with PyDoll Sep 16, 20254 mins
Python
video
How to use Rust workspaces to speed up compile times Sep 9, 20253 mins
Python
video
Getting encryption wrong (and getting it right, too) Sep 2, 20257 mins
Python
Sponsored Links
Secure AI by Design: Unleash the power of AI and keep applications, usage and data secure.
Solve your most complex IT challenges with solutions that simplify your modernization journey.
Empower your cybersecurity team with expert insights from Palo Alto Networks.
About
About Us
Advertise
Contact Us
Editorial Ethics Policy
Foundry Careers
Reprints
Newsletters
BrandPosts
Policies
Terms of Service
Privacy Policy
Cookie Policy
Copyright Notice
Member Preferences
About AdChoices
Your California Privacy Rights
Privacy Settings
Our Network
CIO
Computerworld
CSO
Network World
FacebookXYouTubeGoogle NewsLinkedIn
© 2025
FoundryCo, Inc. All Rights Reserved.