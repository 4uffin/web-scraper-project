How to manage Python projects with Poetry | InfoWorld
Topics
Spotlight: IT CareersVideosNewslettersResources
AboutAbout UsAdvertiseContact UsEditorial Ethics PolicyFoundry CareersNewslettersContribute to InfoWorldReprintsPoliciesTerms of ServicePrivacy PolicyCookie PolicyCopyright NoticeMember PreferencesAbout AdChoicesYour California Privacy RightsOur NetworkCIOComputerworldCSONetwork WorldMoreNewsFeaturesBlogsBrandPostsEventsVideosEnterprise Buyer’s Guides
Close
AnalyticsArtificial IntelligenceGenerative AICareersCloud ComputingData ManagementDatabasesEmerging TechnologyTechnology IndustrySecuritySoftware Development Microsoft .NETDevelopment ToolsDevopsOpen SourceProgramming LanguagesJavaJavaScriptPythonIT LeadershipEnterprise Buyer’s Guides
Back
Close
Back
Close
Popular Topics
Artificial IntelligenceCloud ComputingData ManagementSoftware Development
Search
Topics
Spotlight: IT CareersVideosNewslettersResourcesAboutPoliciesOur NetworkMore
Back
Topics
AnalyticsArtificial IntelligenceGenerative AICareersCloud ComputingData ManagementDatabasesEmerging TechnologyTechnology IndustrySecuritySoftware DevelopmentMicrosoft .NETDevelopment ToolsDevopsOpen SourceProgramming LanguagesJavaJavaScriptPythonIT LeadershipEnterprise Buyer’s Guides
Back
AboutAbout UsAdvertiseContact UsEditorial Ethics PolicyFoundry CareersNewslettersContribute to InfoWorldReprints
Back
PoliciesTerms of ServicePrivacy PolicyCookie PolicyCopyright NoticeMember PreferencesAbout AdChoicesYour California Privacy Rights
Back
Our NetworkCIOComputerworldCSONetwork World
Back
MoreNewsFeaturesBlogsBrandPostsEventsVideosEnterprise Buyer’s Guides
Home
Software Development
How to manage Python projects with Poetry
by									Serdar Yegulalp
Senior Writer
How to manage Python projects with Poetry
how-to
Sep 24, 20258 minsDevelopment ToolsProgramming LanguagesPython
Poetry takes a unique approach to managing Python project dependencies and virtual environments. Here’s everything you need to get started with Poetry today.
Credit: 															pavila / Shutterstock
There should be one—and preferably only one—obvious way to do it.—Tim Peters, Zen of Python
While that quote is excellent, Python doesn’t always adhere to it in practice. One area where Python has fallen short of the ideal is package management. For too long, managing Python projects involved a mishmash of tools and methodologies. However, a few clean and simple toolsets are emerging. One of them is Poetry.
Also see: PyApp: An easy way to package Python apps as executables.
Poetry brings to Python the kind of all-in-one project management capability that Go and Rust have long enjoyed. Poetry offers deterministic dependencies with specific package versions, so projects build consistently in different places. Poetry also makes it easier to build, package, and publish projects and libraries to PyPI, so that others can share the fruits of your Python labors.
This article walks through using Poetry for Python projects. You’ll learn how to set up Poetry, how to use it to configure project dependencies and virtual environments, and how to avoid some of the pitfalls that come with Poetry’s unique way of doing things.
Poetry vs. uv
uv is another newer Python package manager that gives gives Poetry a run for its money, with super-fast package and dependency management. uv even lets you run Python packages with one command and no setup. Watch the video below for a comparison of Poetry and uv.
How to set up Poetry in Python
Poetry is deliberately unlike other Python dependency and project management tools, beginning with setup. Instead of using pip, Poetry uses a custom installer. The installer adds the Poetry application to your user’s profile directory, so it can be used with any Python installation in your system—present or future.
Although you can use pip install poetry to install Poetry in a specific Python installation, doing so isn’t recommended for two reasons. First, it might conflict with other system files. Second, it makes it difficult to use Poetry consistently with different versions of Python and different virtual environments, as well as future editions of Python installed on the same system.
Creating a Poetry-managed Python project
Once you have Poetry installed, you can create a new Poetry-managed project directory simply by typing poetry new <project_name>. This command creates a subdirectory named <project_name> and populates it with a project scaffold.
The Poetry project scaffold includes the following:
pyproject.toml: The definition file for the project. Poetry manages this definition for you. If you know what you’re doing, you can edit the file directly, but most of the time you won’t need to. Developers should use the pyproject.toml standard for all new Python projects going forward, whenever possible.
README.rst: An empty README file in ReStructuredText format, the file format used for Python documentation. (Nothing says that you must use .rst format for your docs; you can use Markdown for simpler cases.)
tests: A subdirectory with scaffolding for unit tests. If you aren’t in the habit of writing tests for your new projects, you should be!
A subdirectory src that also contains a subdirectory with the project name. This contains the code for your project.
This layout conforms to the standards used by modern Python projects.
Managing Python virtual environments in Poetry
Probably the first thing you’ll want with a new Poetry project is a Python virtual environment. True to form, Poetry has its own distinct way of handling virtual environments. Instead of placing virtual environments inside the project directory, Poetry puts them in a centralized cache directory that varies according to the operating system:
Unix: ~/.cache/pypoetry/virtualenvs
macOS: ~/Library/Caches/pypoetry/virtualenvs
Windows: C:/Users/<username>/AppData/Local/pypoetry/Cache/virtualenvs or %LOCALAPPDATA%/pypoetry/Cache/virtualenvs
The advantage to Poetry’s approach is the ability to share virtual environments across projects whenever it makes sense. But doing so requires altering your work habits.
To set up a virtual environment in Poetry, go to the project’s directory and type poetry env use python (or poetry env use py on Windows). Poetry will create a new virtual environment, store it in the cache directory, and display a randomly generated name for the virtual environment.
For added convenience, Poetry also installs any dependencies listed in the project’s pyproject.toml file. This feature is super useful if you ever want to copy a Poetry project from somewhere else and set it up on your system.
Note that if you run poetry env use python in a project directory that already has a Poetry-assigned virtual environment, Poetry will activate that virtual environment in the context of the CLI session.
Next, you’ll want to use your Poetry-managed virtual environments to work with your IDE. Many Python IDEs now automatically detect the presence of a Poetry environment. Visual Studio Code, for instance, can do this, although if you set up the environment in VS Code’s terminal, you may need to reload the project window. (Type >reload window in the command palette to find this command.)
If you don’t want Poetry to manage your virtual environments, you can disable the behavior with this command:
poetry config virtualenvs.create false
Just keep in mind that disabling this feature defeats one of Poetry’s biggest advantages.
Adding dependencies to a Python project
You can add dependencies in a Poetry project in one of two ways: as a general dependency used by the project in all circumstances, or as part of a dependency group.
Dependency groups let you create sets of dependencies within a project, each for different uses. For instance, you could create a dependency set specifically for developers with coding tools like black, mypy, or docutils.
Dependency groups can also be included inside each other, which is useful if you want to re-use the dependencies from one group in other groups.
To add dependencies to a project generally, use poetry add <dependency_name>. To add dependencies for a given group, use poetry add --group <group_name> <dependency_name>.
Note that the poetry add command works much like pip install in that you can specify either a package name or a Git path (e.g., git+https://github.com/developer/project.git#branchname). You can also configure Poetry to use private repos.
Once dependencies are resolved and installed, Poetry creates a file named poetry.lock in the project directory. This file is a manifest of all of the downloaded dependencies, and should be saved along with the rest of your project. Then anyone who pulls a copy of the project from source control will get the same versions of all the required packages.
Now you are ready to begin the project in earnest. All you have to remember from this point forward is to use Poetry—and only Poetry—to manage all dependencies and virtual environments for the project.
Removing a Poetry virtual environment
By default, a Poetry-managed virtual environment lives in a central directory on the system, away from any projects associated with it. As a result, deleting a project directory does not also delete the corresponding virtual environment, as Poetry doesn’t track such things automatically. You have to remove centrally managed virtual environments yourself.
To do this, go to the root directory of the Poetry project in question and issue the command poetry env remove python (or poetry env remove py, for Windows). Note that if you’ve overridden Poetry’s default behavior and placed the environment in your project directory, you can just delete the environment manually; just remember that doing this defeats one of Poetry’s best features.
Managing Python installations with Poetry
Poetry has an experimental feature that lets you add or remove entire Python installations for use with a given venv. The installs are provided from Astral’s Python Standalone Builds project, which are designed to be highly redistributable and not make changes to the underlying system. This feature is still experimental, so you should only use it for versions of Python you are using only with a Poetry project, not as a way to manage Python installations generally. For that, you can use other tools like pyenv, or the latest (Python 3.14) version of the Microsoft Windows py tool.
Related content
how-to
Introduction to Java records: Simplified data-centric programming in Java By Rafael del Nero
Sep 25, 2025 10 mins
Java
Programming Languages
Software Development
news
GraalVM 25 arrives, backed by JDK 25 By Paul Krill
Sep 24, 2025 3 mins
Java
JavaScript
Python
feature
Advanced debug logging techniques: A technical guide By Neel Shah
Sep 22, 2025 5 mins
Development Tools
JavaScript
Python
Other Sections
Resources
Videos
Spotlight: IT Careers
by
Serdar Yegulalp
Senior Writer
Follow Serdar Yegulalp on X
Serdar Yegulalp is a senior writer at InfoWorld. A veteran technology journalist, Serdar has been writing about computers, operating systems, databases, programming, and other information technology topics for 30 years. Before joining InfoWorld in 2013, Serdar wrote for Windows Magazine, InformationWeek, Byte, and a slew of other publications. At InfoWorld, Serdar has covered software development, devops, containerization, machine learning, and artificial intelligence, winning several B2B journalism awards including a 2024 Neal Award and a 2025 Azbee Award for best instructional content and best how-to article, respectively. He currently focuses on software development tools and technologies and major programming languages including Python, Rust, Go, Zig, and Wasm. Tune into his weekly Dev with Serdar videos for programming tips and techniques and close looks at programming libraries and tools.
More from this author
how-toRust tutorial: Get started with the Rust language Sep 17, 2025 15 minsanalysisMaking good choices: How to get the best from Python tools Sep 12, 2025 3 minshow-toOrganize Rust projects for faster compilation with Cargo workspaces Sep 10, 2025 7 minsfeatureNative UI vs. web UI: How to choose Sep 3, 2025 6 minsanalysisNew tools make Python app distribution easier than ever Aug 29, 2025 3 minsfeaturePyApp: An easy way to package Python apps as executables Aug 20, 2025 7 minsanalysisThe truth about Python’s AI-powered popularity surge Aug 15, 2025 2 minshow-toHow to code sign binaries on Windows Aug 6, 2025 12 mins
Show me morePopularArticlesVideos
news
Microsoft Marketplace opens for AI apps, agents By Paul KrillSep 25, 20252 mins
Generative AIMicrosoft .NETMicrosoft Azure
news
GitHub Copilot-backed app modernization available for Java, .NET By Paul KrillSep 25, 20251 min
Generative AIGitHubJava
analysis
Spec-driven AI coding with GitHub’s Spec Kit By Simon BissonSep 25, 20259 mins
Artificial IntelligenceDevelopment ToolsSoftware Development
video
Python 3.14's live debugging interface Sep 23, 20254 mins
Python
video
Easier Chrome browser automation with PyDoll Sep 16, 20254 mins
Python
video
How to use Rust workspaces to speed up compile times Sep 9, 20253 mins
Python
Sponsored Links
Empower your cybersecurity team with expert insights from Palo Alto Networks.
Secure AI by Design: Unleash the power of AI and keep applications, usage and data secure.
Solve your most complex IT challenges with solutions that simplify your modernization journey.
About
About Us
Advertise
Contact Us
Editorial Ethics Policy
Foundry Careers
Reprints
Newsletters
BrandPosts
Policies
Terms of Service
Privacy Policy
Cookie Policy
Copyright Notice
Member Preferences
About AdChoices
Your California Privacy Rights
Privacy Settings
Our Network
CIO
Computerworld
CSO
Network World
FacebookXYouTubeGoogle NewsLinkedIn
© 2025
FoundryCo, Inc. All Rights Reserved.