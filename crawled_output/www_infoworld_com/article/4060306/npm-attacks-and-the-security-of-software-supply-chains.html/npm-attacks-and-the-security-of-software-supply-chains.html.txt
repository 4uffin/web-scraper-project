NPM attacks and the security of software supply chains | InfoWorld
Topics
Spotlight: IT CareersVideosNewslettersResources
AboutAbout UsAdvertiseContact UsEditorial Ethics PolicyFoundry CareersNewslettersContribute to InfoWorldReprintsPoliciesTerms of ServicePrivacy PolicyCookie PolicyCopyright NoticeMember PreferencesAbout AdChoicesYour California Privacy RightsOur NetworkCIOComputerworldCSONetwork WorldMoreNewsFeaturesBlogsBrandPostsEventsVideosEnterprise Buyer’s Guides
Close
AnalyticsArtificial IntelligenceGenerative AICareersCloud ComputingData ManagementDatabasesEmerging TechnologyTechnology IndustrySecuritySoftware Development Microsoft .NETDevelopment ToolsDevopsOpen SourceProgramming LanguagesJavaJavaScriptPythonIT LeadershipEnterprise Buyer’s Guides
Back
Close
Back
Close
Popular Topics
Artificial IntelligenceCloud ComputingData ManagementSoftware Development
Search
Topics
Spotlight: IT CareersVideosNewslettersResourcesAboutPoliciesOur NetworkMore
Back
Topics
AnalyticsArtificial IntelligenceGenerative AICareersCloud ComputingData ManagementDatabasesEmerging TechnologyTechnology IndustrySecuritySoftware DevelopmentMicrosoft .NETDevelopment ToolsDevopsOpen SourceProgramming LanguagesJavaJavaScriptPythonIT LeadershipEnterprise Buyer’s Guides
Back
AboutAbout UsAdvertiseContact UsEditorial Ethics PolicyFoundry CareersNewslettersContribute to InfoWorldReprints
Back
PoliciesTerms of ServicePrivacy PolicyCookie PolicyCopyright NoticeMember PreferencesAbout AdChoicesYour California Privacy Rights
Back
Our NetworkCIOComputerworldCSONetwork World
Back
MoreNewsFeaturesBlogsBrandPostsEventsVideosEnterprise Buyer’s Guides
Home
Security
NPM attacks and the security of software supply chains
by									Matt Asay
Contributing Writer
NPM attacks and the security of software supply chains
opinion
Sep 22, 20257 minsCyberattacksOpen SourceSecurity Practices
Process improvements and a closer look at funding streams will provide far more protection for the open source software we depend on than isolated guardrails.
Credit: 															AlyoshinE / Shutterstock
If you needed another reminder that our software supply chains are only as strong as their smallest link, the JavaScript ecosystem delivered it. In early September, attackers phished the NPM account of “Qix,” a prolific maintainer, then pushed tainted releases of 18 popular packages: ansi-styles, debug, chalk, supports-color, and others, which are collectively responsible for more than 2 billion weekly downloads. The malware wasn’t particularly sophisticated, and the window of exposure was brief (roughly two hours) before the maintainer and registry intervened. Even so, the situation raises uncomfortable questions about open source’s supply chain risk.
On the positive side, the community did what open source communities often do. They spotted the anomalies fast and neutralized the problem before it metastasized. I’ve argued for years that the process of open source—transparency, review at scale, the habit of fixing in the open—is an optimal guarantor of security.
That said, it should not be so easy to hijack code that lands in millions of production environments every week. Even with two-factor authentication (2FA) more common today, a convincing phishing email can still turn a popular package into a Trojan horse. As JFrog’s CTO said, in regards to the incident, this is the ugly reality of a JavaScript ecosystem in which “half of the codebase is dependent on single-line utilities maintained by a single developer.” That’s not a dunk on small, composable libraries; it’s a sober assessment of risk.
Just days after “Qix,” the NPM ecosystem faced something arguably more menacing: “Shai-Hulud,” a self-replicating worm that spread between packages by stealing author tokens and seeding back doors through hidden CI (continuous integration) workflows. It’s a supply-chain attack designed to propagate as it compromises. The campaign touched hundreds of packages, underscoring that phishing one maintainer isn’t a one-off fluke; it’s an attack pattern.
We’ve been here before
We’re now far enough into the “supply chain security” era that this feels familiar. In 2022, I wrote that developers “have a supply chain security problem” because it’s simply too efficient for attackers to compromise a dependency once and pivot into every app that transitively depends on it. This isn’t something easily fixed by money either, because adversaries innovate, attack surfaces explode, and any static prescription underperforms a dynamic threat.
We need, in other words, process improvements to strengthen security, not one-off cash donations.
That’s not to say funding is irrelevant—far from it. In fact, the NPM incident is an indictment of how under-resourced much of our critical open source is. Far too often, underpaid (or unpaid) maintainers are doing the unsexy but essential work for open source that keeps the internet upright. It’s not glamorous. It’s essential. And it’s exactly where most organizations that depend on open source fail to invest.
Is the answer to improve funding mechanisms for open source? Sort of. Consider Open Policy Agent. As a project, OPA thrived: graduated by the Cloud Native Computing Foundation and embedded across Kubernetes clusters, microservices, and gateways as a standard policy engine. As a business, however, the story is more complicated. Styra, the company that commercialized OPA, raised significant capital to build enterprise tools, but earlier this month, multiple reports indicated Apple hired OPA’s cofounders and several core engineers. OPA remains open under CNCF governance, but Styra’s commercial pathway looks uncertain, and customers are evaluating alternatives. Great project, hard business.
This is not unique. As Graham Neray, CEO of Oso, explained to me:
OPA is widely used, so you expect to see it work out—you want to see that work out. The reality is you can count on two hands the number of commercially successful open source businesses operating at scale. Even among those, all have had questions about their commercial viability at one point or another. Contrary to popular belief, there are no rules for what works in commercial open source. This stuff is hard.
History bears him out. There are successes—Red Hat (acquired by IBM), Elastic, MongoDB, Cloudera, MuleSoft, Confluent, Temporal, HashiCorp (also acquired by IBM)—but each navigated awkward trade-offs on licensing, cloud competition, or monetization models. There’s no single “do this and win” playbook.
Even where there’s funding, it doesn’t always land where the risk is. In 2022 I noted that OpenSSF’s multi-point plan was commendable, but generalized funding can’t paper over the reality that attack surfaces change faster than checklists. The most durable wins come from standards for provenance, routine signing, predictable response, and the plumbing that makes “secure by default” boring.
What works and what still doesn’t
Back to NPM. Why did this compromise “go out with a whimper”? Partly because the adversary deployed amateurish malware and got caught quickly. But there’s also evidence the ecosystem’s guardrails are better than they were a few years ago:
Two-factor authentication. GitHub began requiring 2FA for maintainers of the most popular NPM packages in 2022 and later expanded 2FA requirements to all code contributors by the end of 2023. That doesn’t make phishing impossible but it does raise the cost.
Provenance and signing. NPM now supports Sigstore-powered provenance so publishers can attest to where and how their packages were built, and consumers can verify the chain. This is becoming table stakes across ecosystems.
Ecosystem detection. Security vendors and community researchers (JFrog, Wiz, Checkmarx, and others) now actively monitor for anomalous releases and publish indicators of compromise quickly. In the NPM case, that community vigilance constrained dwell time.
Despite all this, one convincingly spoofed email still let an attacker alter a dependency tree consumed by tens of thousands of apps. The Shai-Hulud worm shows that once an author token is stolen, malware can spread laterally through other packages and CI systems—even when the initial malware is simple. That’s the nightmare scenario for anyone running a build pipeline.
Such vulnerability will continue to be an issue wherever we expect under-resourced maintainers to hold up the internet on their shoulders. Funding helps make the secure way the easy way: paying for release automation, reproducible builds, key management, test harnesses, and vulnerability triage. In other words, funding facilitates the glue work that turns the OpenSSF’s checklists into muscle memory. Money is most effective when it accelerates a coordinated process rather than betting on a silver bullet.
If you’re a decision-maker, your best move isn’t to write a philanthropic check and call it done. It’s to treat open source like a supplier you actively manage. Contract for support where it makes sense, sponsor the maintenance you rely on, adopt the provenance and 2FA controls your ecosystems now support, and design your build pipelines to assume packages (and people) will eventually fail.
These NPM episodes should make us grateful for the speed and transparency of open collaboration. It should also make us honest about how much we depend on thinly resourced maintainers and the need to fund and operationalize the guardrails we already know we need.
TL; DR? If you depend on open source, act like it.
Related content
opinion
Why LLMs demand a new approach to authorization By Matt Asay
Jul 14, 2025 7 mins
Artificial Intelligence
Data and Information Security
Security Practices
news
Large language models hallucinating non-existent developer packages could fuel supply chain attacks By John E. Dunn
Sep 30, 2024 5 mins
Cyberattacks
Generative AI
Software Development
analysis
The paradox of chaos engineering By David Linthicum
Aug 30, 2024 5 mins
Cloud Computing
Cloud Security
Security Practices
Other Sections
Resources
Videos
Spotlight: IT Careers
by
Matt Asay
Contributing Writer
Follow Matt Asay on X
Follow Matt Asay on LinkedIn
Matt Asay runs developer marketing at Oracle. Previously Asay ran developer relations at MongoDB, and before that he was a Principal at Amazon Web Services and Head of Developer Ecosystem for Adobe. Prior to Adobe, Asay held a range of roles at open source companies: VP of business development, marketing, and community at MongoDB; VP of business development at real-time analytics company Nodeable (acquired by Appcelerator); VP of business development and interim CEO at mobile HTML5 start-up Strobe (acquired by Facebook); COO at Canonical, the Ubuntu Linux company; and head of the Americas at Alfresco, a content management startup. Asay is an emeritus board member of the Open Source Initiative (OSI) and holds a JD from Stanford, where he focused on open source and other IP licensing issues. The views expressed in Matt’s posts are Matt’s, and don’t represent the views of his employer.
More from this author
opinionMore hardware won’t fix bad engineering Sep 15, 2025 6 minsopinionHow to spin Python’s challenges into AI gold Sep 8, 2025 7 minsopinionWhy DocumentDB can be a win for MongoDB Sep 1, 2025 8 minsanalysisEnterprise essentials for generative AI Aug 25, 2025 10 minsopinionWhy AI fails at business context, and what to do about it Aug 18, 2025 8 minsopinionWho does the unsexy but essential work for open source? Aug 11, 2025 7 minsopinionBridging the trust gap in AI-driven development Aug 4, 2025 7 minsopinionThe importance of memory for AI Jul 28, 2025 9 mins
Show me morePopularArticlesVideos
news
Microsoft Marketplace opens for AI apps, agents By Paul KrillSep 25, 20252 mins
Generative AIMicrosoft .NETMicrosoft Azure
news
GitHub Copilot-backed app modernization available for Java, .NET By Paul KrillSep 25, 20251 min
Generative AIGitHubJava
how-to
Introduction to Java records: Simplified data-centric programming in Java By Rafael del NeroSep 25, 202510 mins
JavaProgramming LanguagesSoftware Development
video
Python 3.14's live debugging interface Sep 23, 20254 mins
Python
video
Easier Chrome browser automation with PyDoll Sep 16, 20254 mins
Python
video
How to use Rust workspaces to speed up compile times Sep 9, 20253 mins
Python
Sponsored Links
Solve your most complex IT challenges with solutions that simplify your modernization journey.
Empower your cybersecurity team with expert insights from Palo Alto Networks.
Secure AI by Design: Unleash the power of AI and keep applications, usage and data secure.
About
About Us
Advertise
Contact Us
Editorial Ethics Policy
Foundry Careers
Reprints
Newsletters
BrandPosts
Policies
Terms of Service
Privacy Policy
Cookie Policy
Copyright Notice
Member Preferences
About AdChoices
Your California Privacy Rights
Privacy Settings
Our Network
CIO
Computerworld
CSO
Network World
FacebookXYouTubeGoogle NewsLinkedIn
© 2025
FoundryCo, Inc. All Rights Reserved.