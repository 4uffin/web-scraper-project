The three game-changing features of JDK 25 | InfoWorld
Topics
Spotlight: IT CareersVideosNewslettersResources
AboutAbout UsAdvertiseContact UsEditorial Ethics PolicyFoundry CareersNewslettersContribute to InfoWorldReprintsPoliciesTerms of ServicePrivacy PolicyCookie PolicyCopyright NoticeMember PreferencesAbout AdChoicesYour California Privacy RightsOur NetworkCIOComputerworldCSONetwork WorldMoreNewsFeaturesBlogsBrandPostsEventsVideosEnterprise Buyer’s Guides
Close
AnalyticsArtificial IntelligenceGenerative AICareersCloud ComputingData ManagementDatabasesEmerging TechnologyTechnology IndustrySecuritySoftware Development Microsoft .NETDevelopment ToolsDevopsOpen SourceProgramming LanguagesJavaJavaScriptPythonIT LeadershipEnterprise Buyer’s Guides
Back
Close
Back
Close
Popular Topics
Artificial IntelligenceCloud ComputingData ManagementSoftware Development
Search
Topics
Spotlight: IT CareersVideosNewslettersResourcesAboutPoliciesOur NetworkMore
Back
Topics
AnalyticsArtificial IntelligenceGenerative AICareersCloud ComputingData ManagementDatabasesEmerging TechnologyTechnology IndustrySecuritySoftware DevelopmentMicrosoft .NETDevelopment ToolsDevopsOpen SourceProgramming LanguagesJavaJavaScriptPythonIT LeadershipEnterprise Buyer’s Guides
Back
AboutAbout UsAdvertiseContact UsEditorial Ethics PolicyFoundry CareersNewslettersContribute to InfoWorldReprints
Back
PoliciesTerms of ServicePrivacy PolicyCookie PolicyCopyright NoticeMember PreferencesAbout AdChoicesYour California Privacy Rights
Back
Our NetworkCIOComputerworldCSONetwork World
Back
MoreNewsFeaturesBlogsBrandPostsEventsVideosEnterprise Buyer’s Guides
Home
Blogs
New Tech Forum
The three game-changing features of JDK 25
by									Simon Ritter
The three game-changing features of JDK 25
feature
Sep 16, 20256 minsJavaProgramming LanguagesSoftware Development
Out of 18 new features, three improvements sharpen Java’s edge for cloud-native, containerized, and cost-sensitive deployments.
Credit: 															Christoph
With JDK 25, Java reaches another Long-Term Support (LTS) milestone — and for enterprises, that makes this release unavoidable. Oracle’s licensing terms for JDK 21 will soon expire, creating a ticking clock for organizations that want to stay on a free distribution. But beyond the calendar, JDK 25 delivers real technical incentives to upgrade.
Out of 18 new features, just three stand out as enterprise game-changers: faster startup through ahead-of-time profiling, deeper visibility with Flight Recorder, and lower memory overhead via compact object headers. Taken together, these improvements sharpen Java’s edge for cloud-native, containerized, and cost-sensitive deployments.
Startup performance: Project Leyden begins to close the gap
One of Java’s longest-standing pain points is slow startup and warmup times. This is finally being addressed at the platform level in JDK 25 through enhancements tied to Project Leyden. The introduction of ahead-of-time (AOT) method profiling and improved command-line ergonomics represents meaningful progress, especially for cloud-native and microservices-based architectures where fast cold starts and elastic scaling are critical.
AOT profiling allows the JVM to identify frequently used code paths before runtime, enabling the JIT (just-in-time) compiler to immediately optimize them at startup. This reduces the time applications spend in “warm-up mode,” and in ideal cases, can improve startup behavior by 30% to 70%, significantly enhancing responsiveness during scale-out or redeploy scenarios.
The practical impact is substantial. Instead of waiting minutes for your application to reach optimal performance after deployment or restart, critical code paths execute at full speed almost immediately. For auto-scaling scenarios or container orchestration, this improvement alone can justify the migration effort.
But while these improvements are welcome, they are not new territory for the Java ecosystem. Vendors like Azul (my company) have been tackling this problem for years. Azul’s ReadyNow technology, for example, provides production-proven warm-up acceleration by capturing and replaying application profiling data, delivering fast startup without sacrificing runtime optimization, which is what happens with a native image approach, such as is used in Graal — something Leyden has yet to fully address.
Project Leyden’s work is still ongoing, and the features in JDK 25 represent an important but early step in the right direction. Having these capabilities baked into OpenJDK is a positive move toward democratizing access to better startup performance. However, enterprises with stringent SLAs or latency-sensitive workloads may still require more mature, production-hardened approaches to meet their performance and efficiency goals today.
Enhanced observability: Java Flight Recorder gets surgical
Java Flight Recorder (JFR) receives three significant enhancements in JDK 25: CPU time profiling, cooperative sampling improvements, and method timing and tracing. These upgrades transform JFR from a useful diagnostic tool into a surgical instrument for performance optimization.
The new CPU time profiling provides granular visibility into how processing time is distributed across threads, methods, and code paths. Unlike high-level application performance monitoring tools that focus on service-to-service interactions, JFR’s enhanced capabilities drill down to the method level, where developers can identify and fix actual bottlenecks.
Method timing and tracing add detailed execution time tracking per method invocation, enabling precise identification of performance regressions. The cooperative sampling improvements reduce profiling overhead while increasing accuracy—critical for production environments where observation must not impact application performance.
These observability enhancements deliver immediate business value by replacing expensive third-party profiling solutions while providing deeper insights than most commercial alternatives. For development teams focused on continuous performance optimization, JFR’s evolution represents a significant productivity multiplier.
Memory efficiency: small changes, big impact
Compact object headers might seem like a minor technical detail, but this feature delivers measurable infrastructure cost reductions. By reducing object header size from 16 bytes or 12 bytes to only 8 bytes on 64-bit platforms, compact object headers bring significant heap size reductions to applications. Profiling shows up to 22% reduction in heap size and 8% less CPU time on common benchmarks.
The mathematics are compelling. A financial trading system with 100 million market data objects saves 400MB of heap space, while an e-commerce platform with 10 million product objects across 20 instances reduces memory usage by 800MB. These savings translate directly to lower cloud infrastructure costs and enable higher container density.
Beyond cost reduction, compact object headers improve CPU cache efficiency, often delivering 5% to 10% throughput improvements for object-heavy workloads. The feature requires no application changes and maintains full JVM specification compliance.
The other 15: preview features and incremental improvements
The remaining JEPs in JDK 25 fall into two categories: preview features not ready for production deployment, and incremental improvements with limited business impact. The Vector API, now in its 10th preview iteration, exemplifies the first category—interesting technology still under development.
Several garbage collection enhancements, including making generational Shenandoah the default, represent incremental progress rather than breakthrough improvements. While welcome, these changes won’t significantly alter application performance characteristics.
This distribution—three impactful features among 18 total—reflects the maturity of the Java platform. Revolutionary changes become increasingly rare as the language and runtime optimize for stability and backward compatibility.
Setting realistic expectations
JDK 25 may not dazzle with radical new capabilities, but that’s exactly the point. The Java platform now evolves in steady increments, giving enterprises the confidence to adopt new versions without breaking their workloads. With licensing pressures driving migration and efficiency gains that translate into real cloud savings, the case for JDK 25 is practical and immediate.
For enterprise teams, the smart move is clear: focus on startup performance, observability, and memory efficiency, and let the rest of the release set the stage for future innovation.
—
New Tech Forum provides a venue for technology leaders—including vendors and other outside contributors—to explore and discuss emerging enterprise technology in unprecedented depth and breadth. The selection is subjective, based on our pick of the technologies we believe to be important and of greatest interest to InfoWorld readers. InfoWorld does not accept marketing collateral for publication and reserves the right to edit all contributed content. Send all inquiries to doug_dineley@foundryco.com.
Related content
news
Rust 1.90 brings workspace publishing support to Cargo By Paul Krill
Sep 19, 2025 2 mins
Apple
Programming Languages
Rust
analysis
Adding up the hidden costs of generative AI By Josh Fruhlinger
Sep 19, 2025 3 mins
Artificial Intelligence
Generative AI
Technology Industry
news
Wasm 3.0 adds 64-bit backing, language support By Paul Krill
Sep 19, 2025 3 mins
Java
Kotlin
Scala
news
AI Alliance forges agent-native language, knowledge base By Paul Krill
Sep 18, 2025 2 mins
Artificial Intelligence
Generative AI
Programming Languages
Other Sections
Resources
Videos
Spotlight: IT Careers
by 															Simon Ritter
Contributor
Follow Simon Ritter on LinkedIn
Simon Ritter is the Deputy CTO of Azul. Simon joined Sun Microsystems in 1996 and spent time working in both Java development and consultancy. He has been presenting Java technologies to developers since 1999, focusing on the core Java platform as well as client and embedded applications. At Azul, he continues to help people understand Java and Azul’s JVM products. Simon is a Java Champion and two-time recipient of the JavaOne Rockstar award. In addition, he has represented Azul on the JCP Executive Committee, the OpenJDK Vulnerability Group, and the JSR Expert Group since Java SE 9.
Show me morePopularArticlesVideos
analysis
How Oracle became a cloud player By David LinthicumSep 19, 20257 mins
Artificial IntelligenceCloud ArchitectureCloud Computing
feature
How AI changes the data analyst role By Carl PerrySep 19, 20256 mins
AnalyticsBusiness AnalystCareers
news
Replit update sparks developers’ dissatisfaction over pricing By Anirban GhoshalSep 19, 20254 mins
Artificial IntelligenceDeveloper
video
Easier Chrome browser automation with PyDoll Sep 16, 20254 mins
Python
video
How to use Rust workspaces to speed up compile times Sep 9, 20253 mins
Python
video
Getting encryption wrong (and getting it right, too) Sep 2, 20257 mins
Python
Sponsored Links
Solve your most complex IT challenges with solutions that simplify your modernization journey.
Secure AI by Design: Unleash the power of AI and keep applications, usage and data secure.
Empower your cybersecurity team with expert insights from Palo Alto Networks.
About
About Us
Advertise
Contact Us
Editorial Ethics Policy
Foundry Careers
Reprints
Newsletters
BrandPosts
Policies
Terms of Service
Privacy Policy
Cookie Policy
Copyright Notice
Member Preferences
About AdChoices
Your California Privacy Rights
Privacy Settings
Our Network
CIO
Computerworld
CSO
Network World
FacebookXYouTubeGoogle NewsLinkedIn
© 2025
FoundryCo, Inc. All Rights Reserved.