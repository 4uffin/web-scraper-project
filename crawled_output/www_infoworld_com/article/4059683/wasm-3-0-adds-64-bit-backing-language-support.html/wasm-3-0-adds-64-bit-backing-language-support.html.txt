Wasm 3.0 adds 64-bit backing, language support | InfoWorld
Topics
Spotlight: IT CareersVideosNewslettersResources
AboutAbout UsAdvertiseContact UsEditorial Ethics PolicyFoundry CareersNewslettersContribute to InfoWorldReprintsPoliciesTerms of ServicePrivacy PolicyCookie PolicyCopyright NoticeMember PreferencesAbout AdChoicesYour California Privacy RightsOur NetworkCIOComputerworldCSONetwork WorldMoreNewsFeaturesBlogsBrandPostsEventsVideosEnterprise Buyer’s Guides
Close
AnalyticsArtificial IntelligenceGenerative AICareersCloud ComputingData ManagementDatabasesEmerging TechnologyTechnology IndustrySecuritySoftware Development Microsoft .NETDevelopment ToolsDevopsOpen SourceProgramming LanguagesJavaJavaScriptPythonIT LeadershipEnterprise Buyer’s Guides
Back
Close
Back
Close
Popular Topics
Artificial IntelligenceCloud ComputingData ManagementSoftware Development
Search
Topics
Spotlight: IT CareersVideosNewslettersResourcesAboutPoliciesOur NetworkMore
Back
Topics
AnalyticsArtificial IntelligenceGenerative AICareersCloud ComputingData ManagementDatabasesEmerging TechnologyTechnology IndustrySecuritySoftware DevelopmentMicrosoft .NETDevelopment ToolsDevopsOpen SourceProgramming LanguagesJavaJavaScriptPythonIT LeadershipEnterprise Buyer’s Guides
Back
AboutAbout UsAdvertiseContact UsEditorial Ethics PolicyFoundry CareersNewslettersContribute to InfoWorldReprints
Back
PoliciesTerms of ServicePrivacy PolicyCookie PolicyCopyright NoticeMember PreferencesAbout AdChoicesYour California Privacy Rights
Back
Our NetworkCIOComputerworldCSONetwork World
Back
MoreNewsFeaturesBlogsBrandPostsEventsVideosEnterprise Buyer’s Guides
Home
Software Development
Wasm 3.0 adds 64-bit backing, language support
by									Paul Krill
Editor at Large
Wasm 3.0 adds 64-bit backing, language support
news
Sep 19, 20253 minsJavaKotlinScala
WebAssembly 3.0 adds support for compiling high-level programming languages, with 64-bit address spacing and the ability to declare multiple memories, among other improvements.
Credit: 															locrifa/Shutterstock
WebAssembly (Wasm) 3.0, the latest version of the binary instruction format enabling web development in multiple languages, was announced complete. The Wasm 3.0 standard features 64-bit address spacing, multiple memories, improved garbage collection, and more language support.
New features in WebAssembly 3.0 provide better support for compiling high-level programming languages, according to the Wasm W3C (World Wide Web Consortium) community group and working group overseeing development. Proponents said languages targeting Wasm with the new garbage collection feature include Java, OCaml, Scala, Kotlin, Scheme, and Dart.
Announced September 17, the Wasm 3.0 specification supports declaring memories and tables using i64 as the address type instead of just i32. This expands the available address space of Wasm applications from 4 gigabytes to (theoretically)16 exabytes, to the extent physical hardware allows.
WebAssembly 3.0 also improves garbage collection in the WasmGC extension. In addition to expanding the capabilities of raw linear memories, support was added for a new form of storage that is managed by the Wasm runtime automatically. WasmGC is low-level; a compiler targeting Wasm can declare the memory layout of its runtime data structures in terms of struct and array types, plus unboxed tagged integers, whose allocation and lifetime are then handled by Wasm. The WasmGC extension, which is built upon a substantial extension to the Wasm type system, also now supports much richer type references.
In the realm of memory, a single module now can declare multiple memories and directly access them, including copying data between them. This improvement allows tools like wasm-merge, which perform “static linking” on two or more Wasm modules by merging them into one, to work for all Wasm modules. It also paves the way for new uses of separate address spaces; examples provided were for security (separating private data), buffering, or instrumentation.
Wasm 3.0 already is shipping in most major web browsers, and support in standalone engines like Wasmtime is on track to completion, said proponents. Other improvements include:
The Wasm text format was enriched with generic syntax for placing annotations in Wasm source code.
Wasm now specifies a deterministic default behavior for every instruction with otherwise non-deterministic results—currently, this includes floating-point operators and their generated NaN values and relaxed vector instructions.
Related content
news
Scala stabilizes named tuples By Paul Krill
May 13, 2025 2 mins
Java
Programming Languages
Scala
news
Java-based organizations mostly use Java for AI development – report By Paul Krill
Jan 28, 2025 3 mins
Java
JavaScript
Kotlin
news
Akka distributed computing platform adds Java SDK By Paul Krill
Nov 18, 2024 2 mins
Java
Scala
Serverless Computing
Other Sections
Resources
Videos
Spotlight: IT Careers
by
Paul Krill
Editor at Large
Follow Paul Krill on X
Paul Krill is editor at large at InfoWorld. Paul has been covering computer technology as a news and feature reporter for more than 35 years, including 30 years at InfoWorld. He has specialized in coverage of software development tools and technologies since the 1990s, and he continues to lead InfoWorld’s news coverage of software development platforms including Java and .NET and programming languages including JavaScript, TypeScript, PHP, Python, Ruby, Rust, and Go. Long trusted as a reporter who prioritizes accuracy, integrity, and the best interests of readers, Paul is sought out by technology companies and industry organizations who want to reach InfoWorld’s audience of software developers and other information technology professionals. Paul has won a “Best Technology News Coverage” award from IDG.
More from this author
newsRust 1.90 brings workspace publishing support to Cargo Sep 19, 2025 2 minsnewsAI Alliance forges agent-native language, knowledge base Sep 18, 2025 2 minsnewsSan Francisco AI technology conference draws protests Sep 18, 2025 2 minsnewsVisual Studio 2026 doubles down on AI-assisted coding Sep 16, 2025 2 minsnewsJDK 25: The new features in Java 25 Sep 16, 2025 13 minsnewsSurvey pinpoints Rust compiler pain points Sep 15, 2025 3 minsnewsKotlin 2.2.20 boosts WebAssembly support Sep 12, 2025 2 minsnewsVS Code 1.104 emphasizes AI model selection, agent security Sep 11, 2025 3 mins
Show me morePopularArticlesVideos
analysis
How Oracle became a cloud player By David LinthicumSep 19, 20257 mins
Artificial IntelligenceCloud ArchitectureCloud Computing
analysis
Adding up the hidden costs of generative AI By Josh FruhlingerSep 19, 20253 mins
Artificial IntelligenceGenerative AITechnology Industry
feature
How AI changes the data analyst role By Carl PerrySep 19, 20256 mins
AnalyticsBusiness AnalystCareers
video
Easier Chrome browser automation with PyDoll Sep 16, 20254 mins
Python
video
How to use Rust workspaces to speed up compile times Sep 9, 20253 mins
Python
video
Getting encryption wrong (and getting it right, too) Sep 2, 20257 mins
Python
Sponsored Links
Empower your cybersecurity team with expert insights from Palo Alto Networks.
Secure AI by Design: Unleash the power of AI and keep applications, usage and data secure.
Solve your most complex IT challenges with solutions that simplify your modernization journey.
About
About Us
Advertise
Contact Us
Editorial Ethics Policy
Foundry Careers
Reprints
Newsletters
BrandPosts
Policies
Terms of Service
Privacy Policy
Cookie Policy
Copyright Notice
Member Preferences
About AdChoices
Your California Privacy Rights
Privacy Settings
Our Network
CIO
Computerworld
CSO
Network World
FacebookXYouTubeGoogle NewsLinkedIn
© 2025
FoundryCo, Inc. All Rights Reserved.