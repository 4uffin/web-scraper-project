Java Tutorial - GeeksforGeeks
Skip to content
TutorialsPythonJavaDSAML & Data ScienceInterview CornerProgramming LanguagesWeb DevelopmentCS SubjectsDevOpsSoftware and ToolsSchool LearningPractice Coding ProblemsCoursesDSA / PlacementsML & Data ScienceDevelopmentCloud / DevOpsProgramming LanguagesAll CoursesTracksLanguagesPythonCC++JavaAdvanced JavaSQLJavaScriptInterview PreparationGfG 160GfG 360System DesignCore SubjectsInterview QuestionsInterview PuzzlesAptitude and ReasoningData SciencePythonData AnalyticsComplete Data ScienceDev SkillsFull-Stack Web DevDevOpsSoftware TestingCyberSecurityToolsComputer FundamentalsAI ToolsMS Excel & Google SheetsMS Word & Google DocsMathsMaths For Computer ScienceEngineering Mathematics
DSAPractice ProblemsC C++JavaPythonJavaScriptData ScienceMachine LearningCoursesLinuxDevOpsSQLWeb DevelopmentSystem DesignAptitude
Sign In
â–²
Open In App
Java Tutorial
Last Updated :
18 Sep, 2025
Comments
Improve
Suggest changes
Like Article
Like
Report
Java is a high-level, object-oriented programming language used to build web apps, mobile applications, and enterprise software systems.Known for its Write Once, Run Anywhere capability, which means code written in Java can run on any device that supports the Java Virtual Machine (JVM).Syntax and structure is similar to C-based languages like C++ and C#. Try our ongoing free courses Java Skillup and Advance Java Skillup with weekly topic coverage, notes, daily quizzes and coding problems.Why Learn Java?Used to build Android apps, desktop and web apps, enterprise backend systems, and cloud-based software.In high demand with many job opportunities in software development.Has popular frameworks like Spring and Hibernate which makes it powerful for enterprise applications.Supports object-oriented programming for clean and reusable code.It runs on all platforms Windows, Mac, and Linux using the JVM.Top companies like Amazon, Netflix, and LinkedIn use Java.Java Hello World ProgramHere is a simple Java program that prints "Hello World".
Java
public class Geeks {
public static void main(String args[])
{
System.out.println("Hello World");
}
}
OutputHello World
Java BasicsJava basics form the foundation of your programming journey, covering essential concepts like syntax, data types, variables, loops, and conditionals.IntroductionDownload and Install JavaJDK vs JRE vs JVMIdentifiersKeywordsQuiz: Java Basics and IdentifiersData TypesVariablesOperatorsQuiz: Variables, OperatorDecision Making (if, if-else, switch, break, continue, jump)LoopsQuiz: Control Statements and LoopsProject: Number Guessing GameJava MethodsJava methods are reusable blocks of code that perform specific tasks and help organize your program. They improve code readability, reduce repetition, and make debugging easier:Introduction to MethodsStatic Methods vs Instance MethodsAccess ModifiersCommand Line ArgumentsVariable Arguments (Varargs)Quiz: MethodsJava ArraysJava arrays are containers that store multiple values of the same data type in a single variable. They provide an efficient way to manage and access collections of data using index-based positions:IntroductionDeclare and Initialize ArraysMulti-Dimensional ArraysQuiz: Java ArraysJagged ArraysArrays ClassFinal Arrays Quiz: Array Projects: Tic-Tac-Toe GameJava StringsJava Strings represent sequences of characters and are widely used in text processing. They are immutable, meaning once created, their values cannot be changed:IntroductionWhy Strings are ImmutableString ConcatenationString MethodsQuiz: String BasicsString ClassStringBuffer ClassStringBuilder ClassQuiz : String ClassesStrings vs StringBuffer vs StringBuilder Java OOP ConceptsJava follows the Object-Oriented Programming (OOP) paradigm, which organizes code into classes and objects. Core OOP principles like inheritance, encapsulation, polymorphism, and abstraction make Java modular and scalable:What are OOP Concepts?Classes and ObjectsQuiz: Classes and ObjectsConstructorsQuiz: ConstructorsObject ClassAbstractionEncapsulationInheritanceQuiz: Inheritance and AbstractionPolymorphismCompile-Time Polymorphism (Method Overloading)Runtime Polymorphism (Method Overriding)PackagesQuiz: Polymorphism and PackagesProject: Simple Banking ApplicationJava InterfacesJava interfaces define a contract that classes must follow, specifying method signatures without implementations. They enable abstraction and support multiple inheritance in Java through a clean, structured approach:InterfacesInterfaces and InheritanceClass vs InterfaceQuiz: InterfacesFunctional InterfaceNested InterfaceMarker InterfaceComparator InterfaceQuiz: Interface types and ComparatorProject: Employee Management SystemJava CollectionsJava Collections provide a framework for storing and manipulating groups of objects efficiently. It includes interfaces like List, Set, and Map, along with classes like ArrayList, HashSet, and HashMap:Collection FrameworkCollections ClassCollection InterfaceQuiz: CollectionList InterfaceArrayListLinkedListQuiz: List, ArrayList, LinkedListSet InterfaceHashSetTreeSetQuiz: Set and HashSetQueue InterfacePriority Queue Deque InterfaceMap InterfaceHashMapQuiz:Queue and Map InterfaceIteratorComparator InterfaceComparable InterfaceQuiz: Iterators, Comparator vs ComparableProject: Face Detection SystemJava Exception Handlingava Exception Handling is a mechanism to handle runtime errors, ensuring the program runs smoothly without crashing. It uses keywords like try, catch, throw, throws, and finally to manage exceptions:ExceptionsChecked vs Unchecked ExceptionsTry Catch BlockQuiz: Java ExceptionsFinal, Finally and FinalizeThrow and ThrowsCustomized Exception HandlingChained ExceptionsNull Pointer ExceptionsException Handling with Method OverridingQuiz: Exception HandlingJava MultithreadingJava Multithreading allows concurrent execution of two or more threads, enabling efficient CPU utilization and faster program performance. It is commonly used for tasks that required parallel processing and responsiveness from multiple ends.MultithreadingThreadsThread ClassRunnable InterfaceQuiz: Thread Basics and LifecycleLifecycle and States of a ThreadMain ThreadThread Priority in MultithreadingNaming & Feteching Name of Current ThreadThread.start() vs Thread.run() MethodThread.sleep() MethodDaemon ThreadQuiz: Thread Methods and Daemon ThreadsThread SafetyThread PoolsProject: Snake GameJava File HandlingJava File Handling enables programs to create, read, write, and manipulate files stored on the system. It uses classes from the java.io and java.nio packages for efficient file operations:File HandlingFile ClassCreate FilesRead FilesQuiz:File HandlingWrite on FilesDelete FileFileReader ClassFileWriter ClassQuiz:File WritingFilePermission ClassFileDescriptor ClassJava Streams and Lambda ExpressionsJava Streams and Lambda Expressions simplify data processing by enabling functional-style operations on collections. Lambdas provide concise syntax for anonymous functions, while Streams allow efficient filtering, mapping, and reduction of data:Lambda ExpressionsMethod ReferencesJava Stream - Complete TutorialQuiz:Lambda Expressions and StreamsJava 8 Features - Complete TutorialJava IOJava IO (Input/Output) provides a set of classes and streams to read and write data from various sources like files, consoles, and network connections. It is part of the java.io package and supports both byte and character streams:Introduction to Java IOReader ClassWriter ClassFileInput StreamQuiz: IO BasicsFileOutput StreamBufferedReader Input StreamBufferedReader Output streamBufferedReader vs ScannerFast I/OQuiz: BufferedReader vs Scanner and Fast I/OProject: Text EditorJava SynchronizationJava Synchronization is used to control access to shared resources in multithreaded environments. It ensures that only one thread can access a critical section at a time, preventing data inconsistency:Java SynchronizationImportance of Thread SynchronizationMethod and Block SynchronizationQuiz: Synchronization BasicsAtomic vs Volatile vs Synchronized Local Frameworks vs Thread SynchronizationDeadlock in MultithreadingQuiz: Deadlocks and SynchronizationDeadlock Prevention and AvoidanceLock vs Monitor in ConcurrencyReentrant LockQuiz: Concurrency Locks and Reentrant LocksJava RegexJava Regex (Regular Expressions) allows pattern matching and text manipulation using the java.util.regex package. It is powerful for validating, searching, and replacing strings based on specific patterns:What is Java Regex?Pattern ClassMatcher ClassCharacter ClassQuiz: Regex Basics and Pattern MatchingQuantifiersJava NetworkingJava Networking enables communication between devices over a network using classes from the java.net package. It supports protocols like TCP and UDP for building client-server applications and data exchange:Introduction to Java NetworkingTCP ArchitectureUDP ArchitectureIPV4 vs IPV6Quiz: Networking Basics and ProtocolsConnection-Oriented vs Connectionless ProtocolsSocket ProgrammingServer Socket ClassQuiz: Sockets and Server CommunicationURL Class and MethodsProject: Chat ApplicationJava Database Connectivity(JDBC)Introduction to Java JDBCJDBC DriverJDBC ConnectionTypes of Statements in JDBCQuiz: JDBCJava Memory AllocationJava Memory Allocation refers to how memory is assigned to variables, objects, and classes during program execution. It involves stack and heap memory, with the JVM managing allocation and garbage collection automatically:Java Memory ManagementHow Java Objects Stored in Memory?Quiz: Java Memory AllocationStack vs Heap Memory AllocationQuiz: Heap vs StackJava Virtual Machine(JVM) Stack AreaTypes of Memory Areas Allocated by JVMGarbage CollectionQuiz: JVM Memory Management and Garbage CollectionTypes of JVM Garbage CollectorsHeap and Stack Memory AllocationMemory LeaksJava Interview QuestionsPrepare for Java interviews with these commonly asked questions, covering core concepts, OOP, collections, multithreading, exception handling, and frameworks like Spring and Hibernate:200+ Core Java Interview Questions and AnswersJava MCQImportant LinksComparison of various programming languagesCompanies That Use JavaCareers & Jobs in JavaJava PracticeJava Exercises â€“ Basic to Advanced Java Practice ProgramsJava Coding Practice ProblemsJava Language MCQs with Answers
Introduction to Java
Visit Course
Introduction to Java
Writing First Program in Java
Variables and Primitive DataTypes
Non Primitive DataTypes
Type Conversion in Java
Input in Java
Comment
More info
K
kartik
Follow
Improve
Article Tags :
Java
Tutorials
Explore
Java BasicsIntroduction to Java4 min readJava Programming Basics9 min readJava Methods7 min readAccess Modifiers in Java6 min readArrays in Java7 min readJava Strings8 min readRegular Expressions in Java7 min readOOP & InterfacesClasses and Objects in Java10 min readAccess Modifiers in Java6 min readJava Constructors10 min readJava OOP(Object Oriented Programming) Concepts10 min readJava Packages7 min readJava Interface11 min readCollectionsCollections in Java12 min readCollections Class in Java13 min readCollection Interface in Java6 min readIterator in Java5 min readJava Comparator Interface6 min readException HandlingJava Exception Handling8 min readJava Try Catch Block4 min readJava final, finally and finalize4 min readChained Exceptions in Java3 min readNull Pointer Exception in Java5 min readException Handling with Method Overriding in Java4 min readJava AdvancedJava Multithreading Tutorial3 min readSynchronization in Java10 min readFile Handling in Java4 min readJava Method References9 min readJava 8 Stream Tutorial7 min readJava Networking15+ min readJDBC Tutorial5 min readJava Memory Management4 min readGarbage Collection in Java6 min readMemory Leaks in Java3 min readPractice JavaJava Interview Questions and Answers15+ min readJava Programs - Java Programming Examples8 min readJava Exercises - Basic to Advanced Java Practice Programs with Solutions5 min readJava Quiz | Level Up Your Java Skills1 min readTop 50 Java Project Ideas For Beginners and Advanced [Update 2025]15+ min read
Like
Corporate & Communications Address:
A-143, 7th Floor, Sovereign Corporate Tower, Sector- 136, Noida, Uttar Pradesh (201305)
Registered Address:
K 061, Tower K, Gulshan Vivante Apartment, Sector 137, Noida, Gautam Buddh Nagar, Uttar Pradesh, 201305
CompanyAbout UsLegalPrivacy PolicyContact UsAdvertise with usGFG Corporate SolutionCampus Training ProgramExplorePOTDJob-A-ThonCommunityBlogsNation Skill UpTutorialsProgramming LanguagesDSAWeb TechnologyAI, ML & Data ScienceDevOpsCS Core SubjectsInterview PreparationGATESoftware and ToolsCoursesIBM CertificationDSA and PlacementsWeb DevelopmentProgramming LanguagesDevOps & CloudGATETrending TechnologiesVideosDSAPythonJavaC++Web DevelopmentData ScienceCS SubjectsPreparation CornerAptitudePuzzlesGfG 160DSA 360System Design
@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved
Improvement
Suggest changes
Suggest Changes
Help us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.
Create Improvement
Enhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.
Suggest Changes
min 4 words, max Words Limit:1000
Thank You!
Your suggestions are valuable to us.
What kind of Experience do you want to share?
Interview Experiences
Admission Experiences
Career Journeys
Work Experiences
Campus Experiences
Competitive Exam Experiences