field-sizing | CSS-Tricks
Skip to main content
CSS-Tricks
Articles
Notes
Links
Guides
Almanac
Picks
Shuffle
Search
forms
CSS Almanac → Properties → F → field-sizing
field-sizing
Geoff Graham
on
Dec 23, 2024
Get affordable and hassle-free WordPress hosting plans with Cloudways — start your free trial today.
Experimental: Check browser support before using this in production.
The CSS field-sizing property allows certain form controls — such as inputs, select, and textareas — to automatically grow as big as the text inside it is. All it takes is a single declaration with the content value.
input,
select,
textarea {
field-sizing: content;
}
CodePen Embed Fallback
That’s the job it does. Without it, form controls will display scrollbars or allow the text inside to overflow the space.
CodePen Embed Fallback
Syntax
field-sizing: [ fixed | content ];
Initial value: fixed
Applies to: elements with default preferred size
Inherited: no
Computed value: as specified
Animation: discrete
Values
The field-sizing property accepts one of two values:
fixed: This is the default value. Form fields will remain at a fixed size and will not adapt to be as big as the content they contain. If the content exceeds the fixed space, the field will display scrollbars to indicate more content.
content: Form fields will grow and shrink according to the entered value. They grow as wide as needed, as the text changes the form control’s intrinsic size. For example, if the <form> element is set to a maximum width of 500px, that doesn’t prevent the form control from growing and the control will either cause the form itself to grow wider, or the control will overflow the space.
Inputs
The following types of form inputs support the form-sizing property:
Text (<input type="text">)
Numeric (<input type="number">)
Email (<input type="email">)
File (<input type="file">)
Password (<input type="password">)
Search (<input type="search">)
Telephone (<input type="tel">
URL (<input type="url">)
It’s worth noting that an input’s placeholder value is considered content and affects its overall size.
CodePen Embed Fallback
Regarding file inputs, those are adjusted according to the length of the selected filename. So, for example, the field grows depending on whether the name of the file is long or short.
CodePen Embed Fallback
Select menus
The form-sizing property is also supported by <select> menus, including ones that allow multiple selections:
<select name="select" id="select">
<option value="0">Change selection</option>
<option value="1">Small</option>
<option value="2">Medium text</option>
<option value="3">Super duper extra-long text</option>
</select>
<select multiple name="select-multiple" id="select-multiple">
<option value="0">Multiple selections</option>
<option value="1">Small</option>
<option value="2">Medium text</option>
<option value="3">Super duper extra-long text</option>
</select>
size and field-sizing
Don’t we already have a way to control the size of form inputs and other form controls? Yes, we do! We can slap the size attribute on them to define a specific size. For example:
<input type="text" placeholder="This is a text input" size="200">
The only problem is that size is only supported on certain types of inputs. That means something like a numeric input does not respect the size attribute:
<!-- Nope! -->
<input type="number" placeholder="This is a numeric input" size="200">
Same thing with the <textarea> element. Those are sized in columns (cols) and rows (rows):
<textarea name="textarea" id="textarea" cols="30" rows="10"></textarea>
Adding size to a <select> menu turns it from a normal dropdown menu into showing the options. It looks the same as <select multiple> but still only allows you to select one <option> at a time.
<!-- Displays options rather than a dropdown menu
-->
<select name="select" id="select" size="4">
<option value="0">size=
"4"</option>
<option value="1">Small</option>
<option value="2">Medium text</option>
<option value="3">Super duper extra-long text</option>
</select>
<!-- Different than using the `multiple` attribute -->
<!-- Displays options rather than a dropdown menu
-->
<select multiple name="select-multiple" id="select-multiple">
<option value="0">size=
"4"</option>
<option value="1">Small</option>
<option value="2">Medium text</option>
<option value="3">Super duper extra-long text</option>
</select>
That’s why we need a property like field-sizing. Yes, we’ve been able to set the sizes of form controls, but only now can we do it directly in CSS, and it’s only one line of code!
CodePen Embed Fallback
width and field-sizing
We also have existing ways to set a size on any element in CSS, such as the width property.
input[type="text"] {
width: 250px;
}
And the min-width and max-width properties:
input[type="text"] {
min-width: 250px;
max-width: 500px;
}
We could make that a little more intelligent with the min() or max() functions:
input[type="text"] {
width: min(250px, 500px);
}
Or we could clamp() the width between those two sizes combined with an ideal size:
input[type="text"] {
width: clamp(250px, 50%, 500px);
}
You get the idea. There’s lots of ways to size things in CSS! But we might get some unexpected results when we combine width with field-sizing. Starting with a fixed width, you’ll see that input stops growing at the fixed point:
Comparing the behavior of field-sizing with the width property set to a fixed size of 250px.
It’s the same thing when trying to set any kind of max-width on the form control, whether that’s with the max-width property, the min() or max() functions, or the clamp() function. The input stops growing wider as soon as it reaches that constraint. We might start growing, but once that fixed point is reached, things come to a head:
Comparing the behavior of field-sizing with the width property set to a size of min(50%, 500px).
Here’s a weird one. Instead of setting a fixed width of, say, width: 250px, let’s try using a percentage, like width: 50%. Nothing different just yet:
Comparing the behavior of field-sizing with the width property set to a size of 50%.
But look what happens when we set a fixed width on the <form> element that contains the input. Here it is with the <form> set to width: 500px and the input set to width: 50%:
See that?! The input’s intrinsic size becomes wider than the form’s fixed size, causing the form to grow wider with the input. That’s something to beware of when sizing your form elements with inputs that use field-sizing.
All of this begs the question: What exactly is a good set of default sizes for inputs? That all depends on the design you’re working with, of course, but Adam Argyle has done some of the work for you in a Chrome Developers article. Your mileage may vary, but it’s nice to have a starting point!
textarea {
min-block-size: 3.5rlh;
min-inline-size: 20ch;
max-inline-size: 50ch;
}
select {
min-inline-size: 5ch;
min-block-size: 1.5lh;
}
input {
min-inline-size: 7ch;
}
Specification
The field-sizing property is defined in the CSS Basic User Interface Module Level 4 specification, which is in Editor’s Draft status at the time of writing. That means the information can change between now and when the specification becomes adopted as a Candidate Recommendation.
Browser support
Browsers that do not support field-sizing: content will continue to size fields as though they are fixed, so it is reasonably safe to use this property in production as a form of progressive enhancement.
Related tricks!
The following articles cover older, alternative approaches for auto-sized form controls without using the field-sizing property.
Article
on
Mar 25, 2020
Auto-Growing Inputs & Textareas
forms inputs
Chris Coyier
Article
on
Nov 11, 2020
The Cleanest Trick for Autogrowing Textareas
grid textarea
Chris Coyier
At-Rules
A
B
C
@charset
@color-profile
@container
@counter-style
D
E
F
@font-face
@font-feature-values
@font-palette-values
G
H
I
@import
J
K
@keyframes
L
@layer
M
@media
color-gamut
prefers-reduced-motion
N
@namespace
O
P
@page
@position-try
@property
Q
R
S
@scope
@starting-style
@supports
T
U
V
@view-transition
W
X
Y
Z
Functions
A
anchor()
anchor-size()
attr()
B
C
calc-size()
circle()
clamp()
color()
color-mix()
conic-gradient()
counter()
counters()
cubic-bezier()
D
E
ellipse()
env()
exp()
F
fit-content()
G
H
hsl()
I
image()
image-set()
inset()
J
K
L
lab()
lch()
light-dark()
linear()
linear-gradient()
M
matrix()
max()
min()
minmax()
mod()
N
O
oklab()
oklch()
P
path()
polygon()
Q
R
radial-gradient()
random()
rem()
repeating-conic-gradient()
repeating-linear-gradient()
repeating-radial-gradient()
rgb()
round()
S
scroll()
shape()
sibling-count()
sibling-index()
steps()
symbols()
T
U
url()
V
view()
W
X
xywh()
Y
Z
Properties
A
accent-color
align-content
align-items
align-self
all
anchor-name
anchor-scope
animation
animation-timeline
appearance
aspect-ratio
B
backdrop-filter
backface-visibility
background
background-attachment
background-clip
background-color
background-image
background-origin
background-position
background-repeat
background-size
background-blend-mode
bleed
block-overflow
block-size
border
border-block
border-inline
border-boundary
border-collapse
border-image
border-image-outset
border-image-repeat
border-image-slice
border-image-source
border-image-width
border-radius
border-spacing
bottom
box-decoration-break
box-shadow
box-sizing
break-after
break-before
break-inside
C
caption-side
caret
caret-color
caret-shape
clear
clip-path
color
color-scheme
column-count
column-fill
column-rule
column-rule-color
column-rule-style
column-rule-width
column-span
column-width
columns
contain
container
container-name
container-type
content
content-visibility
counter-increment
counter-reset
counter-set
cursor
D
direction
display
E
empty-cells
F
field-sizing
fill
filter
flex
flex-basis
flex-direction
flex-flow
flex-grow
flex-shrink
flex-wrap
float
font
font-family
font-size
font-stretch
font-style
font-variant
font-weight
font-display
font-feature-settings
font-kerning
font-optical-sizing
font-palette
font-size-adjust
font-synthesis
font-variant-alternates
font-variant-emoji
font-variant-numeric
G
gap
column-gap
row-gap
grid
grid-auto-columns
grid-auto-flow
grid-auto-rows
grid-template
grid-template-areas
grid-template-columns
grid-template-rows
grid-area
grid-column
grid-column-end
grid-column-start
grid-row
grid-row-end
grid-row-start
grid-row / grid-column
H
hanging-punctuation
height
hyphenate-character
hyphenate-limit-chars
hyphens
I
image-rendering
initial-letter
inline-size
inset
inset-block
inset-block-end
inset-block-start
inset-inline
inset-inline-end
inset-inline-start
interpolate-size
isolation
J
justify-content
justify-items
justify-self
K
L
left
letter-spacing
line-break
line-clamp
line-height
list-style
M
margin
margin-block
margin-block-end
margin-block-start
margin-inline
margin-inline-end
margin-inline-start
margin-trim
mask
mask-clip
mask-composite
mask-image
mask-mode
mask-origin
mask-position
mask-repeat
mask-size
mask-border
mask-type
max-height
max-inline-size
max-width
min-height
min-width
mix-blend-mode
N
O
object-fit
object-position
offset-anchor
offset-distance
offset-path
offset-rotate
opacity
order
orphans
outline
outline-color
outline-style
outline-width
outline-offset
overflow
overflow-anchor
overflow-clip-margin
overflow-wrap
overlay
overscroll-behavior
P
padding
padding-block
padding-inline
page-break
paint-order
perspective
perspective-origin
place-content
place-items
place-self
pointer-events
position
position-anchor
position-area
position-try-fallbacks
position-try-order
position-visibility
print-color-adjust
Q
quotes
R
resize
right
rotate
S
scale
scroll-behavior
scroll-margin
scroll-marker-group
scroll-padding
scroll-snap-align
scroll-snap-stop
scroll-snap-type
scrollbar
scrollbar-color
scrollbar-gutter
scrollbar-width
shape-image-threshold
shape-margin
shape-outside
speak
stroke
stroke-dasharray
stroke-dashoffset
stroke-linecap
stroke-linejoin
stroke-width
T
tab-size
table-layout
text-align
text-align-last
text-box
text-box-edge
text-box-trim
text-combine-upright
text-decoration
text-decoration-color
text-decoration-line
text-decoration-style
text-decoration-thickness
text-decoration-skip
text-decoration-skip-ink
text-emphasis
text-indent
text-justify
text-orientation
text-overflow
text-rendering
text-shadow
text-stroke
text-transform
text-underline-offset
text-underline-position
text-wrap-mode
text-wrap-style
top / bottom / left / right
touch-action
transform
transform-origin
transform-style
transition
transition-behavior
transition-delay
transition-duration
transition-property
transition-timing-function
translate
U
unicode-bidi
unicode-range
user-select
V
vertical-align
view-timeline-name
view-transition-name
visibility
W
white-space
widows
width
will-change
word-break
word-spacing
writing-mode
X
Y
Z
z-index
zoom
Pseudo-Selectors
A
:active
:any-link
:autofill
B
::backdrop
::before / ::after
:blank
C
:checked
:current
D
::details-content
:default
:defined
:dir()
:disabled
E
:empty
:enabled
F
::file-selector-button
::first-letter
::first-line
:first
:first-child
:first-of-type
:focus
:focus-visible
:focus-within
:fullscreen
:future
G
H
:has()
:hover
I
:in-range
:indeterminate
:invalid
:is
J
K
L
:lang()
:last-child
:last-of-type
:left
:link
M
::marker
N
:not
:nth-child
:nth-last-child
:nth-last-of-type
:nth-of-type
O
:only-child
:only-of-type
:open
:optional
:out-of-range
P
::placeholder
:past
:placeholder-shown
:popover-open
Q
R
:read-write / :read-only
:required
:right
:root
S
::scroll-button()
::scroll-marker
::scroll-marker-group
::selection
T
::target-text
:target
:target-current
U
:user-invalid
V
::view-transition
::view-transition-group
::view-transition-image-new
::view-transition-image-old
::view-transition-image-pair
:valid
:visited
W
:where
X
Y
Z
Selectors
A
Adjacent sibling
[attribute]
B
C
Chained
Child
Class
D
Descendant
E
F
G
General sibling
H
I
ID
J
K
L
M
N
O
P
Q
R
S
T
Type
U
Universal
V
W
X
Y
Z
TOC
Syntax
Values
Inputs
Select menus
size and field-sizing
width and field-sizing
Specification
Browser support
Related tricks!
Psst! Create a DigitalOcean account and get $200 in free credit for cloud-based hosting and services.
This comment thread is closed. If you have important information to share, please contact us.
CSS-Tricks is powered by DigitalOcean.
Keep up to date on web dev
with our hand-crafted newsletter
DigitalOcean
About DO
Cloudways
Legal stuff
Get free credit!
CSS-Tricks
Contact
Write for CSS-Tricks!
Advertise with us
Social
RSS Feeds
CodePen
Mastodon
Bluesky
Back to Top