scroll-marker-group | CSS-Tricks
Skip to main content
CSS-Tricks
Articles
Notes
Links
Guides
Almanac
Picks
Shuffle
Search
CSS Almanac → Properties → S → scroll-marker-group
scroll-marker-group
Daniel Schwarz
on
May 28, 2025
Get affordable and hassle-free WordPress hosting plans with Cloudways — start your free trial today.
Experimental: Check browser support before using this in production.
The scroll-marker-group CSS property determines if the ::scroll-marker-group pseudo-element is generated within the scroll container that the property is set on, and where. When creating scroll markers, you’re required to set scroll-marker-group to either before or after, although there are other requirements, too.
Scroll markers can be used to create CSS carousels, tabs, scroll-snapping components, and other scroll-based components. While by no means a fully-functioning component, a scroll container with overflow content would look something like this:
<ul class="scroll-container">
<li class="scroll-target"></li>
<li class="scroll-target"></li>
<li class="scroll-target"></li>
<li class="scroll-target"></li>
<li class="scroll-target"></li>
</ul>
.scroll-container {
scroll-marker-group: before;
&::scroll-marker-group {
/* ... */
}
.scroll-target::scroll-marker {
/* ... */
}
}
And then the resulting HTML (if you were to inspect it in DevTools) would look something like this:
<ul class="scroll-container">
<::scroll-marker-group>
<!-- Five scroll markers -->
<::scroll-marker>
<::scroll-marker>
<::scroll-marker>
<::scroll-marker>
<::scroll-marker>
</::scroll-marker-group>
<!-- Five scroll targets -->
<li class="scroll-target"></li>
<li class="scroll-target"></li>
<li class="scroll-target"></li>
<li class="scroll-target"></li>
<li class="scroll-target"></li>
</ul>
If you were to click on the third scroll marker, you’d be scrolled to the third scroll target in a scroll-snapping manner, all-in-all providing users with an additional way to navigate overflow content. Scroll markers are fully accessible, too. Users can navigate them using keyboards and assistive technologies, and screen readers are also able to decipher them quite easily.
Syntax
scroll-marker-group: <position>;
Values: none | before | after
Initial: none
Applies to: scroll containers
Inherited: no
Computed value: as specified
Animation type: discrete
Values
The <position> can be one of the following values:
none (default): Don’t generate ::scroll-marker-group.
before: Generate ::scroll-marker-group at the beginning of the scroll container (has the same effect as ::before).
after: Generate ::scroll-marker-group at the end of the scroll container (has the same effect as ::after).
The before and after values determine the tab order of the scroll markers that get generated within ::scroll-marker-group. The before value ensures that the scroll markers come before the scroll container’s content in the tab order, and after ensures that they come after. They also determine the ::scroll-marker-group’s layout box order, but this hardly matters as you’ll likely be anchor-positioning it relative to the scroll container anyway.
Basic usage
To use scroll markers, start with a scroll container with overflow content inside (e.g., a carousel where only one slide is shown at a time and the rest are “cut off”). The overflow property must be set to anything other than visible; otherwise the ::scroll-marker-group pseudo-element simply won’t show up.
And, of course, you’ll need to set scroll-marker-group to either before or after depending on the desired tab order.
Finally, each scroll target’s ::scroll-marker must have a valid content property.
If these requirements have been met, you’ll have a fully-functional scroll container with accessible scroll markers.
<ul class="scroll-container">
<li class="scroll-target"></li>
<li class="scroll-target"></li>
<li class="scroll-target"></li>
<li class="scroll-target"></li>
<li class="scroll-target"></li>
</ul>
.scroll-container {
overflow-x: hidden; /* Anything but visible */
scroll-marker-group: after; /* before | after */
&::scroll-marker-group {
/* ... */
}
.scroll-target::scroll-marker {
content: ""; /* Any valid value */
}
}
Example: Carousel
In the carousel example below, the ::scroll-marker-group pseudo-element uses anchor positioning to position itself relative to the scroll container, which is probably the best way to go about it, but any method of alignment should work fine. And since the scroll markers are positioned at the bottom, the scroll-marker-group property is set to after, ensuring that the tab order matches this visual order.
In addition, Flexbox is used to lay out the scroll markers.
CodePen Embed Fallback
<ul class="carousel">
<li style="background:hsl(10 70% 50%)"></li>
<li style="background:hsl(30 70% 50%)"></li>
<li style="background:hsl(50 70% 50%)"></li>
<li style="background:hsl(70 70% 50%)"></li>
<li style="background:hsl(90 70% 50%)"></li>
</ul>
.carousel {
/* The width */
--carousel-width: 100vw;
width: var(--carousel-width);
/* The height is half the width */
aspect-ratio: 1 / 0.5;
/* Implies flex-direction: row */
display: flex;
li {
/* Give carousel items the same width */
width: var(--carousel-width);
/* Prevent flexbox from overwriting said width */
flex-shrink: 0;
}
/* Show only one carousel item */
overflow: hidden;
/* Turn the carousel into an anchor */
anchor-name: --carousel;
/* Enable smooth scrolling */
scroll-behavior: smooth;
/* Place after the content */
scroll-marker-group: after;
&::scroll-marker-group {
/* Space the markers apart */
display: flex;
gap: 10px;
/* Anchor it to the carousel */
position: fixed;
position-anchor: --carousel;
/* Anchor it horizontally */
justify-self: anchor-center;
/* Anchor it near the bottom */
bottom: calc(anchor(bottom) + 10px);
}
li::scroll-marker {
/* Stylized markers */
content: "";
width: 10px;
height: 10px;
border-radius: 10px;
border: 1px solid black;
}
/* The currently selected marker */
li::scroll-marker:target-current {
background: black;
}
}
Example: Tabs
In the example below, scroll-marker-group is set to before this time, because the scroll markers (presented as tabs) appear before the scroll container’s content.
CodePen Embed Fallback
Knowing when to use before and when to use after is very clear-cut. In the example below where ::scroll-marker-group is aligned to the right, it’s still quite obvious that scroll-marker-group: after is correct (if the writing mode is left-to-right, that is).
CodePen Embed Fallback
Browser support
We can detect browser support for it, if needed:
@supports (scroll-marker-group: before) {
/* scroll-marker-group supported */
}
@supports not (scroll-marker-group: before) {
/* scroll-marker-group not supported */
}
The same thing in JavaScript:
if (CSS.supports("scroll-marker-group: before")) {
/* scroll-marker-group supported */
}
if (!CSS.supports("scroll-marker-group: before")) {
/* scroll-marker-group not supported */
}
Specification
The scroll-marker-group property is defined in the CSS Overflow Module Level 5 specification, which is currently in Working Draft status. This means that the information can change between now and the time when it becomes adopted as a formal Candidate Recommendation for browsers to implement.
More information
Article
on
Apr 9, 2025
CSS Carousels
carousel
Geoff Graham
At-Rules
A
B
C
@charset
@color-profile
@container
@counter-style
D
E
F
@font-face
@font-feature-values
@font-palette-values
G
H
I
@import
J
K
@keyframes
L
@layer
M
@media
color-gamut
prefers-reduced-motion
N
@namespace
O
P
@page
@position-try
@property
Q
R
S
@scope
@starting-style
@supports
T
U
V
@view-transition
W
X
Y
Z
Functions
A
anchor()
anchor-size()
attr()
B
C
calc-size()
circle()
clamp()
color()
color-mix()
conic-gradient()
counter()
counters()
cubic-bezier()
D
E
ellipse()
env()
exp()
F
fit-content()
G
H
hsl()
I
image()
image-set()
inset()
J
K
L
lab()
lch()
light-dark()
linear()
linear-gradient()
M
matrix()
max()
min()
minmax()
mod()
N
O
oklab()
oklch()
P
path()
polygon()
Q
R
radial-gradient()
random()
rem()
repeating-conic-gradient()
repeating-linear-gradient()
repeating-radial-gradient()
rgb()
round()
S
scroll()
shape()
sibling-count()
sibling-index()
steps()
symbols()
T
U
url()
V
view()
W
X
xywh()
Y
Z
Properties
A
accent-color
align-content
align-items
align-self
all
anchor-name
anchor-scope
animation
animation-timeline
appearance
aspect-ratio
B
backdrop-filter
backface-visibility
background
background-attachment
background-clip
background-color
background-image
background-origin
background-position
background-repeat
background-size
background-blend-mode
bleed
block-overflow
block-size
border
border-block
border-inline
border-boundary
border-collapse
border-image
border-image-outset
border-image-repeat
border-image-slice
border-image-source
border-image-width
border-radius
border-spacing
bottom
box-decoration-break
box-shadow
box-sizing
break-after
break-before
break-inside
C
caption-side
caret
caret-color
caret-shape
clear
clip-path
color
color-scheme
column-count
column-fill
column-rule
column-rule-color
column-rule-style
column-rule-width
column-span
column-width
columns
contain
container
container-name
container-type
content
content-visibility
counter-increment
counter-reset
counter-set
cursor
D
direction
display
E
empty-cells
F
field-sizing
fill
filter
flex
flex-basis
flex-direction
flex-flow
flex-grow
flex-shrink
flex-wrap
float
font
font-family
font-size
font-stretch
font-style
font-variant
font-weight
font-display
font-feature-settings
font-kerning
font-optical-sizing
font-palette
font-size-adjust
font-synthesis
font-variant-alternates
font-variant-emoji
font-variant-numeric
G
gap
column-gap
row-gap
grid
grid-auto-columns
grid-auto-flow
grid-auto-rows
grid-template
grid-template-areas
grid-template-columns
grid-template-rows
grid-area
grid-column
grid-column-end
grid-column-start
grid-row
grid-row-end
grid-row-start
grid-row / grid-column
H
hanging-punctuation
height
hyphenate-character
hyphenate-limit-chars
hyphens
I
image-rendering
initial-letter
inline-size
inset
inset-block
inset-block-end
inset-block-start
inset-inline
inset-inline-end
inset-inline-start
interpolate-size
isolation
J
justify-content
justify-items
justify-self
K
L
left
letter-spacing
line-break
line-clamp
line-height
list-style
M
margin
margin-block
margin-block-end
margin-block-start
margin-inline
margin-inline-end
margin-inline-start
margin-trim
mask
mask-clip
mask-composite
mask-image
mask-mode
mask-origin
mask-position
mask-repeat
mask-size
mask-border
mask-type
max-height
max-inline-size
max-width
min-height
min-width
mix-blend-mode
N
O
object-fit
object-position
offset-anchor
offset-distance
offset-path
offset-rotate
opacity
order
orphans
outline
outline-color
outline-style
outline-width
outline-offset
overflow
overflow-anchor
overflow-clip-margin
overflow-wrap
overlay
overscroll-behavior
P
padding
padding-block
padding-inline
page-break
paint-order
perspective
perspective-origin
place-content
place-items
place-self
pointer-events
position
position-anchor
position-area
position-try-fallbacks
position-try-order
position-visibility
print-color-adjust
Q
quotes
R
resize
right
rotate
S
scale
scroll-behavior
scroll-margin
scroll-marker-group
scroll-padding
scroll-snap-align
scroll-snap-stop
scroll-snap-type
scrollbar
scrollbar-color
scrollbar-gutter
scrollbar-width
shape-image-threshold
shape-margin
shape-outside
speak
stroke
stroke-dasharray
stroke-dashoffset
stroke-linecap
stroke-linejoin
stroke-width
T
tab-size
table-layout
text-align
text-align-last
text-box
text-box-edge
text-box-trim
text-combine-upright
text-decoration
text-decoration-color
text-decoration-line
text-decoration-style
text-decoration-thickness
text-decoration-skip
text-decoration-skip-ink
text-emphasis
text-indent
text-justify
text-orientation
text-overflow
text-rendering
text-shadow
text-stroke
text-transform
text-underline-offset
text-underline-position
text-wrap-mode
text-wrap-style
top / bottom / left / right
touch-action
transform
transform-origin
transform-style
transition
transition-behavior
transition-delay
transition-duration
transition-property
transition-timing-function
translate
U
unicode-bidi
unicode-range
user-select
V
vertical-align
view-timeline-name
view-transition-name
visibility
W
white-space
widows
width
will-change
word-break
word-spacing
writing-mode
X
Y
Z
z-index
zoom
Pseudo-Selectors
A
:active
:any-link
:autofill
B
::backdrop
::before / ::after
:blank
C
:checked
:current
D
::details-content
:default
:defined
:dir()
:disabled
E
:empty
:enabled
F
::file-selector-button
::first-letter
::first-line
:first
:first-child
:first-of-type
:focus
:focus-visible
:focus-within
:fullscreen
:future
G
H
:has()
:hover
I
:in-range
:indeterminate
:invalid
:is
J
K
L
:lang()
:last-child
:last-of-type
:left
:link
M
::marker
N
:not
:nth-child
:nth-last-child
:nth-last-of-type
:nth-of-type
O
:only-child
:only-of-type
:open
:optional
:out-of-range
P
::placeholder
:past
:placeholder-shown
:popover-open
Q
R
:read-write / :read-only
:required
:right
:root
S
::scroll-button()
::scroll-marker
::scroll-marker-group
::selection
T
::target-text
:target
:target-current
U
:user-invalid
V
::view-transition
::view-transition-group
::view-transition-image-new
::view-transition-image-old
::view-transition-image-pair
:valid
:visited
W
:where
X
Y
Z
Selectors
A
Adjacent sibling
[attribute]
B
C
Chained
Child
Class
D
Descendant
E
F
G
General sibling
H
I
ID
J
K
L
M
N
O
P
Q
R
S
T
Type
U
Universal
V
W
X
Y
Z
TOC
Syntax
Values
Basic usage
Example: Carousel
Example: Tabs
Browser support
Specification
More information
Psst! Create a DigitalOcean account and get $200 in free credit for cloud-based hosting and services.
This comment thread is closed. If you have important information to share, please contact us.
CSS-Tricks is powered by DigitalOcean.
Keep up to date on web dev
with our hand-crafted newsletter
DigitalOcean
About DO
Cloudways
Legal stuff
Get free credit!
CSS-Tricks
Contact
Write for CSS-Tricks!
Advertise with us
Social
RSS Feeds
CodePen
Mastodon
Bluesky
Back to Top