::scroll-button() | CSS-Tricks
Skip to main content
CSS-Tricks
Articles
Notes
Links
Guides
Almanac
Picks
Shuffle
Search
CSS Almanac → Pseudo-Selectors → S → ::scroll-button()
::scroll-button()
Daniel Schwarz
on
May 6, 2025
Get affordable and hassle-free WordPress hosting plans with Cloudways — start your free trial today.
Experimental: Check browser support before using this in production.
The ::scroll-button() pseudo-element adds accessible scroll buttons to scroll containers, giving users an additional way to navigate overflow content. To create a scroll button, simply specify a scroll direction while using the pseudo-element, and then declare the button’s content using the content property.
.carousel::scroll-button(right) {
content: "⮕";
}
When a user clicks on a scroll button, they’ll scroll roughly 85% of the scroll container’s scrollport (assuming that nothing interferes with it, such as scroll snapping). All four scroll buttons are optional, so if you only want to allow scrolling in certain directions (e.g., left and right for a carousel), that’s totally fine.
Worried about scroll snapping? Don’t be. Scroll buttons work with CSS’s scroll snap module and other scroll-based features. Alternatively, or in addition to scroll buttons, you can use ::scroll-marker() to jump to specific items in the scroller.
Plus, accessibility is baked right in. No special HTML needed.
Syntax
<scroll-container>::scroll-button(<scroll-direction>) {
content: <scroll-button-content>;
}
<scroll-container>: The scroll button will be placed inside this element and control its scroll position whenever possible. If the element isn’t a scroll container, the button will show (if it has a valid content value), but be :disabled.
<scroll-direction>:
Physical directions: up, right, down, left
Logical directions: block-start, block-end, inline-start, inline-end
<scroll-button-content>: The scroll button’s rendered content. Must be a valid value of the content property (otherwise the button won’t show).
Basic usage
/* Physical directions */
.scroll-container::scroll-button(up) {
content: "⬆︎";
}
.scroll-container::scroll-button(right) {
content: "⮕";
}
.scroll-container::scroll-button(down) {
content: "⬇︎";
}
.scroll-container::scroll-button(left) {
content: "⬅";
}
/* Logical directions */
.scroll-container::scroll-button(block-start) {
writing-mode: horizontal-tb;
content: "⬆︎";
}
.scroll-container::scroll-button(block-end) {
writing-mode: horizontal-tb;
content: "⬇︎";
}
.scroll-container::scroll-button(inline-start) {
writing-mode: horizontal-tb;
content: "⬅";
}
.scroll-container::scroll-button(inline-end) {
writing-mode: horizontal-tb;
content: "⮕";
}
Although not supported by any browser at the time of writing, we also have the next and prev buttons. These scroll buttons basically scroll forwards and backwards, respectively, along whichever axis is most scrollable, so ::scroll-button(next) would resolve to either ::scroll-button(block-end) or ::scroll-button(inline-end) and ::scroll-button(prev) would resolve to either ::scroll-button(block-start) or ::scroll-button(inline-start). If the scrollable width and scrollable height are the same, ::scroll-button(next) would resolve to ::scroll-button(block-end) and ::scroll-button(prev) would resolve to ::scroll-button(block-start).
/* block-end or inline-end */
.scroll-container::scroll-button(next) {
/* ... */
}
/* block-start or inline-start */
.scroll-container::scroll-button(prev) {
/* ... */
}
To select all scroll buttons, use the universal selector (*):
/* Select all scroll buttons */
.scroll-container::scroll-button(*) {
/* Button styles */
}
Accessibility
Accessibility is built right into these scroll buttons.
For example, you don’t need to specify alternative text for the content property because it’s done for you, although you can overwrite it. However, this might not work as you’d expect — to be specific, visual text labels don’t imply accessibility labels, so if overwriting the browser’s default accessibility label, you must specify alternative text in addition to the visual text label even if they’re the same:
.scroll-container::scroll-button(right) {
content: "⮕"; /* Announces "Scroll right" */
}
.scroll-container::scroll-button(right) {
content: "Scroll forwards"; /* Still announces "Scroll right" */
}
.scroll-container::scroll-button(right) {
/* Where content: "Visual text" / "Alt text"; */
content: "Scroll forwards" / "Scroll forwards"; /* Announces "Scroll forwards" */
content: "⮕" / "Scroll forwards"; /* Also announces "Scroll forwards" */
}
In addition to this, once the user reaches the end of the scrollable axis, the relevant scroll button is automatically disabled, both visually and accessibly.
Styling
Which brings us to the visuals of it all. To style disabled (or enabled) scroll buttons, combine the ::scroll-button() pseudo-element selector with the :disabled (or :enabled) pseudo-class:
::scroll-button(*):enabled {
/* Enabled scroll button styles */
}
::scroll-button(*):disabled {
/* Disabled scroll button styles */
}
Actually, since scroll buttons are basically <button> elements, you might want to set the cursor property for :enabled scroll buttons:
::scroll-button(*):enabled {
cursor: pointer;
}
And, again, to style all scroll buttons:
/* Universally */
::scroll-button(*) {
/* Button styles */
}
/* Within a specific container */
.scroll-container::scroll-button(*) {
/* Button styles */
}
Finally, you’ll most likely want to put scroll-behavior: smooth on the scroll container to enable smooth scrolling.
@media (prefers-reduced-motion) {
.scroll-container {
scroll-behavior: smooth;
}
}
Example: Carousel
CodePen Embed Fallback
The HTML:
<ul class="carousel">
<li></li>
<li></li>
<li></li>
<li></li>
<li></li>
</ul>
The CSS:
.carousel {
/* The width */
--carousel-width: 100vw;
width: var(--carousel-width);
/* The height is half the width */
aspect-ratio: 1 / 0.5;
/* Implies flex-direction: row */
display: flex;
/* Enable scroll snapping on the x-axis */
scroll-snap-type: x;
li {
/* Give carousel items the same width */
width: var(--carousel-width);
/* Prevent flexbox from overwriting said width */
flex-shrink: 0;
/* Instead of letting scroll buttons scroll 85% of the scrollport, scroll snap between carousel items instead */
scroll-snap-align: center;
}
/* Show only one carousel item */
overflow: hidden;
/* Turn the carousel into an anchor */
anchor-name: --carousel;
/* Enable smooth scrolling */
scroll-behavior: smooth;
/* Select all scroll buttons */
&::scroll-button(*) {
/* Anchor them to the carousel */
position-anchor: --carousel;
/* Align them vertically */
position: fixed;
align-self: anchor-center;
&:disabled {
/* Disabled styles */
}
}
/* Select the left scroll button */
&::scroll-button(left) {
/* Create the button */
content: "⬅︎";
/* Anchor the left side of the button to the left side of the carousel (offset by 10px) */
left: calc(anchor(left) + 10px);
}
/* You know what to do */
&::scroll-button(right) {
content: "⮕";
right: calc(anchor(right) + 10px);
}
}
The carousel is responsive (defined by --carousel-width).
overflow: hidden also removes the scrollbars (not a requirement).
Since we’re showing off whole carousel items, scroll-snap-align can have any value.
You can align/anchor the scroll buttons in whichever way you’d like.
Example: Vertical scroll snapping
Same thing but vertical, with different button positions, the scrollbar not hidden, and mandatory scroll snapping (since users can scroll to any point manually):
CodePen Embed Fallback
Browser support
The ::scroll-button pseudo-element is only supported in Chrome 135+ and Edge 135+ at the time of writing. We can detect browser support for it if needed:
@supports selector(::scroll-button(*)) {
/* ::scroll-button() supported */
}
@supports not selector(::scroll-button(*)) {
/* ::scroll-button() not supported */
}
The same thing in JavaScript:
if (CSS.supports("selector(::scroll-button(*))")) {
/* ::scroll-button() supported */
}
if (!CSS.supports("selector(::scroll-button(*))")) {
/* ::scroll-button() not supported */
}
Specification
The ::scroll-button() pseudo-element is defined in the CSS Overflow Module Level 5 specification, which is currently in Working Draft status. This means that the information can change between now and the time when it becomes adopted as a formal Candidate Recommendation for browsers to implement.
More information
Article
on
Apr 9, 2025
CSS Carousels
carousel
Geoff Graham
Related
Almanac
on
May 6, 2025
::scroll-marker
.element::scroll-marker { content: ""; }
Daniel Schwarz
At-Rules
A
B
C
@charset
@color-profile
@container
@counter-style
D
E
F
@font-face
@font-feature-values
@font-palette-values
G
H
I
@import
J
K
@keyframes
L
@layer
M
@media
color-gamut
prefers-reduced-motion
N
@namespace
O
P
@page
@position-try
@property
Q
R
S
@scope
@starting-style
@supports
T
U
V
@view-transition
W
X
Y
Z
Functions
A
anchor()
anchor-size()
attr()
B
C
calc-size()
circle()
clamp()
color()
color-mix()
conic-gradient()
counter()
counters()
cubic-bezier()
D
E
ellipse()
env()
exp()
F
fit-content()
G
H
hsl()
I
image()
image-set()
inset()
J
K
L
lab()
lch()
light-dark()
linear()
linear-gradient()
M
matrix()
max()
min()
minmax()
mod()
N
O
oklab()
oklch()
P
path()
polygon()
Q
R
radial-gradient()
random()
rem()
repeating-conic-gradient()
repeating-linear-gradient()
repeating-radial-gradient()
rgb()
round()
S
scroll()
shape()
sibling-count()
sibling-index()
steps()
symbols()
T
U
url()
V
view()
W
X
xywh()
Y
Z
Properties
A
accent-color
align-content
align-items
align-self
all
anchor-name
anchor-scope
animation
animation-timeline
appearance
aspect-ratio
B
backdrop-filter
backface-visibility
background
background-attachment
background-clip
background-color
background-image
background-origin
background-position
background-repeat
background-size
background-blend-mode
bleed
block-overflow
block-size
border
border-block
border-inline
border-boundary
border-collapse
border-image
border-image-outset
border-image-repeat
border-image-slice
border-image-source
border-image-width
border-radius
border-spacing
bottom
box-decoration-break
box-shadow
box-sizing
break-after
break-before
break-inside
C
caption-side
caret
caret-color
caret-shape
clear
clip-path
color
color-scheme
column-count
column-fill
column-rule
column-rule-color
column-rule-style
column-rule-width
column-span
column-width
columns
contain
container
container-name
container-type
content
content-visibility
counter-increment
counter-reset
counter-set
cursor
D
direction
display
E
empty-cells
F
field-sizing
fill
filter
flex
flex-basis
flex-direction
flex-flow
flex-grow
flex-shrink
flex-wrap
float
font
font-family
font-size
font-stretch
font-style
font-variant
font-weight
font-display
font-feature-settings
font-kerning
font-optical-sizing
font-palette
font-size-adjust
font-synthesis
font-variant-alternates
font-variant-emoji
font-variant-numeric
G
gap
column-gap
row-gap
grid
grid-auto-columns
grid-auto-flow
grid-auto-rows
grid-template
grid-template-areas
grid-template-columns
grid-template-rows
grid-area
grid-column
grid-column-end
grid-column-start
grid-row
grid-row-end
grid-row-start
grid-row / grid-column
H
hanging-punctuation
height
hyphenate-character
hyphenate-limit-chars
hyphens
I
image-rendering
initial-letter
inline-size
inset
inset-block
inset-block-end
inset-block-start
inset-inline
inset-inline-end
inset-inline-start
interpolate-size
isolation
J
justify-content
justify-items
justify-self
K
L
left
letter-spacing
line-break
line-clamp
line-height
list-style
M
margin
margin-block
margin-block-end
margin-block-start
margin-inline
margin-inline-end
margin-inline-start
margin-trim
mask
mask-clip
mask-composite
mask-image
mask-mode
mask-origin
mask-position
mask-repeat
mask-size
mask-border
mask-type
max-height
max-inline-size
max-width
min-height
min-width
mix-blend-mode
N
O
object-fit
object-position
offset-anchor
offset-distance
offset-path
offset-rotate
opacity
order
orphans
outline
outline-color
outline-style
outline-width
outline-offset
overflow
overflow-anchor
overflow-clip-margin
overflow-wrap
overlay
overscroll-behavior
P
padding
padding-block
padding-inline
page-break
paint-order
perspective
perspective-origin
place-content
place-items
place-self
pointer-events
position
position-anchor
position-area
position-try-fallbacks
position-try-order
position-visibility
print-color-adjust
Q
quotes
R
resize
right
rotate
S
scale
scroll-behavior
scroll-margin
scroll-marker-group
scroll-padding
scroll-snap-align
scroll-snap-stop
scroll-snap-type
scrollbar
scrollbar-color
scrollbar-gutter
scrollbar-width
shape-image-threshold
shape-margin
shape-outside
speak
stroke
stroke-dasharray
stroke-dashoffset
stroke-linecap
stroke-linejoin
stroke-width
T
tab-size
table-layout
text-align
text-align-last
text-box
text-box-edge
text-box-trim
text-combine-upright
text-decoration
text-decoration-color
text-decoration-line
text-decoration-style
text-decoration-thickness
text-decoration-skip
text-decoration-skip-ink
text-emphasis
text-indent
text-justify
text-orientation
text-overflow
text-rendering
text-shadow
text-stroke
text-transform
text-underline-offset
text-underline-position
text-wrap-mode
text-wrap-style
top / bottom / left / right
touch-action
transform
transform-origin
transform-style
transition
transition-behavior
transition-delay
transition-duration
transition-property
transition-timing-function
translate
U
unicode-bidi
unicode-range
user-select
V
vertical-align
view-timeline-name
view-transition-name
visibility
W
white-space
widows
width
will-change
word-break
word-spacing
writing-mode
X
Y
Z
z-index
zoom
Pseudo-Selectors
A
:active
:any-link
:autofill
B
::backdrop
::before / ::after
:blank
C
:checked
:current
D
::details-content
:default
:defined
:dir()
:disabled
E
:empty
:enabled
F
::file-selector-button
::first-letter
::first-line
:first
:first-child
:first-of-type
:focus
:focus-visible
:focus-within
:fullscreen
:future
G
H
:has()
:hover
I
:in-range
:indeterminate
:invalid
:is
J
K
L
:lang()
:last-child
:last-of-type
:left
:link
M
::marker
N
:not
:nth-child
:nth-last-child
:nth-last-of-type
:nth-of-type
O
:only-child
:only-of-type
:open
:optional
:out-of-range
P
::placeholder
:past
:placeholder-shown
:popover-open
Q
R
:read-write / :read-only
:required
:right
:root
S
::scroll-button()
::scroll-marker
::scroll-marker-group
::selection
T
::target-text
:target
:target-current
U
:user-invalid
V
::view-transition
::view-transition-group
::view-transition-image-new
::view-transition-image-old
::view-transition-image-pair
:valid
:visited
W
:where
X
Y
Z
Selectors
A
Adjacent sibling
[attribute]
B
C
Chained
Child
Class
D
Descendant
E
F
G
General sibling
H
I
ID
J
K
L
M
N
O
P
Q
R
S
T
Type
U
Universal
V
W
X
Y
Z
TOC
Syntax
Basic usage
Accessibility
Styling
Example: Carousel
Example: Vertical scroll snapping
Browser support
Specification
More information
Psst! Create a DigitalOcean account and get $200 in free credit for cloud-based hosting and services.
This comment thread is closed. If you have important information to share, please contact us.
CSS-Tricks is powered by DigitalOcean.
Keep up to date on web dev
with our hand-crafted newsletter
DigitalOcean
About DO
Cloudways
Legal stuff
Get free credit!
CSS-Tricks
Contact
Write for CSS-Tricks!
Advertise with us
Social
RSS Feeds
CodePen
Mastodon
Bluesky
Back to Top