::scroll-marker | CSS-Tricks
Skip to main content
CSS-Tricks
Articles
Notes
Links
Guides
Almanac
Picks
Shuffle
Search
CSS Almanac → Pseudo-Selectors → S → ::scroll-marker
::scroll-marker
Daniel Schwarz
on
May 6, 2025
Get affordable and hassle-free WordPress hosting plans with Cloudways — start your free trial today.
Experimental: Check browser support before using this in production.
The ::scroll-marker pseudo-element adds accessible scroll markers to scroll containers. The child elements of the scroll container will become scroll targets that users can scroll to (in a scroll-snapping manner) when the associated scroll marker is clicked on. ::scroll-marker ultimately provides users with an additional way to navigate overflow content; however, successful implementation requires more than ::scroll-marker by itself.
CodePen Embed Fallback
The following code declares styles for all scroll markers, declares their content (required) as blank, and declares the scroll-marker-group property on the scroll container (required). Since the scroll container has five children, five scroll markers will be created inside a ::scroll-marker-group pseudo-element placed ::after the scroll container, thanks to the scroll-marker-group: after declaration.
<ul class="scroll-container">
<li class="scroll-target"></li>
<li class="scroll-target"></li>
<li class="scroll-target"></li>
<li class="scroll-target"></li>
<li class="scroll-target"></li>
</ul>
.scroll-container {
scroll-marker-group: after; /* Required */
}
::scroll-marker {
content: ""; /* Required */
/* Scroll marker styles */
width: 10px;
height: 10px;
border-radius: 10px;
border: 1px solid black;
}
Your mental model of the HTML code should be this if we were inspecting it in DevTools:
<ul class="scroll-container">
<li class="scroll-target"></li>
<li class="scroll-target"></li>
<li class="scroll-target"></li>
<li class="scroll-target"></li>
<li class="scroll-target"></li>
<::scroll-marker-group>
<::scroll-marker>
<::scroll-marker>
<::scroll-marker>
<::scroll-marker>
<::scroll-marker>
</::scroll-marker-group>
</ul>
A scroll container can have as many scroll markers as necessary, which can be useful for carousels, scroll snapping components, and anywhere that you’d have scroll overflow content.
Optionally, we can combine scroll markers with ::scroll-button()s and other scroll-based pseudo-elements and features.
And to top it all off, scroll makers are fully accessible too. They contain the correct semantics and accessible roles needed to be properly announced in screen readers, not to mention they support keyboard navigation right out of the box.
Syntax
::scroll-marker {
content: <scroll-marker-content>;
}
<scroll-marker-content>: The scroll marker’s rendered content. Must be a valid value of the content property (otherwise the marker won’t show).
There are two other requirements unrelated to the syntax that, if not met, will prevent markers from showing. First, the scroll targets must exist within a scroll container. The second requirement is that the scroll container must have the scroll-marker-group property set to before or after. This is because the default value is none, which causes the ::scroll-marker-group pseudo-element that contains the markers to remain hidden.
Basic usage
Given this HTML:
<ul class="scroll-container">
<li class="scroll-target"></li>
<li class="scroll-target"></li>
<li class="scroll-target"></li>
<li class="scroll-target"></li>
<li class="scroll-target"></li>
</ul>
You’d target scroll markers universally, like this:
::scroll-marker {
/* ... */
}
Or, apply the properties to specific scroll targets, like this:
.scroll-target::scroll-marker {
/* ... */
}
And you must remember to include the content property:
::scroll-marker {
content: ""; /* Required (even if blank) */
}
/* Select first markers */
:first-of-type::scroll-marker {
/* Plain text */
content: "First";
}
::scroll-marker {
/* From data attribute */
content: attr(data-tab-label);
}
/* Increment a counter */
li {
counter-increment: number;
}
li::scroll-marker {
content: counter(number);
}
Accessibility
Scroll markers are fully accessible right out of the box. For example, if you were focused on the first scroll marker, screen readers would announce “selected, tab, 1 of 5.” You can prefix a custom label onto this, though. To do that, you need to provide alternative text via the content property:
/* No alt text */
::scroll-marker {
content: "Visual text"; /* Announces "selected, tab, 1 of 5" */
}
/* Alt text */
::scroll-marker {
content: "Visual text" / "Alt text"; /* Announces "Alt text, selected, tab, 1 of 5" */
}
Styling
Scroll markers are basically links, and this is something to consider when using text markers. For example, you might want to overwrite the color and text-decoration:
::scroll-marker {
content: "Tab 1";
color: inherit;
text-decoration: none;
/* etc. */
}
If you’d rather display stylized scroll markers, set the content property to an empty string followed by the styles:
::scroll-marker {
content: "";
width: 10px;
height: 10px;
border-radius: 10px;
border: 1px solid black;
}
And, of course, we’ll want to make it clear which scroll marker is currently selected. For that, you’ll need to use the :target-current pseudo-class:
::scroll-marker:target-current {
background: black;
}
Finally, you’ll most likely want to put scroll-behavior: smooth on the scroll container to enable smooth scrolling.
@media (prefers-reduced-motion) {
.scroll-container {
scroll-behavior: smooth;
}
}
Example: Carousel
CodePen Embed Fallback
<ul class="carousel">
<li style="background:hsl(10 70% 50%)"></li>
<li style="background:hsl(30 70% 50%)"></li>
<li style="background:hsl(50 70% 50%)"></li>
<li style="background:hsl(70 70% 50%)"></li>
<li style="background:hsl(90 70% 50%)"></li>
</ul>
.carousel {
/* The width */
--carousel-width: 100vw;
width: var(--carousel-width);
/* The height is half the width */
aspect-ratio: 1 / 0.5;
/* Implies flex-direction: row */
display: flex;
li {
/* Give carousel items the same width */
width: var(--carousel-width);
/* Prevent flexbox from overwriting said width */
flex-shrink: 0;
}
/* Show only one carousel item */
overflow: hidden;
/* Turn the carousel into an anchor */
anchor-name: --carousel;
/* Enable smooth scrolling */
scroll-behavior: smooth;
/* Place after the content */
scroll-marker-group: after;
&::scroll-marker-group {
/* Space the markers apart */
display: flex;
gap: 10px;
/* Anchor it to the carousel */
position: fixed;
position-anchor: --carousel;
/* Anchor it horizontally */
justify-self: anchor-center;
/* Anchor it near the bottom */
bottom: calc(anchor(bottom) + 10px);
}
li::scroll-marker {
/* Stylized markers */
content: "";
width: 10px;
height: 10px;
border-radius: 10px;
border: 1px solid black;
}
/* The currently selected marker */
li::scroll-marker:target-current {
background: black;
}
}
The carousel is responsive (defined by --carousel-width).
overflow: hidden also removes the scrollbars (not required).
The required value of scroll-marker-group (either before or after) should match the visual tab order. In this example the scroll markers appear towards the end, which is why we’ve chosen after.
You can align/anchor the scroll marker group in whichever way you’d like.
This is essentially the same thing, but vertical, with scrollbars, and with scroll snapping (for the users that are scrolling manually):
CodePen Embed Fallback
Or, the same thing but with incremental numbered markers:
CodePen Embed Fallback
Example: Tabs
This tabs example is very similar, but the differences relate to the more fundamental aspects of the implementation:
CodePen Embed Fallback
scroll-marker-group is set to before this time, because the tabs are at the top/before the scroll container’s content.
The tab labels are pulled from the HTML data attributes using content: attr(data-tab-label) (useful for pulling data from templating values or the back-end).
Browser support
We can detect browser support for it, if needed:
@supports selector(::scroll-marker) {
/* ::scroll-marker supported */
}
@supports not selector(::scroll-marker) {
/* ::scroll-marker not supported */
}
The same thing in JavaScript:
if (CSS.supports("selector(::scroll-marker)")) {
/* ::scroll-marker supported */
}
if (!CSS.supports("selector(::scroll-marker)")) {
/* ::scroll-marker not supported */
}
Specification
The ::scroll-marker pseudo-element is defined in the CSS Overflow Module Level 5 specification, which is currently in Working Draft status. This means that the information can change between now and the time when it becomes adopted as a formal Candidate Recommendation for browsers to implement.
More information
Article
on
Apr 9, 2025
CSS Carousels
carousel
Geoff Graham
Related
Almanac
on
May 6, 2025
::scroll-button()
.carousel::scroll-button(right) { content: "⮕"; }
Daniel Schwarz
At-Rules
A
B
C
@charset
@color-profile
@container
@counter-style
D
E
F
@font-face
@font-feature-values
@font-palette-values
G
H
I
@import
J
K
@keyframes
L
@layer
M
@media
color-gamut
prefers-reduced-motion
N
@namespace
O
P
@page
@position-try
@property
Q
R
S
@scope
@starting-style
@supports
T
U
V
@view-transition
W
X
Y
Z
Functions
A
anchor()
anchor-size()
attr()
B
C
calc-size()
circle()
clamp()
color()
color-mix()
conic-gradient()
counter()
counters()
cubic-bezier()
D
E
ellipse()
env()
exp()
F
fit-content()
G
H
hsl()
I
image()
image-set()
inset()
J
K
L
lab()
lch()
light-dark()
linear()
linear-gradient()
M
matrix()
max()
min()
minmax()
mod()
N
O
oklab()
oklch()
P
path()
polygon()
Q
R
radial-gradient()
random()
rem()
repeating-conic-gradient()
repeating-linear-gradient()
repeating-radial-gradient()
rgb()
round()
S
scroll()
shape()
sibling-count()
sibling-index()
steps()
symbols()
T
U
url()
V
view()
W
X
xywh()
Y
Z
Properties
A
accent-color
align-content
align-items
align-self
all
anchor-name
anchor-scope
animation
animation-timeline
appearance
aspect-ratio
B
backdrop-filter
backface-visibility
background
background-attachment
background-clip
background-color
background-image
background-origin
background-position
background-repeat
background-size
background-blend-mode
bleed
block-overflow
block-size
border
border-block
border-inline
border-boundary
border-collapse
border-image
border-image-outset
border-image-repeat
border-image-slice
border-image-source
border-image-width
border-radius
border-spacing
bottom
box-decoration-break
box-shadow
box-sizing
break-after
break-before
break-inside
C
caption-side
caret
caret-color
caret-shape
clear
clip-path
color
color-scheme
column-count
column-fill
column-rule
column-rule-color
column-rule-style
column-rule-width
column-span
column-width
columns
contain
container
container-name
container-type
content
content-visibility
counter-increment
counter-reset
counter-set
cursor
D
direction
display
E
empty-cells
F
field-sizing
fill
filter
flex
flex-basis
flex-direction
flex-flow
flex-grow
flex-shrink
flex-wrap
float
font
font-family
font-size
font-stretch
font-style
font-variant
font-weight
font-display
font-feature-settings
font-kerning
font-optical-sizing
font-palette
font-size-adjust
font-synthesis
font-variant-alternates
font-variant-emoji
font-variant-numeric
G
gap
column-gap
row-gap
grid
grid-auto-columns
grid-auto-flow
grid-auto-rows
grid-template
grid-template-areas
grid-template-columns
grid-template-rows
grid-area
grid-column
grid-column-end
grid-column-start
grid-row
grid-row-end
grid-row-start
grid-row / grid-column
H
hanging-punctuation
height
hyphenate-character
hyphenate-limit-chars
hyphens
I
image-rendering
initial-letter
inline-size
inset
inset-block
inset-block-end
inset-block-start
inset-inline
inset-inline-end
inset-inline-start
interpolate-size
isolation
J
justify-content
justify-items
justify-self
K
L
left
letter-spacing
line-break
line-clamp
line-height
list-style
M
margin
margin-block
margin-block-end
margin-block-start
margin-inline
margin-inline-end
margin-inline-start
margin-trim
mask
mask-clip
mask-composite
mask-image
mask-mode
mask-origin
mask-position
mask-repeat
mask-size
mask-border
mask-type
max-height
max-inline-size
max-width
min-height
min-width
mix-blend-mode
N
O
object-fit
object-position
offset-anchor
offset-distance
offset-path
offset-rotate
opacity
order
orphans
outline
outline-color
outline-style
outline-width
outline-offset
overflow
overflow-anchor
overflow-clip-margin
overflow-wrap
overlay
overscroll-behavior
P
padding
padding-block
padding-inline
page-break
paint-order
perspective
perspective-origin
place-content
place-items
place-self
pointer-events
position
position-anchor
position-area
position-try-fallbacks
position-try-order
position-visibility
print-color-adjust
Q
quotes
R
resize
right
rotate
S
scale
scroll-behavior
scroll-margin
scroll-marker-group
scroll-padding
scroll-snap-align
scroll-snap-stop
scroll-snap-type
scrollbar
scrollbar-color
scrollbar-gutter
scrollbar-width
shape-image-threshold
shape-margin
shape-outside
speak
stroke
stroke-dasharray
stroke-dashoffset
stroke-linecap
stroke-linejoin
stroke-width
T
tab-size
table-layout
text-align
text-align-last
text-box
text-box-edge
text-box-trim
text-combine-upright
text-decoration
text-decoration-color
text-decoration-line
text-decoration-style
text-decoration-thickness
text-decoration-skip
text-decoration-skip-ink
text-emphasis
text-indent
text-justify
text-orientation
text-overflow
text-rendering
text-shadow
text-stroke
text-transform
text-underline-offset
text-underline-position
text-wrap-mode
text-wrap-style
top / bottom / left / right
touch-action
transform
transform-origin
transform-style
transition
transition-behavior
transition-delay
transition-duration
transition-property
transition-timing-function
translate
U
unicode-bidi
unicode-range
user-select
V
vertical-align
view-timeline-name
view-transition-name
visibility
W
white-space
widows
width
will-change
word-break
word-spacing
writing-mode
X
Y
Z
z-index
zoom
Pseudo-Selectors
A
:active
:any-link
:autofill
B
::backdrop
::before / ::after
:blank
C
:checked
:current
D
::details-content
:default
:defined
:dir()
:disabled
E
:empty
:enabled
F
::file-selector-button
::first-letter
::first-line
:first
:first-child
:first-of-type
:focus
:focus-visible
:focus-within
:fullscreen
:future
G
H
:has()
:hover
I
:in-range
:indeterminate
:invalid
:is
J
K
L
:lang()
:last-child
:last-of-type
:left
:link
M
::marker
N
:not
:nth-child
:nth-last-child
:nth-last-of-type
:nth-of-type
O
:only-child
:only-of-type
:open
:optional
:out-of-range
P
::placeholder
:past
:placeholder-shown
:popover-open
Q
R
:read-write / :read-only
:required
:right
:root
S
::scroll-button()
::scroll-marker
::scroll-marker-group
::selection
T
::target-text
:target
:target-current
U
:user-invalid
V
::view-transition
::view-transition-group
::view-transition-image-new
::view-transition-image-old
::view-transition-image-pair
:valid
:visited
W
:where
X
Y
Z
Selectors
A
Adjacent sibling
[attribute]
B
C
Chained
Child
Class
D
Descendant
E
F
G
General sibling
H
I
ID
J
K
L
M
N
O
P
Q
R
S
T
Type
U
Universal
V
W
X
Y
Z
Psst! Create a DigitalOcean account and get $200 in free credit for cloud-based hosting and services.
This comment thread is closed. If you have important information to share, please contact us.
CSS-Tricks is powered by DigitalOcean.
Keep up to date on web dev
with our hand-crafted newsletter
DigitalOcean
About DO
Cloudways
Legal stuff
Get free credit!
CSS-Tricks
Contact
Write for CSS-Tricks!
Advertise with us
Social
RSS Feeds
CodePen
Mastodon
Bluesky
Back to Top