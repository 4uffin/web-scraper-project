::target-text | CSS-Tricks
Skip to main content
CSS-Tricks
Articles
Notes
Links
Guides
Almanac
Picks
Shuffle
Search
text
CSS Almanac → Pseudo-Selectors → T → ::target-text
::target-text
Sunkanmi Fafowora
on
Jul 1, 2025
Get affordable and hassle-free WordPress hosting plans with Cloudways — start your free trial today.
The CSS ::target-text pseudo-element selects a text fragment (we’ll explain what those are in a bit) and applies styles to it. Basically, you click a link that includes a text fragment and that fragment is styled, thanks to ::target-text.
p::target-text {
color: red;
background-color: white;
}
Syntax
<element-selector>::target-text {
/* styles */
}
The <element-selector> represents any HTML element that can be referenced and it is optional. If you want it to apply to all text, simply use it without the <element-selector>.
Take note that only a handful of CSS properties apply to ::target-text, which includes:
color
background-color
stroke-width
text-decoration and its constituent properties, including text-underline-position and text-underline-offset
text-shadow
It’s also worth noting that ::target-text works with custom properties.
What’s a text fragment?
To understand this pseudo-class, we must first understand what “target text” is. The target text is the scrolled text referenced by the browser using text fragments.
Text fragments are part of a URL, specifically small portions of text referenced through the /#:~:text= syntax in a link, followed by the target text. For example, I made a demo for this article at the following URL:
https://sunkanmii.github.io/-target-text-example/
I can link to a specific “fragment” of text on the page by appending this to the end of the URL:
#:~:text=This%20part%20should%20be%20highlighted%20and%20styled%20once%20you%20arrive%20here
Put those two together and we get a complete URL that takes you directly to that text fragment on the page:
https://sunkanmii.github.io/-target-text-example/#:~:text=This%20part%20should%20be%20highlighted%20and%20styled%20once%20you%20arrive%20here.
Go ahead and try clicking the link — it should take you to a specific sentence on the page, which the ::target-text pseudo is styling.
Maybe your browser doesn’t support that yet. I’ll include a video that shows the effect:
These text fragments usually pop up when you search for a closely related topic, and the search engine brings a little text snippet from the top search website to highlight your answer. When clicked, it takes you directly to the highlighted text fragment.
Typically, on Google, for example, if no search result pops up, you can click on a dropdown menu and it would highlight some text that would most likely lead to the answer you’re looking for.
Text fragments are pretty interesting, right? Check out the specifications if you want to dive deeper.
Basic usage
With the ::target-text pseudo, we can select any element with text fragments and style them. You can even style it without a preceding selector, so it would target all text fragments.
/* Applies style to all texts in HTML that may be text fragments */
::target-text {
color: grey;
}
/* Applies style to only text in p tags */
p::target-text {
color: blue;
}
/* Applies style only text in container class */
.container::target-text {
color: #1c0245; /* purple that looks hollow */
}
/* Applies style only to text with special-id as its id */
#special-id::target-text {
color: #fbe407;
}
Demo
Here’s a link to a GitHub repo site I created to highlight how ::target-text works.
The code is easy to follow. Simply have the selector you want to apply ::target-text and add the pseudo-class to it, or have the ::target-text on its own if you want global styling.
::target-text {
color: #d63384;
background-color: #fff3cd;
text-decoration: underline wavy #ff6f61;
text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.15);
}
Specification
The CSS ::target-text pseudo-element is defined in the CSS Pseudo-Elements Module Level 4 specification. This is still being tested and improved upon. I, for one, know I’m still going to submit some tickets.
Browser support
More information
Article
on
Jan 13, 2022
Using the CSS :target Selector
Chris Coyier
Article
on
Feb 5, 2020
Browser Version Release Spectrum
Chris Coyier
Related
Almanac
on
Sep 13, 2024
:target
.element:target { background: yellow; }
Sara Cope
Almanac
on
May 22, 2025
:target-current
::scroll-marker:target-current { background: black; }
Daniel Schwarz
Almanac
on
Jan 28, 2025
::first-letter
p::first-letter { }
Sara Cope
Almanac
on
Sep 13, 2024
::first-line
.element::first-line { font-size: 1.3rem; }
Sara Cope
At-Rules
A
B
C
@charset
@color-profile
@container
@counter-style
D
E
F
@font-face
@font-feature-values
@font-palette-values
G
H
I
@import
J
K
@keyframes
L
@layer
M
@media
color-gamut
prefers-reduced-motion
N
@namespace
O
P
@page
@position-try
@property
Q
R
S
@scope
@starting-style
@supports
T
U
V
@view-transition
W
X
Y
Z
Functions
A
anchor()
anchor-size()
attr()
B
C
calc-size()
circle()
clamp()
color()
color-mix()
conic-gradient()
counter()
counters()
cubic-bezier()
D
E
ellipse()
env()
exp()
F
fit-content()
G
H
hsl()
I
image()
image-set()
inset()
J
K
L
lab()
lch()
light-dark()
linear()
linear-gradient()
M
matrix()
max()
min()
minmax()
mod()
N
O
oklab()
oklch()
P
path()
polygon()
Q
R
radial-gradient()
random()
rem()
repeating-conic-gradient()
repeating-linear-gradient()
repeating-radial-gradient()
rgb()
round()
S
scroll()
shape()
sibling-count()
sibling-index()
steps()
symbols()
T
U
url()
V
view()
W
X
xywh()
Y
Z
Properties
A
accent-color
align-content
align-items
align-self
all
anchor-name
anchor-scope
animation
animation-timeline
appearance
aspect-ratio
B
backdrop-filter
backface-visibility
background
background-attachment
background-clip
background-color
background-image
background-origin
background-position
background-repeat
background-size
background-blend-mode
bleed
block-overflow
block-size
border
border-block
border-inline
border-boundary
border-collapse
border-image
border-image-outset
border-image-repeat
border-image-slice
border-image-source
border-image-width
border-radius
border-spacing
bottom
box-decoration-break
box-shadow
box-sizing
break-after
break-before
break-inside
C
caption-side
caret
caret-color
caret-shape
clear
clip-path
color
color-scheme
column-count
column-fill
column-rule
column-rule-color
column-rule-style
column-rule-width
column-span
column-width
columns
contain
container
container-name
container-type
content
content-visibility
counter-increment
counter-reset
counter-set
cursor
D
direction
display
E
empty-cells
F
field-sizing
fill
filter
flex
flex-basis
flex-direction
flex-flow
flex-grow
flex-shrink
flex-wrap
float
font
font-family
font-size
font-stretch
font-style
font-variant
font-weight
font-display
font-feature-settings
font-kerning
font-optical-sizing
font-palette
font-size-adjust
font-synthesis
font-variant-alternates
font-variant-emoji
font-variant-numeric
G
gap
column-gap
row-gap
grid
grid-auto-columns
grid-auto-flow
grid-auto-rows
grid-template
grid-template-areas
grid-template-columns
grid-template-rows
grid-area
grid-column
grid-column-end
grid-column-start
grid-row
grid-row-end
grid-row-start
grid-row / grid-column
H
hanging-punctuation
height
hyphenate-character
hyphenate-limit-chars
hyphens
I
image-rendering
initial-letter
inline-size
inset
inset-block
inset-block-end
inset-block-start
inset-inline
inset-inline-end
inset-inline-start
interpolate-size
isolation
J
justify-content
justify-items
justify-self
K
L
left
letter-spacing
line-break
line-clamp
line-height
list-style
M
margin
margin-block
margin-block-end
margin-block-start
margin-inline
margin-inline-end
margin-inline-start
margin-trim
mask
mask-clip
mask-composite
mask-image
mask-mode
mask-origin
mask-position
mask-repeat
mask-size
mask-border
mask-type
max-height
max-inline-size
max-width
min-height
min-width
mix-blend-mode
N
O
object-fit
object-position
offset-anchor
offset-distance
offset-path
offset-rotate
opacity
order
orphans
outline
outline-color
outline-style
outline-width
outline-offset
overflow
overflow-anchor
overflow-clip-margin
overflow-wrap
overlay
overscroll-behavior
P
padding
padding-block
padding-inline
page-break
paint-order
perspective
perspective-origin
place-content
place-items
place-self
pointer-events
position
position-anchor
position-area
position-try-fallbacks
position-try-order
position-visibility
print-color-adjust
Q
quotes
R
resize
right
rotate
S
scale
scroll-behavior
scroll-margin
scroll-marker-group
scroll-padding
scroll-snap-align
scroll-snap-stop
scroll-snap-type
scrollbar
scrollbar-color
scrollbar-gutter
scrollbar-width
shape-image-threshold
shape-margin
shape-outside
speak
stroke
stroke-dasharray
stroke-dashoffset
stroke-linecap
stroke-linejoin
stroke-width
T
tab-size
table-layout
text-align
text-align-last
text-box
text-box-edge
text-box-trim
text-combine-upright
text-decoration
text-decoration-color
text-decoration-line
text-decoration-style
text-decoration-thickness
text-decoration-skip
text-decoration-skip-ink
text-emphasis
text-indent
text-justify
text-orientation
text-overflow
text-rendering
text-shadow
text-stroke
text-transform
text-underline-offset
text-underline-position
text-wrap-mode
text-wrap-style
top / bottom / left / right
touch-action
transform
transform-origin
transform-style
transition
transition-behavior
transition-delay
transition-duration
transition-property
transition-timing-function
translate
U
unicode-bidi
unicode-range
user-select
V
vertical-align
view-timeline-name
view-transition-name
visibility
W
white-space
widows
width
will-change
word-break
word-spacing
writing-mode
X
Y
Z
z-index
zoom
Pseudo-Selectors
A
:active
:any-link
:autofill
B
::backdrop
::before / ::after
:blank
C
:checked
:current
D
::details-content
:default
:defined
:dir()
:disabled
E
:empty
:enabled
F
::file-selector-button
::first-letter
::first-line
:first
:first-child
:first-of-type
:focus
:focus-visible
:focus-within
:fullscreen
:future
G
H
:has()
:hover
I
:in-range
:indeterminate
:invalid
:is
J
K
L
:lang()
:last-child
:last-of-type
:left
:link
M
::marker
N
:not
:nth-child
:nth-last-child
:nth-last-of-type
:nth-of-type
O
:only-child
:only-of-type
:open
:optional
:out-of-range
P
::placeholder
:past
:placeholder-shown
:popover-open
Q
R
:read-write / :read-only
:required
:right
:root
S
::scroll-button()
::scroll-marker
::scroll-marker-group
::selection
T
::target-text
:target
:target-current
U
:user-invalid
V
::view-transition
::view-transition-group
::view-transition-image-new
::view-transition-image-old
::view-transition-image-pair
:valid
:visited
W
:where
X
Y
Z
Selectors
A
Adjacent sibling
[attribute]
B
C
Chained
Child
Class
D
Descendant
E
F
G
General sibling
H
I
ID
J
K
L
M
N
O
P
Q
R
S
T
Type
U
Universal
V
W
X
Y
Z
TOC
Syntax
What's a text fragment?
Basic usage
Demo
Specification
Browser support
More information
Psst! Create a DigitalOcean account and get $200 in free credit for cloud-based hosting and services.
This comment thread is closed. If you have important information to share, please contact us.
CSS-Tricks is powered by DigitalOcean.
Keep up to date on web dev
with our hand-crafted newsletter
DigitalOcean
About DO
Cloudways
Legal stuff
Get free credit!
CSS-Tricks
Contact
Write for CSS-Tricks!
Advertise with us
Social
RSS Feeds
CodePen
Mastodon
Bluesky
Back to Top