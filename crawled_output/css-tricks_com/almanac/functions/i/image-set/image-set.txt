image-set() | CSS-Tricks
Skip to main content
CSS-Tricks
Articles
Notes
Links
Guides
Almanac
Picks
Shuffle
Search
image optimization
CSS Almanac → Functions → I → image-set()
image-set()
Gabriel Shoyombo
on
Sep 4, 2025
Get affordable and hassle-free WordPress hosting plans with Cloudways — start your free trial today.
The CSS image-set() function allows the browser to display the “best” or most optimal image from a given set of image files. We’ll see what the “best” image means in a bit, but in a nutshell, it takes images of different resolutions or formats and serves the browser the most fitting image based on the user’s device. It works anywhere <image> is accepted, like for background images.
With image-set(), we can serve the most optimal version of an image. You can think of it as yet another weapon in your responsive web design toolbox.
.element {
background-image: image-set(url("example.com/normal-image.png") 1x, url("example.com/big-image.png") 2x);
}
CodePen Embed Fallback
The image-set() function is defined in the CSS Images Module Level 4 specification.
Syntax
<image-set()> = image-set( <image-set-option># )
<image-set-option> = [ <image> | <string> ] [ <resolution> || type(<string>) ]?
Arguments
The CSS image-set() function takes one or more <image>, except the image-set() function itself (meaning you can’t use the function within the function). It accepts up to two optional arguments:
A type(<mime>) to specify the image format (e.g., type("image/jpeg"))
A <resolution> (e.g., 1x, 2x, 300dpi, etc.) to specify the image quality. If no resolution is defined, it defaults to 1x which is the image’s full natural size with no shrinking or zooming.
/* Type */
.banner {
background-image: image-set(
url("banner.AVIF") type("image/AVIF"),
url("banner.WebP") type("image/WebP"),
url("banner.jpeg") type("image/jpeg")
);
}
/* Resolution */
.hero {
background-image: image-set(
url("hero-low.jpeg") 1x, /* Standard resolution */
url("hero-high.jpeg") 2x, /* High DPI (Retina) */
url("hero-ultra.jpeg") 3x /* Ultra high DPI */
);
}
Basic usage
By providing more than one image, each with its own resolution, we can ensure every user gets the best image for their device, i.e., an image with the same resolution as their device’s display. This way, the browser isn’t downloading an overly heavy image file if the user is loading from a low-powered device. Same goes the other way around: users with high-powered devices can get the heavier version.
At the same time, when working with raster images, we want to load small files whenever network conditions aren’t ideal, such as dropping from a high-speed connection to a slower one. The image-set() lets the browser choose the best option based on the device and network conditions.
.hero {
background-image: image-set(
url("image-res-1.png") 1x, /* Low resolution */
url("image-res-2.png") 2x, /* High resolution */
url("image-res-3.png") 3x /* Highest resolution */
);
}
CodePen Embed Fallback
This way, a standard laptop device will typically download the 1x image, a higher-powered MacBook Pro with a retina display will likely pick the 2x image, and some very high-density phones may even select a 3x image. If the network is slow, the browser may decide to load a lower-resolution image instead.
In short, we’re giving the browser jurisdiction to make that decision. The browser knows a lot more about the user’s device and network connection than we do as developers, so it’s nice we have a “set it and forget it” sort of approach for accommodating users.
A 4K display, however, doesn’t necessarily mean a support for higher resolution. The browser chooses based on pixel density, so mobile and large-screen devices alike get the right, according to their screen capacities.
Multiple-format images
We can also let the browser pick the best format for each case, so we can deliver newer image formats while catering to old browsers. For a while, browsers have been using newer formats like AVIF and WebP since they have smaller file sizes, don’t lose as much quality as JPEGs and PNGs when compressed, and have better color depth handling, among others.
Also, the function’s type() argument prevents the browser from downloading an unsupported format in the first place:
.hero {
background-image: image-set(
url("image.AVIF") type("image/AVIF"),
url("image.WebP") type("image/WebP"),
url("image.jpeg") type("image/jpeg")
);
}
CodePen Embed Fallback
With image-set(), we can provide more than one format for the browser to select from, and even throw in legacy image formats (.tiff anyone?) as a fallback for older browsers.
Fast-loading websites
Images are the largest contributor to a webpage’s weight, making them major culprits of poor performance. This has negatively impacted user experience for a long time, and it has even been recorded, by older studies, that 53% of mobile users abandon sites that take longer than three seconds to load.
Using the image-set() function, we can optimize performance at least as far as which type of image is used in a specific instance, which can shave off precious bytes when downloading the page and contribute to a faster loading experience.
We can even combine images with different resolutions and different formats, such that the best resolution with the smallest file size is loaded first:
.hero-banner {
background-image: image-set(
/* Small, optimized images for slow connections */ url("hero-small.AVIF") 1x type("image/AVIF"),
url("hero-small.WebP") 1x type("image/WebP"),
url("hero-small.jpeg") 1x,
/* Higher quality for fast connections and high-DPI */ url("hero-large.AVIF") 2x type("image/AVIF"),
url("hero-large.WebP") 2x type("image/WebP"),
url("hero-large.jpeg") 2x
);
}
CodePen Embed Fallback
This way…
a user on 3G could get a 50KB AVIF instead of a 2MB JPEG,
a user on fiber internet with a Retina display gets the crisp, high-quality version, and
everyone gets the best format based on what their browser supports.
image-set() vs srcset
The CSS image-set() function might look a lot like the HTML srcset attribute at a glance. But the two are indeed different, as the following table outlines:
Featureimage-set()srcsetUsed inCSS (background-image, content, etc.)HTML <img> attributeSyntaxbackground-image: image-set("low.jpeg" 1x, "high.jpeg" 2x);<img srcset="low.jpeg 1x, high.jpeg 2x">Resolution supportPixel density (1x, 2x, 3x)Pixel density (1x, 2x, 3x)Supported formatsSupports different image formats in a single definition.Does not include type(). Use <picture> for format negotiations.Width supportNo width descriptorsWidth descriptors (320w, 640w). It requires sizes to work.Works withAny property that takes imagesThe sizes attribute for viewport-based selection of <img> elements
If you’re simply serving the best image resolution based on the user’s device and network connection, then using the HTML srcset attribute may be your best bet. You can find a detailed explanation about the srcset attribute with many examples of how to use it in our HTML Responsive Images Guide.
Browser support
The image-set() function gained Baseline availability in 2023, so it works in every modern browser at the time of writing. However, you may still need the -webkit prefix or the @supports rule and a fallback to use them on older browsers.
.element {
/* Fallback */
background-image: url("test.png");
/* Chrome/Edge/Opera/Samsung, Safari will fallback to this as well */
background-image: -webkit-image-set(url("test.png") 1x, url("test-2x.png") 2x);
/* Standard use */
background-image: image-set("test.png" 1x, "test-2x.png" 2x);
}
Or:
/* Fallback */
background-image: url("fallback-image.jpeg");
@supports (background-image: image-set("test.jpeg" 1x)) {
background-image: image-set("image.jpeg" 1x, "image-2x.jpeg" 2x);
}
Related tricks!
Article
on
Jun 23, 2021
Using Performant Next-Gen Images in CSS with image-set
avif image-set picture srcset
Ollie Williams
Article
on
Sep 28, 2022
GIFs Without the .gif: The Most Performant Image and Video Options Right Now
avif gif image-set picture video webp
Ollie Williams
Article
on
Jul 14, 2017
Responsive Images in CSS
responsive images
Chris Coyier
Related
Almanac
on
Sep 4, 2025
image()
.element { background-image: image(rtl "example.png#xywh=0,15,35,35", #dddddd); }
Gabriel Shoyombo
Almanac
on
Sep 4, 2025
url()
.element { background-image: url("https://example.com/image.png"); }
Gabriel Shoyombo
At-Rules
A
B
C
@charset
@color-profile
@container
@counter-style
D
E
F
@font-face
@font-feature-values
@font-palette-values
G
H
I
@import
J
K
@keyframes
L
@layer
M
@media
color-gamut
prefers-reduced-motion
N
@namespace
O
P
@page
@position-try
@property
Q
R
S
@scope
@starting-style
@supports
T
U
V
@view-transition
W
X
Y
Z
Functions
A
anchor()
anchor-size()
attr()
B
C
calc-size()
circle()
clamp()
color()
color-mix()
conic-gradient()
counter()
counters()
cubic-bezier()
D
E
ellipse()
env()
exp()
F
fit-content()
G
H
hsl()
I
image()
image-set()
inset()
J
K
L
lab()
lch()
light-dark()
linear()
linear-gradient()
M
matrix()
max()
min()
minmax()
mod()
N
O
oklab()
oklch()
P
path()
polygon()
Q
R
radial-gradient()
random()
rem()
repeating-conic-gradient()
repeating-linear-gradient()
repeating-radial-gradient()
rgb()
round()
S
scroll()
shape()
sibling-count()
sibling-index()
steps()
symbols()
T
U
url()
V
view()
W
X
xywh()
Y
Z
Properties
A
accent-color
align-content
align-items
align-self
all
anchor-name
anchor-scope
animation
animation-timeline
appearance
aspect-ratio
B
backdrop-filter
backface-visibility
background
background-attachment
background-clip
background-color
background-image
background-origin
background-position
background-repeat
background-size
background-blend-mode
bleed
block-overflow
block-size
border
border-block
border-inline
border-boundary
border-collapse
border-image
border-image-outset
border-image-repeat
border-image-slice
border-image-source
border-image-width
border-radius
border-spacing
bottom
box-decoration-break
box-shadow
box-sizing
break-after
break-before
break-inside
C
caption-side
caret
caret-color
caret-shape
clear
clip-path
color
color-scheme
column-count
column-fill
column-rule
column-rule-color
column-rule-style
column-rule-width
column-span
column-width
columns
contain
container
container-name
container-type
content
content-visibility
counter-increment
counter-reset
counter-set
cursor
D
direction
display
E
empty-cells
F
field-sizing
fill
filter
flex
flex-basis
flex-direction
flex-flow
flex-grow
flex-shrink
flex-wrap
float
font
font-family
font-size
font-stretch
font-style
font-variant
font-weight
font-display
font-feature-settings
font-kerning
font-optical-sizing
font-palette
font-size-adjust
font-synthesis
font-variant-alternates
font-variant-emoji
font-variant-numeric
G
gap
column-gap
row-gap
grid
grid-auto-columns
grid-auto-flow
grid-auto-rows
grid-template
grid-template-areas
grid-template-columns
grid-template-rows
grid-area
grid-column
grid-column-end
grid-column-start
grid-row
grid-row-end
grid-row-start
grid-row / grid-column
H
hanging-punctuation
height
hyphenate-character
hyphenate-limit-chars
hyphens
I
image-rendering
initial-letter
inline-size
inset
inset-block
inset-block-end
inset-block-start
inset-inline
inset-inline-end
inset-inline-start
interpolate-size
isolation
J
justify-content
justify-items
justify-self
K
L
left
letter-spacing
line-break
line-clamp
line-height
list-style
M
margin
margin-block
margin-block-end
margin-block-start
margin-inline
margin-inline-end
margin-inline-start
margin-trim
mask
mask-clip
mask-composite
mask-image
mask-mode
mask-origin
mask-position
mask-repeat
mask-size
mask-border
mask-type
max-height
max-inline-size
max-width
min-height
min-width
mix-blend-mode
N
O
object-fit
object-position
offset-anchor
offset-distance
offset-path
offset-rotate
opacity
order
orphans
outline
outline-color
outline-style
outline-width
outline-offset
overflow
overflow-anchor
overflow-clip-margin
overflow-wrap
overlay
overscroll-behavior
P
padding
padding-block
padding-inline
page-break
paint-order
perspective
perspective-origin
place-content
place-items
place-self
pointer-events
position
position-anchor
position-area
position-try-fallbacks
position-try-order
position-visibility
print-color-adjust
Q
quotes
R
resize
right
rotate
S
scale
scroll-behavior
scroll-margin
scroll-marker-group
scroll-padding
scroll-snap-align
scroll-snap-stop
scroll-snap-type
scrollbar
scrollbar-color
scrollbar-gutter
scrollbar-width
shape-image-threshold
shape-margin
shape-outside
speak
stroke
stroke-dasharray
stroke-dashoffset
stroke-linecap
stroke-linejoin
stroke-width
T
tab-size
table-layout
text-align
text-align-last
text-box
text-box-edge
text-box-trim
text-combine-upright
text-decoration
text-decoration-color
text-decoration-line
text-decoration-style
text-decoration-thickness
text-decoration-skip
text-decoration-skip-ink
text-emphasis
text-indent
text-justify
text-orientation
text-overflow
text-rendering
text-shadow
text-stroke
text-transform
text-underline-offset
text-underline-position
text-wrap-mode
text-wrap-style
top / bottom / left / right
touch-action
transform
transform-origin
transform-style
transition
transition-behavior
transition-delay
transition-duration
transition-property
transition-timing-function
translate
U
unicode-bidi
unicode-range
user-select
V
vertical-align
view-timeline-name
view-transition-name
visibility
W
white-space
widows
width
will-change
word-break
word-spacing
writing-mode
X
Y
Z
z-index
zoom
Pseudo-Selectors
A
:active
:any-link
:autofill
B
::backdrop
::before / ::after
:blank
C
:checked
:current
D
::details-content
:default
:defined
:dir()
:disabled
E
:empty
:enabled
F
::file-selector-button
::first-letter
::first-line
:first
:first-child
:first-of-type
:focus
:focus-visible
:focus-within
:fullscreen
:future
G
H
:has()
:hover
I
:in-range
:indeterminate
:invalid
:is
J
K
L
:lang()
:last-child
:last-of-type
:left
:link
M
::marker
N
:not
:nth-child
:nth-last-child
:nth-last-of-type
:nth-of-type
O
:only-child
:only-of-type
:open
:optional
:out-of-range
P
::placeholder
:past
:placeholder-shown
:popover-open
Q
R
:read-write / :read-only
:required
:right
:root
S
::scroll-button()
::scroll-marker
::scroll-marker-group
::selection
T
::target-text
:target
:target-current
U
:user-invalid
V
::view-transition
::view-transition-group
::view-transition-image-new
::view-transition-image-old
::view-transition-image-pair
:valid
:visited
W
:where
X
Y
Z
Selectors
A
Adjacent sibling
[attribute]
B
C
Chained
Child
Class
D
Descendant
E
F
G
General sibling
H
I
ID
J
K
L
M
N
O
P
Q
R
S
T
Type
U
Universal
V
W
X
Y
Z
TOC
Syntax
Arguments
Basic usage
Multiple-format images
Fast-loading websites
image-set() vs srcset
Browser support
Related tricks!
Psst! Create a DigitalOcean account and get $200 in free credit for cloud-based hosting and services.
This comment thread is closed. If you have important information to share, please contact us.
CSS-Tricks is powered by DigitalOcean.
Keep up to date on web dev
with our hand-crafted newsletter
DigitalOcean
About DO
Cloudways
Legal stuff
Get free credit!
CSS-Tricks
Contact
Write for CSS-Tricks!
Advertise with us
Social
RSS Feeds
CodePen
Mastodon
Bluesky
Back to Top