sibling-count() | CSS-Tricks
Skip to main content
CSS-Tricks
Articles
Notes
Links
Guides
Almanac
Picks
Shuffle
Search
CSS Almanac → Functions → S → sibling-count()
sibling-count()
Mojtaba Seyedi
on
Jun 11, 2025
Get affordable and hassle-free WordPress hosting plans with Cloudways — start your free trial today.
Experimental: Check browser support before using this in production.
The sibling-count() CSS function returns the total number of sibling elements an element has, including itself. Think of it sort of as the CSS equivalent of JavaScript’s element.parentElement.children.length.
ul li {
width: calc(100% / sibling-count());
}
Syntax
<sibling-count()> = sibling-count()
The sibling-count() function takes no arguments and returns an <integer>.
Use cases
1. Reverse staggered transitions
A common use case for sibling-index() is creating staggered animations. Now, if you combine it with sibling-count(), you can reverse the direction of that stagger — making the last item animate first, and the first item animate last.
Here’s how that looks in practice:
.item {
transition-duration: calc((sibling-count() - sibling-index() + 1) * 200ms);
}
Instead of delaying each item, I can control how long its transition lasts. That way, all items start at the same time, but earlier ones take longer to finish. So, if you have four items, the first one runs 800ms and the last one runs for 200ms.
CodePen Embed Fallback
At the time, this only works behind the Experimental Web Platform features flag in Chromium-based browsers. Here is a video so you can see how it turns out:
2. Dynamic layout sizing
In our previous example, the bars that slide in with a reverse stagger also show another cool use of sibling-count() — setting size based on how many elements there are.
Instead of giving each bar a fixed height, like 25%, we used this:
.bar {
height: calc(100% / sibling-count());
}
That means no matter how many bars we add or remove, they’ll always split the space evenly. This trick works great for flex layouts — whether it’s height or width, you can use sibling-count() to set the sizing dynamically.
3. Responsive typography
Let’s say you’re rendering a bunch of tags. With sibling-count(), you can automatically adjust the font size based on how many tags there are. That means: more tags equals smaller text, and fewer tags equals bigger text.
.tag {
font-size: calc(3rem - (sibling-count() * 0.1rem));
}
Try clicking the tags to remove them — watch the font size scale up as the count goes down.
CodePen Embed Fallback
sibling-count() works on the DOM tree, not the flat tree
The specification states:
These functions, to match selectors like :nth-child(), operate on the DOM tree, rather than the flat tree like most CSS values do. They may, in the future, have variants that support counting flat tree siblings.
But what does that actually mean? Let’s look at an example to break it down.
<fancy-section>
<div>Slotted 1</div>
<div>Slotted 2</div>
<div>Slotted 3</div>
</fancy-section>
<script>
class FancySection extends HTMLElement {
constructor() {
super();
this.attachShadow({ mode: 'open' }).innerHTML = `
<section>
<slot></slot>
<div>Internal</div>
</section>
<style>
div {
width: calc(100% / sibling-count());
}
</style>
`;
}
}
customElements.define('fancy-section', FancySection);
</script>
At a glance, it looks like we have four <div>s visible in the page:
Three coming from the light DOM and slotted into the component
One internal <div> inside the shadow DOM
So you might expect the sibling-count() to be 4. But it’s actually 2, and here’s why. When the browser renders a component, it creates two trees:
The DOM tree: The actual parent/child relationships in markup
The flat tree: What you see — with slots filled and components expanded
The sibling-count() function works on the DOM tree, which means it doesn’t see slotted content as siblings of internal elements. It only considers elements that are siblings in the same tree scope.
So, inside the <section> element, the DOM structure is:
<section>
<slot></slot>
<!-- First child -->
<div>Internal</div>
<!-- Second child -->
</section>
And that’s why the sibling-count() function returns a value of 2.
width: calc(100% / sibling-count()); /* 100% / 2 = 50% */
Even though visually we have four siblings, those are not real siblings in the DOM tree.
Future possibility: filtered siblings with of selector
The specification also states:
These functions may, in the future, be extended to accept an of <complex-real-selector-list> argument, similar to :nth-child(), to filter on a subset of the children.
That means you might be able to do something like this in the future:
li {
... sibling-count(of .on-sale)
}
In this example, only list items with the .on-sale class are counted when calculating the siblings, regardless of where they are in the full list.
<ul>
<li>Regular item</li>
<li class="on-sale">Sale item 1</li>
<li>Regular item</li>
<li class="on-sale">Sale item 2</li>
<li class="on-sale">Sale item 3</li>
</ul>
Specification
The sibling-count() function is part of CSS Values and Units Module Level 5, which is currently in Working Draft status at the time of writing. That means a lot can change between now and when the feature becomes a formal Candidate Recommendation for implementation.
Browser support
As of May 2025, sibling-count() is only supported in Chromium-based browsers (like Chrome and Edge), and even then, you’ll need to enable the Experimental Web Platform features flag at chrome://flags to try it out. It’s not production-ready yet, but it’s a great time to experiment and explore what it can do.
Track the progress of the Chrome’s implementation over at Chrome Platform Status. You can check Firefox’s work in Bugzilla Ticket #1953973.
More information
Let the Stagger Experiments Begin (Adam Argyle)
Possible Future CSS: Tree-Counting Functions and Random Values (Roman Komarov)
Related tricks!
Article
on
Mar 5, 2025
How to Wait for the sibling-count() and sibling-index() Functions
CSS functions
Juan Diego Rodríguez
Article
on
Apr 9, 2021
Child and Sibling Selectors
CSS
Chris Coyier
Article
on
Sep 1, 2020
A Call for ::nth-everything
nth-letter
Chris Coyier
Article
on
May 26, 2022
How nth-child Works
Chris Coyier
Article
on
Jun 17, 2021
Useful :nth-child Recipes
Chris Coyier
Related
Almanac
on
Jun 3, 2025
sibling-index()
ul li { transform: translateX(calc(sibling-index() * 10px)); }
Mojtaba Seyedi
Almanac
on
Jan 28, 2025
:first-child
.element:first-child { }
Sara Cope
Almanac
on
Sep 13, 2024
:first-of-type
p:first-of-type { text-indent: 1rem; }
first-of-type
Sara Cope
Almanac
on
Jan 28, 2025
:nth-child
.element:nth-child(3n - 1) { }
Sara Cope
Almanac
on
Jun 11, 2025
:nth-last-child
li:nth-last-child(2) { }
Sara Cope
Almanac
on
Jan 28, 2025
:nth-last-of-type
.element:nth-last-of-type(2n + 1){ }
Sara Cope
Almanac
on
Jan 28, 2025
:nth-of-type
.element:nth-of-type(2n + 1) { }
Sara Cope
Almanac
on
Jan 28, 2025
:last-child
.element:last-child { }
Sara Cope
Almanac
on
Sep 13, 2024
:last-of-type
p:last-of-type { font-size: 0.75em; }
Sara Cope
At-Rules
A
B
C
@charset
@color-profile
@container
@counter-style
D
E
F
@font-face
@font-feature-values
@font-palette-values
G
H
I
@import
J
K
@keyframes
L
@layer
M
@media
color-gamut
prefers-reduced-motion
N
@namespace
O
P
@page
@position-try
@property
Q
R
S
@scope
@starting-style
@supports
T
U
V
@view-transition
W
X
Y
Z
Functions
A
anchor()
anchor-size()
attr()
B
C
calc-size()
circle()
clamp()
color()
color-mix()
conic-gradient()
counter()
counters()
cubic-bezier()
D
E
ellipse()
env()
exp()
F
fit-content()
G
H
hsl()
I
image()
image-set()
inset()
J
K
L
lab()
lch()
light-dark()
linear()
linear-gradient()
M
matrix()
max()
min()
minmax()
mod()
N
O
oklab()
oklch()
P
path()
polygon()
Q
R
radial-gradient()
random()
rem()
repeating-conic-gradient()
repeating-linear-gradient()
repeating-radial-gradient()
rgb()
round()
S
scroll()
shape()
sibling-count()
sibling-index()
steps()
symbols()
T
U
url()
V
view()
W
X
xywh()
Y
Z
Properties
A
accent-color
align-content
align-items
align-self
all
anchor-name
anchor-scope
animation
animation-timeline
appearance
aspect-ratio
B
backdrop-filter
backface-visibility
background
background-attachment
background-clip
background-color
background-image
background-origin
background-position
background-repeat
background-size
background-blend-mode
bleed
block-overflow
block-size
border
border-block
border-inline
border-boundary
border-collapse
border-image
border-image-outset
border-image-repeat
border-image-slice
border-image-source
border-image-width
border-radius
border-spacing
bottom
box-decoration-break
box-shadow
box-sizing
break-after
break-before
break-inside
C
caption-side
caret
caret-color
caret-shape
clear
clip-path
color
color-scheme
column-count
column-fill
column-rule
column-rule-color
column-rule-style
column-rule-width
column-span
column-width
columns
contain
container
container-name
container-type
content
content-visibility
counter-increment
counter-reset
counter-set
cursor
D
direction
display
E
empty-cells
F
field-sizing
fill
filter
flex
flex-basis
flex-direction
flex-flow
flex-grow
flex-shrink
flex-wrap
float
font
font-family
font-size
font-stretch
font-style
font-variant
font-weight
font-display
font-feature-settings
font-kerning
font-optical-sizing
font-palette
font-size-adjust
font-synthesis
font-variant-alternates
font-variant-emoji
font-variant-numeric
G
gap
column-gap
row-gap
grid
grid-auto-columns
grid-auto-flow
grid-auto-rows
grid-template
grid-template-areas
grid-template-columns
grid-template-rows
grid-area
grid-column
grid-column-end
grid-column-start
grid-row
grid-row-end
grid-row-start
grid-row / grid-column
H
hanging-punctuation
height
hyphenate-character
hyphenate-limit-chars
hyphens
I
image-rendering
initial-letter
inline-size
inset
inset-block
inset-block-end
inset-block-start
inset-inline
inset-inline-end
inset-inline-start
interpolate-size
isolation
J
justify-content
justify-items
justify-self
K
L
left
letter-spacing
line-break
line-clamp
line-height
list-style
M
margin
margin-block
margin-block-end
margin-block-start
margin-inline
margin-inline-end
margin-inline-start
margin-trim
mask
mask-clip
mask-composite
mask-image
mask-mode
mask-origin
mask-position
mask-repeat
mask-size
mask-border
mask-type
max-height
max-inline-size
max-width
min-height
min-width
mix-blend-mode
N
O
object-fit
object-position
offset-anchor
offset-distance
offset-path
offset-rotate
opacity
order
orphans
outline
outline-color
outline-style
outline-width
outline-offset
overflow
overflow-anchor
overflow-clip-margin
overflow-wrap
overlay
overscroll-behavior
P
padding
padding-block
padding-inline
page-break
paint-order
perspective
perspective-origin
place-content
place-items
place-self
pointer-events
position
position-anchor
position-area
position-try-fallbacks
position-try-order
position-visibility
print-color-adjust
Q
quotes
R
resize
right
rotate
S
scale
scroll-behavior
scroll-margin
scroll-marker-group
scroll-padding
scroll-snap-align
scroll-snap-stop
scroll-snap-type
scrollbar
scrollbar-color
scrollbar-gutter
scrollbar-width
shape-image-threshold
shape-margin
shape-outside
speak
stroke
stroke-dasharray
stroke-dashoffset
stroke-linecap
stroke-linejoin
stroke-width
T
tab-size
table-layout
text-align
text-align-last
text-box
text-box-edge
text-box-trim
text-combine-upright
text-decoration
text-decoration-color
text-decoration-line
text-decoration-style
text-decoration-thickness
text-decoration-skip
text-decoration-skip-ink
text-emphasis
text-indent
text-justify
text-orientation
text-overflow
text-rendering
text-shadow
text-stroke
text-transform
text-underline-offset
text-underline-position
text-wrap-mode
text-wrap-style
top / bottom / left / right
touch-action
transform
transform-origin
transform-style
transition
transition-behavior
transition-delay
transition-duration
transition-property
transition-timing-function
translate
U
unicode-bidi
unicode-range
user-select
V
vertical-align
view-timeline-name
view-transition-name
visibility
W
white-space
widows
width
will-change
word-break
word-spacing
writing-mode
X
Y
Z
z-index
zoom
Pseudo-Selectors
A
:active
:any-link
:autofill
B
::backdrop
::before / ::after
:blank
C
:checked
:current
D
::details-content
:default
:defined
:dir()
:disabled
E
:empty
:enabled
F
::file-selector-button
::first-letter
::first-line
:first
:first-child
:first-of-type
:focus
:focus-visible
:focus-within
:fullscreen
:future
G
H
:has()
:hover
I
:in-range
:indeterminate
:invalid
:is
J
K
L
:lang()
:last-child
:last-of-type
:left
:link
M
::marker
N
:not
:nth-child
:nth-last-child
:nth-last-of-type
:nth-of-type
O
:only-child
:only-of-type
:open
:optional
:out-of-range
P
::placeholder
:past
:placeholder-shown
:popover-open
Q
R
:read-write / :read-only
:required
:right
:root
S
::scroll-button()
::scroll-marker
::scroll-marker-group
::selection
T
::target-text
:target
:target-current
U
:user-invalid
V
::view-transition
::view-transition-group
::view-transition-image-new
::view-transition-image-old
::view-transition-image-pair
:valid
:visited
W
:where
X
Y
Z
Selectors
A
Adjacent sibling
[attribute]
B
C
Chained
Child
Class
D
Descendant
E
F
G
General sibling
H
I
ID
J
K
L
M
N
O
P
Q
R
S
T
Type
U
Universal
V
W
X
Y
Z
TOC
Syntax
Use cases
sibling-count() works on the DOM tree, not the flat tree
Future possibility: filtered siblings with of selector
Specification
Browser support
More information
Related tricks!
Psst! Create a DigitalOcean account and get $200 in free credit for cloud-based hosting and services.
This comment thread is closed. If you have important information to share, please contact us.
CSS-Tricks is powered by DigitalOcean.
Keep up to date on web dev
with our hand-crafted newsletter
DigitalOcean
About DO
Cloudways
Legal stuff
Get free credit!
CSS-Tricks
Contact
Write for CSS-Tricks!
Advertise with us
Social
RSS Feeds
CodePen
Mastodon
Bluesky
Back to Top