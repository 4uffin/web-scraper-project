CSS Container Queries | CSS-Tricks
Skip to main content
CSS-Tricks
Articles
Notes
Links
Guides
Almanac
Picks
Shuffle
Search
Home /
Guides /
CSS Container Queries
Geoff Graham
on
Sep 26, 2024
The main idea of CSS Container Queries is to register an element as a “container” and apply styles to other elements when the container element meets certain conditions.
Brought to you by DigitalOcean
DigitalOcean has the cloud computing services you need to support your growth at any stage. Get started with a free $200 credit!
Container queries are often considered a modern approach to responsive web design where traditional media queries have long been the gold standard — the reason being that we can create layouts made with elements that respond to, say, the width of their containers rather than the width of the viewport.
.parent {
container-name: hero-banner;
container-type: inline-size;
/* or container: hero-banner / inline-size; */
}
}
.child {
display: flex;
flex-direction: column;
}
/* When the container is greater than 60 characters... */
@container hero-banner (width > 60ch) {
/* Change the flex direction of the .child element. */
.child {
flex-direction: row;
}
}
Why care about CSS Container Queries?
When using a container query, we give elements the ability to change based on their container’s size, not the viewport.
They allow us to define all of the styles for a particular element in a more predictable way.
They are more reusable than media queries in that they behave the same no matter where they are used. So, if you were to create a component that includes a container query, you could easily drop it into another project and it will still behave in the same predictable fashion.
They introduce new types of CSS length units that can be used to size elements by their container’s size.
Table of Contents
Registering Elements as Containers
Querying a Container
Container Queries Properties & Values
Specification
Browser Support
Demos!
Articles & Tutorials
References
Registering Elements as Containers
.cards {
container-name: card-grid;
container-type: inline-size;
/* Shorthand */
container: card-grid / inline-size;
}
This example registers a new container named card-grid that can be queried by its inline-size, which is a fancy way of saying its “width” when we’re working in a horizontal writing mode. It’s a logical property. Otherwise, “inline” would refer to the container’s “height” in a vertical writing mode.
The container-name property is used to register an element as a container that applies styles to other elements based on the container’s size and styles.
The container-type property is used to register an element as a container that can apply styles to other elements when it meets certain conditions.
The container property is a shorthand that combines the container-name and container-type properties into a single declaration.
Some Possible Gotchas
The container-name property is optional. An unnamed container will match any container query that does not target a specific container, meaning it could match multiple conditions.
The container-type property is required if we want to query a container by its size or inline-size. The size refers to the container’s inline or block direction, whichever is larger. The inline-size refers to the container’s width in the default horizontal writing mode.
The container-type property’s default value is normal. And by “normal” that means all elements are containers by default, only they are called Style Containers and can only be queried by their applied styles. For example, we can query a container’s background-color value and apply styles to other elements when the value is a certain color value.
A container cannot change its own styles. Rather, they change the styles of their contents instead. In other words, we cannot change the container’s background-color when it is a certain size — but we can change the background-color of any element inside the container. “You cannot style what you query” is a way to think about it.
A container cannot be sized by what’s in it. Normally, an element’s contents influence its size — as in, the more content in it, the larger it will be, and vice versa. But a container must be sized explicitly as part of a flex or grid layout.
Querying a Container
@container my-container (width > 60ch) {
article {
flex-direction: row;
}
}
The @container at-rule property informs the browser that we are working with a container query rather than, say, a media query (i.e., @media).
The my-container part in there refers to the container’s name, as declared in the container’s container-name property.
The article element represents an item in the container, whether it’s a direct child of the container or a further ancestor. Either way, the element must be in the container and it will get styles applied to it when the queried condition is matched.
Some Possible Gotchas
The container’s name is optional. If we leave it out, then any registered container would match when the conditions are met.
A container’s width can be queried with when the container-type property is set to either size or inline-size. That’s because size can query the element’s width or height; meanwhile, inline-size can only refer to the width.
You can query any length. So, in addition to width (i.e., inline-size), there’s an element’s aspect-ratio, block-size (i.e., height), and orientation (e.g. portrait and landscape).
Queries support the range syntax. Most of the examples so far have shown “greater than” (>) and “less than” (<), but there is also “equals” (=) and combinations of the three, such as “more than or equal to” (>=) and “less than or equal to” (<=).
Queries can be chained. That means we can write queries that meet multiple conditions with logical keywords, like and, or, and not.
Container Queries Properties & Values
Container Queries Properties & Values
container-name
container-name: none | <custom-ident>+;
Value Descriptions
none: The element does not have a container name. This is true by default, so you will likely never use this value, as its purpose is purely to set the property’s default behavior.
<custom-ident>: This is the name of the container, which can be anything, except for words that are reserved for other functions, including default, none, at, no, and or. Note that the names are not wrapped in quotes.
Open in Almanac
Initial value: none
Applies to: All elements
Inherited: No
Percentages: N/A
Computed value: none or an ordered list of identifiers
Canonical order: Per grammar
Animation: Not animatable
container-type
container-type: normal | size | inline-size;
Value Descriptions
normal: This indicates that the element is a container that can be queried by its styles rather than size. All elements are technically containers by default, so we don’t even need to explicitly assign a container-type to define a style container.
size: This is if we want to query a container by its size, whether we’re talking about the inline or block direction.
inline-size: This allows us to query a container by its inline size, which is equivalent to width in a standard horizontal writing mode. This is perhaps the most commonly used value, as we can establish responsive designs based on element size rather than the size of the viewport as we would normally do with media queries.
Open in Almanac
Initial value: normal
Applies to: All elements
Inherited: No
Percentages: N/A
Computed value: As specified by keyword
Canonical order: Per grammar
Animation: Not animatable
container
container: <'container-name'> [ / <'container-type'> ]?
Value Definitons
If <'container-type'> is omitted, it is reset to its initial value of normalwhich defines a style container instead of a size container. In other words, all elements are style containers by default, unless we explicitly set the container-type property value to either size or inline-size which allows us to query a container’s size dimensions.
Open in Almanac
Initial value: none / normal
Applies to: All elements
Inherited: No
Percentages: N/A
Computed value: As specified
Canonical order: Per grammar
Animation: Not animatable
Container Length Units
Container Width & Height Units
UnitNameEquivalent to…cqwContainer query width1% of the queried container’s widthcqhContainer query height1% of the queried container’s height
Container Logical Directions
UnitNameEquivalent to…cqiContainer query inline size1% of the queried container’s inline size, which is its width in a horizontal writing mode.cqbContainer query block size1% of the queried container’s inline size, which is its height in a horizontal writing mode.
Container Minimum & Maximum Lengths
UnitNameEquivalent to…cqminContainer query minimum sizeThe value of cqi or cqb, whichever is smaller.cqmaxContainer query maximum sizeThe value of cqi or cqb, whichever is larger.
Container Style Queries
Container Style Queries is another piece of the CSS Container Queries puzzle. Instead of querying a container by its size or inline-size, we can query a container’s CSS styles. And when the container’s styles meet the queried condition, we can apply styles to other elements. This is the sort of “conditional” styling we’ve wanted on the web for a long time: If these styles match over here, then apply these other styles over there.
CSS Container Style Queries are only available as an experimental feature in modern web browsers at the time of this writing, and even then, style queries are only capable of evaluating CSS custom properties (i.e., variables).
Browser Support
The feature is still considered experimental at the time of this writing and is not supported by any browser, unless enabled through feature flags.
This browser support data is from Caniuse, which has more detail. A number indicates that browser supports the feature at that version and up.DesktopChromeFirefoxIEEdgeSafari143NoNo140TPMobile / TabletAndroid ChromeAndroid FirefoxAndroidiOS Safari140No14026.1
Registering a Style Container
article {
container-name: card;
}
That’s really it! Actually, we don’t even need the container-name property unless we need to target it specifically. Otherwise, we can skip registering a container altogether.
And if you’re wondering why there’s no container-type declaration, that’s because all elements are already considered containers. It’s a lot like how all elements are position: static by default; there’s no need to declare it. The only reason we would declare a container-type is if we want a CSS Container Size Query instead of a CSS Container Style Query.
So, really, there is no need to register a container style query because all elements are already style containers right out of the box! The only reason we’d declare container-name, then, is simply to help select a specific container by name when writing a style query.
Using a Style Container Query
@container style(--bg-color: #000) {
p { color: #fff; }
}
In this example, we’re querying any matching container (because all elements are style containers by default).
Notice how the syntax it’s a lot like a traditional media query? The biggest difference is that we are writing @container instead of @media. The other difference is that we’re calling a style() function that holds the matching style condition. This way, a style query is differentiated from a size query, although there is no corresponding size() function.
In this instance, we’re checking if a certain custom property named --bg-color is set to black (#000). If the variable’s value matches that condition, then we’re setting paragraph (p) text color to white (#fff).
Custom Properties & Variables
.card-wrapper {
--bg-color: #000;
}
.card {
@container style(--bg-color: #000) {
/* Custom CSS */
}
}
Nesting Style Queries
@container style(--featured: true) {
article {
grid-column: 1 / -1;
}
@container style(--theme: dark) {
article {
--bg-color: #000;
--text: #fff;
}
}
}
Specification
CSS Container Queries are defined in the CSS Containment Module Level 5 specification, which is currently in Editor’s Draft status at the time of this writing.
Browser Support
Browser support for CSS Container Size Queries is great. It’s just style queries that are lacking support at the time of this writing.
Chrome 105 shipped on August 30, 2022, with support.
Safari 16 shipped on September 12, 2022, with support.
Firefox 110 shipped on February 14, 2023, with support.
This browser support data is from Caniuse, which has more detail. A number indicates that browser supports the feature at that version and up.DesktopChromeFirefoxIEEdgeSafari106110No10616.0Mobile / TabletAndroid ChromeAndroid FirefoxAndroidiOS Safari14014214016.0
Demos!
Many, many examples on the web demonstrate how container queries work. The following examples are not unique in that regard in that they illustrate the general concept of applying styles when a container element meets a certain condition.
You will find plenty more examples listed in the References at the end of this guide, but check out Ahmad Shadeed’s Container Queries Lab for the most complete set of examples because it also serves as a collection of clever container query use cases.
Card Component
In this example, a “card” component changes its layout based on the amount of available space in its container.
CodePen Embed Fallback
Call to Action Panel
This example is a lot like those little panels for signing up for an email newsletter. Notice how the layout changes three times according to how much available space is in the container. This is what makes CSS Container Queries so powerful: you can quite literally drop this panel into any project and the layout will respond as it should, as it’s based on the space it is in rather than the size of the browser’s viewport.
CodePen Embed Fallback
Stepper Component
This component displays a series of “steps” much like a timeline. In wider containers, the stepper displays steps horizontally. But if the container becomes small enough, the stepper shifts things around so that the steps are vertically stacked.
CodePen Embed Fallback
Icon Button
Sometimes we like to decorate buttons with an icon to accentuate the button’s label with a little more meaning and context. And sometimes we don’t know just how wide that button will be in any given context, which makes it tough to know when exactly to hide the icon or re-arrange the button’s styles when space becomes limited. In this example, an icon is displayed to the right edge of the button as long as there’s room to fit it beside the button label. If room runs out, the button becomes a square tile that stacks the icons above the label. Notice how the border-radius is set in container query units, 4cqi, which is equal to 4% of the container’s inline-size (i.e. width) and results in rounder edges as the button grows in size.
CodePen Embed Fallback
Pagination
Pagination is a great example of a component that benefits from CSS Container Queries because, depending on the amount of space we have, we can choose to display links to individual pages, or hide them in favor of only two buttons, one to paginate to older content and one to paginate to newer content.
CodePen Embed Fallback
Articles & Tutorials
General Information
Link
on
Oct 4, 2022
Say Hello to CSS Container Queries
container-queries
Robin Rendle
Link
on
Dec 16, 2019
The Origin Story of Container Queries
container container-queries
Robin Rendle
Article
on
Jun 11, 2021
A Cornucopia of Container Queries
container-queries
Geoff Graham
Article
on
Apr 6, 2017
Container Query Discussion
container-queries
Chris Coyier
Link
on
Jul 1, 2015
Container Queries: Once More Unto the Breach
container-queries
Chris Coyier
Article
on
Aug 29, 2022
Next Gen CSS: @container
container-queries
Una Kravets
Article
on
May 17, 2021
251: Container Queries are the Future
Geoff Graham
Article
on
Oct 9, 2019
Let’s Not Forget About Container Queries
container-queries media queries
Chris Coyier
Article
on
Dec 2, 2020
Minimal Takes on Faking Container Queries
container-queries
Chris Coyier
Article
on
Nov 12, 2020
The Raven Technique: One Step Closer to Container Queries
calc clamp container-queries max min responsive
Mathias Hülsbusch
Container Size Query Tutorials
Link
on
Jun 15, 2021
Media Queries in Times of @container
container-queries
Chris Coyier
Article
on
Sep 21, 2022
Can We Create a “Resize Hack” With Container Queries?
container-queries
Jhey Tompkins
Article
on
Dec 13, 2022
A Few Times Container Size Queries Would Have Helped Me Out
container-queries
Dan Christofi
Article
on
Jan 19, 2022
A New Container Query Polyfill That Just Works
container-queries
Chris Coyier
Article
on
Jun 21, 2021
256: When to use @container queries
Geoff Graham
Link
on
Sep 1, 2022
iShadeed’s Container Queries Lab
container-queries
Geoff Graham
Article
on
Dec 2, 2020
Minimal Takes on Faking Container Queries
container-queries
Chris Coyier
Article
on
May 4, 2020
Playing With (Fake) Container Queries With watched-box & resizeasaurus
container-queries custom elements
Chris Coyier
Container Style Queries
Article
on
Nov 7, 2022
Early Days of Container Style Queries
container-queries
Geoff Graham
Article
on
May 22, 2024
Digging Deeper Into Container Style Queries
container-queries
Geoff Graham
Almanac References
Almanac
on
May 22, 2024
container
.element { container: cards-grid / inline-size; }
container-queries
Geoff Graham
Almanac
on
May 22, 2024
container-name
.element { container-name: cards-grid; }
container-queries
Geoff Graham
Almanac
on
May 22, 2024
container-type
.element { container-type: inline-size; }
container-queries
Geoff Graham
Related Guides
Article
on
Dec 19, 2024
CSS Media Queries Guide
media queries
Andrés Galante
Article
on
Oct 17, 2024
CSS Custom Properties Guide
custom properties
Chris Coyier
References
Container Queries: A Quick Start Guide (OddBird)
CSS Containers, What Do They Know? (OddBird)
A Primer On CSS Container Queries (Smashing Magazine)
CSS Container Queries: Use-Cases And Migration Strategies (Smashing Magazine)
An Interactive Guide to CSS Container Queries (and Demos) (Ahmad Shadeed)
Container queries – Designing in the Browser (web.dev)
CSS container queries (Mozilla Developer Network)
Container Queries are going to change how we make layouts (Kevin Powell)
Container queries and units (Zach Saucier)
Container Query Units and Fluid Typography (ModernCSS)
Psst! Create a DigitalOcean account and get $200 in free credit for cloud-based hosting and services.
Comments
arkhi Permalink to comment# June 10, 2024
Hello. Thanks for the reminder about Container queries.
Aren’t all elements’ position static by default though?
Reply
Daryl Permalink to comment# August 20, 2024
Yeah that part threw me for a second.
I had to check if the specs had somehow changed or something! But yes all element position is still static by default not relative.
Katok Permalink to comment# June 12, 2024
But it’s still impossible to create a rule that would allow specific styles to be applied if the height of the container has certain values, right?
Just quick example:
Here is how we often use container queries for responsive layouts:
.card {
container: card / inline-size;
}
.inner-wrapper {
display: grid;
grid-template-columns: 2fr 1fr 1fr;
}
@container card (width < 300px) {
.inner-wrapper {
grid-template-columns: 1fr;
}
}
But let’s imagine that we need to do something, if our card will be too tall, for example, create fog fade:
@container card (height > 200px) {
.inner-wrapper {
max-height: 200px;
overflow: auto;
mask-image: linear-gradient(to top, transparent, #000 30%, #000)
}
}
It won’t work, because we use inline-size as a type of container card. But if we’ll change the type to size, we must use certain height for the container (but we don’t actually know, what height it would be on the page, because content is different, and we just want to the safe our cards of oversize, and hide the content, and show some additional ui elements, etc.)
Reply
Kevin C. Permalink to comment# July 19, 2024
A question about an issue I’m encountering. When I use a list of cards where each card is displayed using a container query and I’m using a tooltip (NuxtUI library), the text from the next card appears in front of that tooltip if it overlaps it. The tooltip appears correctly when I remove the “container query” part from the card. Is this because of the stacking order? Or is their a solution to this?
Reply
Leave a Reply Cancel replyYour email address will not be published. Required fields are marked *Comment * Name *
Email *
Website
Save my name, email, and website in this browser for the next time I comment.
Copy and paste this code: micuno *
Leave this field empty
Δ
CSS-Tricks is powered by DigitalOcean.
Keep up to date on web dev
with our hand-crafted newsletter
DigitalOcean
About DO
Cloudways
Legal stuff
Get free credit!
CSS-Tricks
Contact
Write for CSS-Tricks!
Advertise with us
Social
RSS Feeds
CodePen
Mastodon
Bluesky
Back to Top